---
title: "Database Rules"
description: "PostgreSQL, Redis, SQLAlchemy –º–æ–¥–µ–ª–∏ –∏ –º–∏–≥—Ä–∞—Ü–∏–∏"
tags: ["database", "postgresql", "redis", "models"]
version: "3.1"
---

# Database Rules

## üéØ High-Level Overview

**–¢–û–õ–¨–ö–û PostgreSQL —á–µ—Ä–µ–∑ Supabase!** –ù–∏–∫–∞–∫–æ–≥–æ SQLite fallback.

**Stack:**
- PostgreSQL 15 (primary database)
- Redis/Valkey (cache + sessions)
- SQLAlchemy ORM
- Connection pooling —á–µ—Ä–µ–∑ Supavisor

## üóÑÔ∏è PostgreSQL Configuration

### Database URL (–∫—Ä–∏—Ç–∏—á–Ω–æ!)

```python
# database.py
import os
from sqlalchemy import create_engine

def get_database_url() -> str:
    """
    –í–ê–ñ–ù–û: –¢–û–õ–¨–ö–û PostgreSQL (Supabase)
    –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ SQLite!
    """
    database_url = os.getenv("TELEGRAM_DATABASE_URL")
    
    if not database_url:
        raise ValueError(
            "TELEGRAM_DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\n"
            "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å: postgresql://postgres:password@db:5432/postgres"
        )
    
    if "sqlite" in database_url.lower():
        raise ValueError(
            "SQLite –ù–ï –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è!\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ PostgreSQL (Supabase)"
        )
    
    return database_url

# Connection pooling
engine = create_engine(
    get_database_url(),
    pool_size=20,
    max_overflow=10,
    pool_pre_ping=True,  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∂–∏–≤—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    echo=False  # True –¥–ª—è debug SQL
)
```

### Environment Variables

```bash
# Pr—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ (–≤–Ω—É—Ç—Ä–∏ Docker)
TELEGRAM_DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@db:5432/postgres

# –ß–µ—Ä–µ–∑ pooler (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è production)
TELEGRAM_DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@db:6543/postgres

# –ò–∑ —Ö–æ—Å—Ç–∞
TELEGRAM_DATABASE_URL=postgresql://postgres:password@localhost:5432/postgres
```

## üìä SQLAlchemy Models

### Base Configuration

```python
# models.py
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy import Column, BigInteger, String, DateTime, Integer, Boolean
from datetime import datetime, timezone

Base = declarative_base()

class BaseModel(Base):
    """–ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å —Å –æ–±—â–∏–º–∏ –ø–æ–ª—è–º–∏"""
    __abstract__ = True
    
    id = Column(BigInteger, primary_key=True, autoincrement=True)
    created_at = Column(
        DateTime(timezone=True),
        default=lambda: datetime.now(timezone.utc)
    )
    updated_at = Column(
        DateTime(timezone=True),
        default=lambda: datetime.now(timezone.utc),
        onupdate=lambda: datetime.now(timezone.utc)
    )
```

### User Model

```python
class User(Base):
    __tablename__ = "users"
    
    id = Column(BigInteger, primary_key=True)
    telegram_id = Column(BigInteger, unique=True, nullable=False)
    username = Column(String, nullable=True)
    
    # Authentication
    is_authenticated = Column(Boolean, default=False)
    
    # Roles & Subscription (v3.1)
    role = Column(String, default="user")  # admin, user
    subscription_type = Column(String, default="free")
    subscription_expires = Column(DateTime(timezone=True), nullable=True)
    max_channels = Column(Integer, default=3)
    
    # Invitations
    invited_by = Column(Integer, ForeignKey("users.id"), nullable=True)
    
    # Timestamps
    created_at = Column(DateTime(timezone=True), default=lambda: datetime.now(timezone.utc))
    updated_at = Column(DateTime(timezone=True), onupdate=lambda: datetime.now(timezone.utc))
    
    # Relationships
    channels = relationship(
        "Channel",
        secondary="user_channel",
        back_populates="users"
    )
    
    def is_admin(self) -> bool:
        return self.role == "admin"
```

### Invite Code Model

```python
class InviteCode(Base):
    __tablename__ = "invite_codes"
    
    code = Column(String, primary_key=True)
    created_by = Column(Integer, ForeignKey("users.id"))
    
    # Validity
    expires_at = Column(DateTime(timezone=True), nullable=False)
    max_uses = Column(Integer, default=1)
    uses_count = Column(Integer, default=0)
    
    # Subscription settings
    default_subscription = Column(String, default="free")
    default_trial_days = Column(Integer, default=0)
    
    @staticmethod
    def generate_code() -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç 12-—Å–∏–º–≤–æ–ª—å–Ω—ã–π –∫–æ–¥"""
        import random
        import string
        return ''.join(
            random.choices(
                string.ascii_uppercase + string.digits,
                k=12
            )
        )
    
    def is_valid(self) -> bool:
        now = datetime.now(timezone.utc)
        return (
            self.uses_count < self.max_uses and
            self.expires_at > now
        )
```

### Many-to-Many Relationships

```python
# Association table
user_channel = Table(
    'user_channel',
    Base.metadata,
    Column('user_id', BigInteger, ForeignKey('users.id')),
    Column('channel_id', BigInteger, ForeignKey('channels.id')),
    UniqueConstraint('user_id', 'channel_id')
)

class Channel(Base):
    __tablename__ = "channels"
    
    id = Column(BigInteger, primary_key=True)
    channel_username = Column(String, unique=True)
    
    # Relationships
    users = relationship(
        "User",
        secondary="user_channel",
        back_populates="channels"
    )
    posts = relationship("Post", back_populates="channel")
```

## ‚è∞ Timezone Handling (–∫—Ä–∏—Ç–∏—á–Ω–æ!)

### –í–°–ï–ì–î–ê Timezone-Aware

```python
from datetime import datetime, timezone
from zoneinfo import ZoneInfo

# ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ - UTC –≤ –ë–î
user.created_at = datetime.now(timezone.utc)
invite.expires_at = datetime.now(timezone.utc) + timedelta(days=7)

# ‚úÖ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å timezone check
def is_expired(expires_at: datetime) -> bool:
    # Ensure timezone-aware
    if expires_at.tzinfo is None:
        expires_at = expires_at.replace(tzinfo=timezone.utc)
    
    return datetime.now(timezone.utc) > expires_at

# ‚úÖ –î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
LOCAL_TZ = ZoneInfo('Europe/Moscow')
display_time = user.created_at.astimezone(LOCAL_TZ)
formatted = display_time.strftime('%Y-%m-%d %H:%M:%S %Z')
```

### PostgreSQL Migrations

```python
# scripts/migrations/add_roles_and_subscriptions.py
import psycopg2

def migrate():
    conn = psycopg2.connect(os.getenv("TELEGRAM_DATABASE_URL"))
    cursor = conn.cursor()
    
    # TIMESTAMP –¥–ª—è PostgreSQL (—Å timezone)
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS invite_codes (
            code VARCHAR PRIMARY KEY,
            expires_at TIMESTAMP WITH TIME ZONE NOT NULL,
            created_by INTEGER REFERENCES users(id),
            ...
        )
    """)
    
    conn.commit()
```

## üî¥ Redis Configuration

### Connection Setup

```python
# –ë–ï–ó –ø–∞—Ä–æ–ª—è (Valkey default)
import redis
import json

redis_client = redis.Redis(
    host=os.getenv("REDIS_HOST", "redis"),
    port=int(os.getenv("REDIS_PORT", 6379)),
    decode_responses=True  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å JSON
)

# Healthcheck
try:
    redis_client.ping()
    print("‚úÖ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω")
except redis.ConnectionError:
    print("‚ùå Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
```

### Use Cases

```python
# 1. QR Sessions (TTL 10 –º–∏–Ω—É—Ç)
redis_client.setex(
    f"qr_session:{session_id}",
    600,
    json.dumps({
        "telegram_id": user_id,
        "token": token,
        "status": "waiting"
    })
)

# 2. Admin Sessions (TTL 1 —á–∞—Å)
redis_client.setex(
    f"admin_session:{token}",
    3600,
    json.dumps({
        "telegram_id": admin_id,
        "expires": datetime.now(timezone.utc).isoformat()
    })
)

# 3. Embeddings Cache (TTL 24 —á–∞—Å–∞)
redis_client.setex(
    f"embedding:{text_hash}",
    86400,
    json.dumps(embedding_vector)
)

# 4. Rate Limiting (TTL 1 –º–∏–Ω—É—Ç–∞)
current = redis_client.incr(f"rate:{user_id}:rag_query")
if current == 1:
    redis_client.expire(f"rate:{user_id}:rag_query", 60)
```

### Prefixes –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏

```python
# –í–°–ï–ì–î–ê –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ prefixes
QR_SESSION_PREFIX = "qr_session:"
ADMIN_SESSION_PREFIX = "admin_session:"
EMBEDDING_PREFIX = "embedding:"
RATE_LIMIT_PREFIX = "rate:"
```

## üîÑ Migrations

### Migration Script Template

```python
#!/usr/bin/env python3
"""
Migration: Add roles and subscriptions
Date: 2025-10-12
"""
import os
import sys
from datetime import datetime, timezone
import psycopg2

def get_database_url() -> str:
    url = os.getenv("TELEGRAM_DATABASE_URL")
    
    if not url or "sqlite" in url.lower():
        raise ValueError("–¢–æ–ª—å–∫–æ PostgreSQL –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è!")
    
    return url

def backup_database():
    """Backup –ø–µ—Ä–µ–¥ –º–∏–≥—Ä–∞—Ü–∏–µ–π"""
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    print(f"üì¶ Backup: {timestamp}")
    # docker exec supabase-db pg_dump ...

def migrate():
    conn = psycopg2.connect(get_database_url())
    cursor = conn.cursor()
    
    try:
        # –ú–∏–≥—Ä–∞—Ü–∏—è
        cursor.execute("""
            ALTER TABLE users
            ADD COLUMN IF NOT EXISTS role VARCHAR DEFAULT 'user',
            ADD COLUMN IF NOT EXISTS subscription_type VARCHAR DEFAULT 'free'
        """)
        
        conn.commit()
        print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
    except Exception as e:
        conn.rollback()
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        raise
    finally:
        cursor.close()
        conn.close()

if __name__ == "__main__":
    backup_database()
    migrate()
```

## ‚úÖ Verification Steps

1. **PostgreSQL –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è:**
```bash
grep -r "sqlite" database.py
# –î–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å 0 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
```

2. **Timezone-aware datetime:**
```python
# –í—Å–µ datetime –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å timezone
assert user.created_at.tzinfo is not None
assert invite.expires_at.tzinfo is not None
```

3. **Redis –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:**
```bash
docker exec redis redis-cli PING
# PONG
```

4. **Connection pooling:**
```python
# –ü—Ä–æ–≤–µ—Ä–∫–∞ pool
from database import engine
print(f"Pool size: {engine.pool.size()}")
```

5. **Many-to-many —Ä–∞–±–æ—Ç–∞–µ—Ç:**
```python
user = db.query(User).first()
assert len(user.channels) >= 0  # –ë–µ–∑ –æ—à–∏–±–æ–∫
```

## üö® –ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –Ω–∞—Ä—É—à–µ–Ω–∏—è

**SQLite fallback:**
- ‚ùå Production deploy —É–ø–∞–¥–µ—Ç
- ‚ùå Timezone handling —Å–ª–æ–º–∞–µ—Ç—Å—è
- ‚ùå Concurrent access –ø—Ä–æ–±–ª–µ–º—ã

**Naive datetime:**
- ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è expires_at
- ‚ùå PostgreSQL –æ—à–∏–±–∫–∏ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
- ‚ùå –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏

**Redis –±–µ–∑ prefixes:**
- ‚ùå –ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã –∫–ª—é—á–µ–π
- ‚ùå –£—Ç–µ—á–∫–∞ sessions –º–µ–∂–¥—É —Ç–∏–ø–∞–º–∏

## üìö –°–≤—è–∑–∞–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞

- `01-core.mdc` ‚Äî –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞
- `05-security.mdc` ‚Äî Sessions, authentication
- `06-admin.mdc` ‚Äî Admin operations, history
