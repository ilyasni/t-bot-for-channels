---
title: "Telegram Bot Architecture"
description: "Микросервисная архитектура и взаимодействие компонентов"
tags: ["architecture", "microservices", "docker"]
version: "3.1"
---

# Microservices Architecture

## 🏗️ High-Level Overview

Система состоит из 4 основных микросервисов:

```
┌─────────────┐     ┌──────────────┐     ┌────────────┐
│ telethon-bot│────▶│   telethon   │────▶│ rag-service│
│   (bot)     │     │ (API+Parser) │     │  (AI/RAG)  │
└─────────────┘     └──────────────┘     └────────────┘
                            │
                            ▼
                    ┌──────────────┐
                    │ gpt2giga-proxy│
                    │   (GigaChat)  │
                    └──────────────┘
```

## 📦 Микросервисы

### 1. telethon-bot (standalone)

**Роль:** Telegram бот для управления

```yaml
# docker-compose.override.yml
telethon-bot:
  build: ./telethon
  command: python bot.py
  environment:
    - BOT_TOKEN=${BOT_TOKEN}
    - TELEGRAM_DATABASE_URL=${TELEGRAM_DATABASE_URL}
    - REDIS_HOST=redis
```

**Ключевые функции:**
- `/login` — QR-авторизация
- `/add_channel` — добавление каналов
- `/ask`, `/search`, `/recommend` — RAG команды
- `/admin` — Admin Panel (Mini App)

### 2. telethon (API + Parser)

**Роль:** FastAPI сервер + парсинг

```yaml
telethon:
  build: ./telethon
  ports:
    - "8010:8010"  # API
    - "8001:8001"  # Auth web (legacy)
  command: python main.py
```

**Endpoints:**
```python
# API структура
@app.get("/posts")                    # Получить посты
@app.get("/channels")                 # Список каналов
@app.get("/qr-auth")                  # QR-auth Mini App
@app.get("/admin-panel")              # Admin Panel Mini App
@app.get("/api/admin/users")          # Admin API
```

### 3. rag-service

**Роль:** Векторный поиск и AI

```yaml
rag-service:
  build: ./telethon/rag_service
  ports:
    - "8020:8020"
  environment:
    - QDRANT_URL=http://qdrant:6333
    - REDIS_HOST=redis
```

**Endpoints:**
```python
@app.post("/rag/query")               # RAG-запрос
@app.post("/rag/index/post/{id}")     # Индексация
@app.get("/rag/recommend/{user_id}")  # Рекомендации
@app.post("/rag/digest/generate")     # AI-дайджесты
```

### 4. gpt2giga-proxy

**Роль:** OpenAI-совместимый API для GigaChat

```yaml
gpt2giga-proxy:
  image: produman/gpt2giga:latest
  ports:
    - "8090:8090"
  environment:
    - GIGACHAT_CREDENTIALS=${GIGACHAT_CREDENTIALS}
```

**Использование:**
```python
# Embeddings через GigaChat
async with httpx.AsyncClient() as client:
    response = await client.post(
        "http://gpt2giga-proxy:8090/v1/embeddings",
        json={
            "model": "EmbeddingsGigaR",
            "input": text
        }
    )
```

## 🔄 Event-Driven Architecture

```python
# Поток данных
Telegram → Parser → New Post Event
                         ↓
              ┌──────────┼──────────┐
              ↓          ↓          ↓
         Tagging    Indexer     n8n Webhook
         Service    (RAG)       (optional)
              ↓          ↓          
         AI Tags    Qdrant     Flowise
                    Vector      Workflow
                         ↓
                    RAG Ready
                         ↓
              User Query → Answer
```

### Event Handlers

```python
# parser_service.py
async def parse_channel(channel_id: int, user_id: int):
    # 1. Парсинг постов
    posts = await fetch_posts(channel_id)
    
    # 2. Event: new_post
    for post in posts:
        await notify_webhooks("new_post", post.dict())
        
        # 3. Tagging (background)
        background_tasks.add_task(
            tagging_service.tag_post, post.id
        )
        
        # 4. Indexing (background)
        background_tasks.add_task(
            rag_indexer.index_post, post.id
        )
```

## 🐳 Docker Integration

### Запуск системы

```bash
# Из корня n8n-installer:
python start_services.py

# Автоматически:
# 1. Подготавливает директории telethon/
# 2. Копирует .env для telethon
# 3. Запускает docker-compose.override.yml
# 4. Включает в сеть localai_default
```

### Dockerfile паттерн

```dockerfile
# Dockerfile.telethon
FROM python:3.11-slim

WORKDIR /app

# Dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Code
COPY . .

# Sessions volume
VOLUME /app/sessions

CMD ["python", "main.py"]
```

### Volumes

```yaml
volumes:
  - ./telethon/sessions:/app/sessions  # Telegram sessions
  - ./telethon/data:/app/data          # PostgreSQL data
  - ./telethon/logs:/app/logs          # Logs
```

## 🌐 Networking

### Единая сеть

```yaml
networks:
  default:
    name: localai_default
    external: true
```

**Internal communication:**
```python
# telethon-bot → telethon
TELETHON_API_URL = "http://telethon:8010"

# telethon → rag-service
RAG_SERVICE_URL = "http://rag-service:8020"

# rag-service → gpt2giga-proxy
GIGACHAT_PROXY_URL = "http://gpt2giga-proxy:8090"

# All → PostgreSQL
DATABASE_URL = "postgresql://postgres:pwd@db:5432/postgres"

# All → Redis
REDIS_HOST = "redis"
```

## 🔧 Service Communication

### Shared State через Redis

```python
# QR Sessions (telethon-bot ↔ telethon)
redis_client.setex(
    f"qr_session:{session_id}",
    600,  # 10 минут
    json.dumps({
        "telegram_id": 123,
        "invite_code": "ABC123",
        "token": "...",
        "status": "waiting"
    })
)

# Admin Sessions (telethon-bot ↔ telethon)
redis_client.setex(
    f"admin_session:{token}",
    3600,  # 1 час
    json.dumps({
        "telegram_id": 123,
        "expires": datetime.now(timezone.utc).isoformat()
    })
)
```

### Background Tasks

```python
from fastapi import BackgroundTasks

@app.post("/parse")
async def parse_endpoint(
    channel_id: int,
    background_tasks: BackgroundTasks
):
    # Немедленный ответ
    background_tasks.add_task(
        parser_service.parse_channel,
        channel_id
    )
    return {"status": "queued"}
```

## ✅ Verification Steps

1. **Все сервисы запущены:**
```bash
docker ps | grep -E "(telethon|rag-service|gpt2giga)"
# Должно показать 3-4 контейнера
```

2. **Сеть настроена:**
```bash
docker network inspect localai_default
# Все сервисы в одной сети
```

3. **Inter-service communication:**
```bash
# Из telethon → rag-service
docker exec telethon curl http://rag-service:8020/health
# {"status": "healthy"}
```

4. **Redis shared state:**
```bash
# Проверка QR sessions
docker exec redis redis-cli KEYS "qr_session:*"
docker exec redis redis-cli KEYS "admin_session:*"
```

## 🚨 Последствия нарушения

**Разные сети для сервисов:**
- ❌ Сервисы не могут общаться
- ❌ telethon-bot не может создать QR session
- ❌ RAG indexing недоступен

**Отсутствие Redis:**
- ❌ QR Login не работает
- ❌ Admin Panel sessions теряются
- ❌ Нет кеширования embeddings

**Блокирующие операции:**
- ❌ Event loop блокируется
- ❌ Парсинг тормозит API
- ❌ Timeout на запросах

## 📚 Связанные правила

- `01-core.mdc` — Основные правила
- `03-database.mdc` — PostgreSQL, Redis
- `08-api.mdc` — FastAPI endpoints
