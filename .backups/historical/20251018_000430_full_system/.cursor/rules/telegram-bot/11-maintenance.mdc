---
title: "Maintenance & Retention"
description: "Unified retention service, cleanup policies, data lifecycle"
tags: ["maintenance", "retention", "cleanup", "data-lifecycle"]
version: "3.4"
priority: medium
autoAttach: true
scope:
  - "telethon/maintenance/**"
  - "telethon/cleanup_service.py*"
---
# Maintenance & Retention System

> **Rule Type:** Auto-Attached  
> **Lines:** < 500 (optimized)  
> **Priority:** Medium

## üéØ High-Level Overview

**Unified Retention Service** ‚Äî —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å —É—á–µ—Ç–æ–º digest frequency –∏ best practices.

**Key Features:**
- Smart retention logic (—É—á–µ—Ç digest frequency)
- Orphaned channels cleanup
- Dry run mode –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
- Context7 best practices (PostgreSQL partitioning)

## üöÄ Critical Patterns

### 1. Smart Retention Logic

```python
# ‚úÖ Correct - smart retention calculation
retention = max(
    90,  # –ë–∞–∑–æ–≤—ã–π –º–∏–Ω–∏–º—É–º (3 –º–µ—Å—è—Ü–∞ –¥–ª—è RAG/search)
    digest_period * 2,  # –ó–∞–ø–∞—Å –¥–ª—è –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤
    user.retention_days  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
)

# –ü—Ä–∏–º–µ—Ä—ã:
# User —Å daily digest: max(90, 1*2, 30) = 90 –¥–Ω–µ–π
# User —Å weekly digest: max(90, 7*2, 30) = 90 –¥–Ω–µ–π
# User —Å monthly digest: max(90, 30*2, 30) = 90 –¥–Ω–µ–π
# User —Å retention_days=365: max(90, 14, 365) = 365 –¥–Ω–µ–π
```

### 2. Orphaned Channels Cleanup

```python
# ‚úÖ Correct - cleanup –∫–∞–Ω–∞–ª–æ–≤ –±–µ–∑ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
orphaned_channels = db.query(Channel).filter(
    ~Channel.id.in_(
        db.query(user_channel.c.channel_id).filter(
            user_channel.c.is_active == True
        )
    )
).all()

# –£–¥–∞–ª—è–µ–º –ø–æ—Å—Ç—ã —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π –¥–ª—è orphaned –∫–∞–Ω–∞–ª–æ–≤
cutoff = datetime.now(timezone.utc) - timedelta(days=30)
```

### 3. Dry Run Mode

```python
# ‚úÖ Correct - –≤—Å–µ–≥–¥–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å dry run
async def cleanup_user_posts(self, user_id: int, dry_run: bool = False):
    if dry_run:
        # –¢–æ–ª—å–∫–æ –ø–æ–¥—Å—á–µ—Ç, –±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è
        return {"posts_deleted": count, "dry_run": True}
    else:
        # –†–µ–∞–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
        deleted = posts_query.delete()
        return {"posts_deleted": deleted, "dry_run": False}
```

### 4. Context7 Best Practices

```python
# ‚úÖ Correct - PostgreSQL partitioning patterns
# –í–º–µ—Å—Ç–æ DELETE (–º–µ–¥–ª–µ–Ω–Ω–æ):
# DROP TABLE posts_2024_07;  # –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ

# –ò–ª–∏ DETACH –¥–ª—è –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è:
# ALTER TABLE posts DETACH PARTITION posts_2024_07;

# Sequential cleanup: PostgreSQL ‚Üí Neo4j ‚Üí Qdrant
```

## üìä Retention Policies

### Minimum Retention: 90 Days

```python
# ‚úÖ Correct - –º–∏–Ω–∏–º—É–º –¥–ª—è RAG/search
self.min_retention_days = 90  # –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –º–∏–Ω–∏–º—É–º

# –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç:
# - –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è RAG (3 –º–µ—Å—è—Ü–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞)
# - –†–∞–±–æ—Ç–∞ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
# - Trending tags analysis
```

### Digest Frequency Consideration

```python
# ‚úÖ Correct - —É—á–µ—Ç digest frequency
if digest_settings.frequency == "daily":
    digest_period = 1
elif digest_settings.frequency == "weekly":
    digest_period = 7
elif digest_settings.frequency == "monthly":
    digest_period = 30

# –ó–∞–ø–∞—Å –¥–ª—è –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤: period * 2
digest_retention = digest_period * 2
```

## üîß API Endpoints

### Admin Cleanup Endpoints

```python
# ‚úÖ Correct - admin-only endpoints
@app.post("/admin/cleanup/dry-run")
async def cleanup_dry_run(api_key: str = Header(..., alias="api-key")):
    """–ü–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ (–±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è)"""
    result = await unified_retention_service.cleanup_all_users(dry_run=True)
    return result

@app.post("/admin/cleanup/execute")
async def cleanup_execute(api_key: str = Header(..., alias="api-key")):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å cleanup (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    result = await unified_retention_service.cleanup_all_users(dry_run=False)
    return result

@app.get("/admin/cleanup/stats")
async def cleanup_stats(api_key: str = Header(..., alias="api-key")):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ retention –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    return await unified_retention_service.get_retention_stats()
```

## üß™ Testing Patterns

### Unit Tests

```python
# ‚úÖ Correct - comprehensive testing
@pytest.mark.asyncio
async def test_calculate_retention_period_weekly_digest():
    """Test retention calculation for weekly digest"""
    retention = await retention_service.calculate_retention_period(1)
    assert retention == 90  # max(90, 7*2, 30) = 90

@pytest.mark.asyncio
async def test_cleanup_orphaned_channels_dry_run():
    """Test orphaned channels cleanup in dry run mode"""
    result = await retention_service.cleanup_orphaned_channels(dry_run=True)
    assert result >= 0  # Should not delete anything
```

### Integration Tests

```python
# ‚úÖ Correct - workflow testing
def test_full_cleanup_workflow():
    """Test complete cleanup workflow"""
    service = UnifiedRetentionService(base_retention_days=90)
    
    # Test that all methods exist and are callable
    assert hasattr(service, 'calculate_retention_period')
    assert hasattr(service, 'cleanup_orphaned_channels')
    assert hasattr(service, 'cleanup_user_posts')
    assert hasattr(service, 'cleanup_all_users')
    assert hasattr(service, 'get_retention_stats')
```

## üö® Common Pitfalls & Solutions

| Problem | Consequence | Solution |
|---------|-------------|----------|
| **No digest frequency consideration** | –£–¥–∞–ª—è–µ—Ç –ø–æ—Å—Ç—ã –Ω—É–∂–Ω—ã–µ –¥–ª—è –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤ | Smart retention: max(90, digest_period*2, user.retention_days) |
| **Orphaned channels not cleaned** | –ü–æ—Å—Ç—ã –∫–∞–Ω–∞–ª–æ–≤ –±–µ–∑ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤–µ—á–Ω–æ | Weekly orphaned channels cleanup |
| **No dry run mode** | –û–ø–∞—Å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –±–µ–∑ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ | Always support dry_run parameter |
| **Hard retention cutoff** | –ù–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–∞–∑–Ω—ã–µ digest frequency | Dynamic retention calculation |
| **No Context7 patterns** | –ú–µ–¥–ª–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤ | PostgreSQL partitioning patterns |

## ‚úÖ Verification Checklist

After implementing retention logic, verify:

1. **Smart retention:**
   - [ ] –£—á–∏—Ç—ã–≤–∞–µ—Ç digest frequency
   - [ ] –ú–∏–Ω–∏–º—É–º 90 –¥–Ω–µ–π –¥–ª—è RAG/search
   - [ ] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ respected

2. **Orphaned channels:**
   - [ ] Cleanup –∫–∞–Ω–∞–ª–æ–≤ –±–µ–∑ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
   - [ ] –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π
   - [ ] –°–∞–º –∫–∞–Ω–∞–ª –æ—Å—Ç–∞–µ—Ç—Å—è –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏

3. **Dry run mode:**
   - [ ] –í—Å–µ cleanup –º–µ—Ç–æ–¥—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç dry_run
   - [ ] Dry run –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —á—Ç–æ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ
   - [ ] Real cleanup –≤—ã–ø–æ–ª–Ω—è–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ

4. **API endpoints:**
   - [ ] Admin-only access —Å API key
   - [ ] Dry run endpoint –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
   - [ ] Stats endpoint –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞

5. **Testing:**
   - [ ] Unit tests –¥–ª—è –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤
   - [ ] Integration tests –¥–ª—è workflow
   - [ ] Edge cases –ø–æ–∫—Ä—ã—Ç—ã

## üîÑ Migration Path

### From Old Services

```python
# ‚ùå Old (deprecated)
from cleanup_service import cleanup_service
from maintenance.data_retention import retention_service

# ‚úÖ New (unified)
from maintenance.unified_retention_service import unified_retention_service
```

### Scheduler Integration

```python
# ‚úÖ Correct - unified scheduler
from maintenance.cleanup_scheduler import cleanup_scheduler

# Daily cleanup –≤ 03:00 AM
cleanup_scheduler.add_job(
    unified_retention_service.cleanup_all_users,
    'cron',
    hour=3,
    minute=0
)
```

---

**See also:** `01-core.mdc` (Context7 integration), `03-database.mdc` (PostgreSQL patterns)  
**Changelog:** `CHANGELOG.mdc`  
**Version:** 3.4