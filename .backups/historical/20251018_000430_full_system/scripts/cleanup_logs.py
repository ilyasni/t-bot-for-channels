#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤
–£–¥–∞–ª—è–µ—Ç –ª–æ–≥–∏ —Å—Ç–∞—Ä—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π
"""

import os
import time
import argparse
from pathlib import Path
from datetime import datetime, timedelta

def cleanup_logs(logs_dir: Path, days_to_keep: int = 7, dry_run: bool = False):
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤"""
    
    if not logs_dir.exists():
        print(f"‚ùå Logs directory not found: {logs_dir}")
        return
    
    # –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É cutoff
    cutoff_date = datetime.now() - timedelta(days=days_to_keep)
    cutoff_timestamp = cutoff_date.timestamp()
    
    print(f"üßπ Cleaning logs older than {days_to_keep} days (before {cutoff_date.strftime('%Y-%m-%d %H:%M:%S')})")
    print(f"üìÅ Logs directory: {logs_dir}")
    
    if dry_run:
        print("üîç DRY RUN - No files will be deleted")
    
    deleted_count = 0
    total_size = 0
    
    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Ñ–∞–π–ª–∞–º –≤ –ø–∞–ø–∫–µ logs
    for log_file in logs_dir.iterdir():
        if log_file.is_file() and log_file.suffix == '.log':
            # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞
            file_mtime = log_file.stat().st_mtime
            file_date = datetime.fromtimestamp(file_mtime)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª
            if file_mtime < cutoff_timestamp:
                file_size = log_file.stat().st_size
                total_size += file_size
                
                if dry_run:
                    print(f"üóëÔ∏è  Would delete: {log_file.name} ({file_date.strftime('%Y-%m-%d %H:%M:%S')}, {file_size} bytes)")
                else:
                    try:
                        log_file.unlink()
                        print(f"‚úÖ Deleted: {log_file.name} ({file_date.strftime('%Y-%m-%d %H:%M:%S')}, {file_size} bytes)")
                        deleted_count += 1
                    except Exception as e:
                        print(f"‚ùå Error deleting {log_file.name}: {e}")
            else:
                print(f"üìÑ Keeping: {log_file.name} ({file_date.strftime('%Y-%m-%d %H:%M:%S')})")
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if dry_run:
        print(f"\nüîç DRY RUN COMPLETE")
        print(f"üìä Would delete {deleted_count} files ({total_size / 1024 / 1024:.2f} MB)")
    else:
        print(f"\n‚úÖ CLEANUP COMPLETE")
        print(f"üìä Deleted {deleted_count} files ({total_size / 1024 / 1024:.2f} MB)")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description='Clean up old log files')
    parser.add_argument('--days', type=int, default=7, help='Keep logs for this many days (default: 7)')
    parser.add_argument('--dry-run', action='store_true', help='Show what would be deleted without actually deleting')
    parser.add_argument('--logs-dir', type=str, help='Logs directory path (default: telethon/logs)')
    
    args = parser.parse_args()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞–ø–∫—É —Å –ª–æ–≥–∞–º–∏
    if args.logs_dir:
        logs_dir = Path(args.logs_dir)
    else:
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º telethon/logs
        script_dir = Path(__file__).parent.parent
        logs_dir = script_dir / "telethon" / "logs"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–∞–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if not logs_dir.exists():
        print(f"‚ùå Logs directory not found: {logs_dir}")
        print("üí° Use --logs-dir to specify correct path")
        return 1
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É
    cleanup_logs(logs_dir, args.days, args.dry_run)
    
    return 0

if __name__ == "__main__":
    exit(main())
