#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ telethon/
–£–±–µ–∂–¥–∞–µ—Ç—Å—è —á—Ç–æ –≤—Å–µ –ª–æ–≥–∏ –ø–∏—à—É—Ç—Å—è –≤ –ø–∞–ø–∫—É logs/
"""

import os
import logging
import sys
from pathlib import Path

def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è telethon"""
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç–∏
    telethon_dir = Path(__file__).parent.parent / "telethon"
    logs_dir = telethon_dir / "logs"
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É logs –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    logs_dir.mkdir(exist_ok=True)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–∞–∑–æ–≤–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    log_format = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    log_file = logs_dir / "telethon.log"
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        level=logging.INFO,
        format=log_format,
        handlers=[
            # –§–∞–π–ª–æ–≤—ã–π —Ö–µ–Ω–¥–ª–µ—Ä - –ø–∏—à–µ—Ç –≤ logs/telethon.log
            logging.FileHandler(log_file, encoding='utf-8'),
            # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π —Ö–µ–Ω–¥–ª–µ—Ä - –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            logging.StreamHandler(sys.stdout)
        ]
    )
    
    # –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è telethon
    logger = logging.getLogger('telethon')
    logger.info("‚úÖ Logging configured - logs will be written to logs/telethon.log")
    
    return logger

def create_logging_config():
    """–°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    telethon_dir = Path(__file__).parent.parent / "telethon"
    config_file = telethon_dir / "logging_config.py"
    
    config_content = '''"""
–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è Telegram Bot
–í—Å–µ –ª–æ–≥–∏ –ø–∏—à—É—Ç—Å—è –≤ –ø–∞–ø–∫—É logs/
"""

import os
import logging
import sys
from pathlib import Path

def setup_telethon_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è telethon"""
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç–∏
    base_dir = Path(__file__).parent
    logs_dir = base_dir / "logs"
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É logs –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    logs_dir.mkdir(exist_ok=True)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    log_format = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥ —Ñ–∞–π–ª
    main_log = logs_dir / "telethon.log"
    
    # –õ–æ–≥ —Ñ–∞–π–ª –¥–ª—è –æ—à–∏–±–æ–∫
    error_log = logs_dir / "telethon_errors.log"
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    logging.basicConfig(
        level=logging.INFO,
        format=log_format,
        handlers=[
            # –û—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥ —Ñ–∞–π–ª
            logging.FileHandler(main_log, encoding='utf-8'),
            # –õ–æ–≥ —Ñ–∞–π–ª –¥–ª—è –æ—à–∏–±–æ–∫
            logging.FileHandler(error_log, encoding='utf-8', level=logging.ERROR),
            # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥
            logging.StreamHandler(sys.stdout)
        ]
    )
    
    # –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    loggers = {
        'telethon': logging.getLogger('telethon'),
        'telethon.bot': logging.getLogger('telethon.bot'),
        'telethon.parser': logging.getLogger('telethon.parser'),
        'telethon.rag': logging.getLogger('telethon.rag'),
        'telethon.neo4j': logging.getLogger('telethon.neo4j'),
    }
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —É—Ä–æ–≤–Ω–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    for logger in loggers.values():
        logger.setLevel(logging.INFO)
    
    return loggers

def get_logger(name: str) -> logging.Logger:
    """–ü–æ–ª—É—á–∏—Ç—å –ª–æ–≥–≥–µ—Ä –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞"""
    return logging.getLogger(f'telethon.{name}')

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
if __name__ != "__main__":
    setup_telethon_logging()
'''
    
    with open(config_file, 'w', encoding='utf-8') as f:
        f.write(config_content)
    
    print(f"‚úÖ Created logging config: {config_file}")

def update_main_py():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç main.py –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    telethon_dir = Path(__file__).parent.parent / "telethon"
    main_py = telethon_dir / "main.py"
    
    if not main_py.exists():
        print("‚ùå main.py not found")
        return
    
    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    with open(main_py, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ –∏–º–ø–æ—Ä—Ç logging_config
    if 'from logging_config import' in content:
        print("‚úÖ main.py already uses logging_config")
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞
    lines = content.split('\n')
    import_line = None
    
    for i, line in enumerate(lines):
        if line.startswith('import ') or line.startswith('from '):
            import_line = i
        elif line.strip() and not line.startswith('#') and not line.startswith('"""'):
            break
    
    if import_line is not None:
        lines.insert(import_line + 1, 'from logging_config import get_logger')
        lines.insert(import_line + 2, '')
        
        # –ó–∞–º–µ–Ω—è–µ–º logger = logging.getLogger(__name__) –Ω–∞ logger = get_logger('main')
        for i, line in enumerate(lines):
            if 'logger = logging.getLogger(__name__)' in line:
                lines[i] = "logger = get_logger('main')"
                break
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with open(main_py, 'w', encoding='utf-8') as f:
            f.write('\n'.join(lines))
        
        print("‚úÖ Updated main.py to use logging_config")
    else:
        print("‚ùå Could not find import section in main.py")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîß Setting up telethon logging...")
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    create_logging_config()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º main.py
    update_main_py()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    logger = setup_logging()
    logger.info("‚úÖ Logging setup completed successfully")
    
    print("‚úÖ Logging setup completed!")
    print("üìÅ Logs will be written to: telethon/logs/")
    print("üìÑ Main log file: telethon/logs/telethon.log")
    print("üö® Error log file: telethon/logs/telethon_errors.log")

if __name__ == "__main__":
    main()
