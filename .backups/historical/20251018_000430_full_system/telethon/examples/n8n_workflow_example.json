{
  "name": "Telegram Channel Parser - AI Analysis",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "minutes",
              "minutesInterval": 30
            }
          ]
        }
      },
      "id": "cron-trigger",
      "name": "Cron Trigger",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [240, 300]
    },
    {
      "parameters": {
        "url": "http://localhost:8010/parse_all_channels",
        "options": {}
      },
      "id": "http-request-parse",
      "name": "Parse All Channels",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [460, 300]
    },
    {
      "parameters": {
        "url": "http://localhost:8010/users",
        "options": {}
      },
      "id": "http-request-users",
      "name": "Get All Users",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [680, 300]
    },
    {
      "parameters": {
        "jsCode": "// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\nconst users = $input.all()[0].json.users;\n\n// –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç—ã\nconst results = [];\n\nfor (const user of users) {\n  const telegramId = user.telegram_id;\n  \n  // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞\n  const postsResponse = await $http.get({\n    url: `http://localhost:8010/users/${telegramId}/posts`,\n    qs: {\n      hours_back: 24,\n      limit: 100\n    }\n  });\n  \n  const userPosts = postsResponse.data;\n  \n  if (userPosts.posts && userPosts.posts.length > 0) {\n    results.push({\n      user: user,\n      posts: userPosts.posts\n    });\n  }\n}\n\nreturn results.map(item => ({\n  json: item\n}));"
      },
      "id": "code-process-posts",
      "name": "Process Posts",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [900, 300]
    },
    {
      "parameters": {
        "prompt": "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ—Å—Ç—ã –∏–∑ Telegram –∫–∞–Ω–∞–ª–æ–≤ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å –∫—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑:\n\n{{ $json.posts.map(post => `–ö–∞–Ω–∞–ª: @${post.channel_username}\\n–¢–µ–∫—Å—Ç: ${post.text}\\n–ü—Ä–æ—Å–º–æ—Ç—Ä—ã: ${post.views || 'N/A'}\\n–î–∞—Ç–∞: ${post.posted_at}\\n---`).join('\\n\\n') }}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å:\n1. –û–±—â—É—é —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ—Å—Ç–æ–≤\n2. –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã\n3. –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–æ—Å—Ç—ã (–ø–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º)\n4. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞",
        "options": {
          "model": "gpt-3.5-turbo",
          "temperature": 0.7,
          "maxTokens": 1000
        }
      },
      "id": "openai-analysis",
      "name": "AI Analysis",
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 1,
      "position": [1120, 300]
    },
    {
      "parameters": {
        "channel": "general",
        "text": "ü§ñ **–ê–Ω–∞–ª–∏–∑ Telegram –∫–∞–Ω–∞–ª–æ–≤**\n\n**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {{ $json.user.first_name }} (@{{ $json.user.username }})\n**–ö–∞–Ω–∞–ª–æ–≤:** {{ $json.posts.length }}\n\n**AI –ê–Ω–∞–ª–∏–∑:**\n{{ $json.ai_analysis }}\n\n---\n*–ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏*",
        "otherOptions": {
          "parseUrls": true
        }
      },
      "id": "slack-notification",
      "name": "Slack Notification",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 1,
      "position": [1340, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition-1",
              "leftValue": "={{ $json.total_posts_added }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "if-posts-added",
      "name": "If Posts Added",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [680, 500]
    },
    {
      "parameters": {
        "channel": "general",
        "text": "üìä **–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω**\n\n**–ù–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤:** {{ $json.total_posts_added }}\n**–ö–∞–Ω–∞–ª–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ:** {{ $json.total_channels }}\n\n**–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∫–∞–Ω–∞–ª–∞–º:**\n{{ $json.results.map(result => `‚Ä¢ @${result.channel}: ${result.posts_added} –ø–æ—Å—Ç–æ–≤ (${result.status})`).join('\\n') }}",
        "otherOptions": {
          "parseUrls": true
        }
      },
      "id": "slack-parsing-result",
      "name": "Parsing Results",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 1,
      "position": [900, 500]
    }
  ],
  "connections": {
    "Cron Trigger": {
      "main": [
        [
          {
            "node": "Parse All Channels",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse All Channels": {
      "main": [
        [
          {
            "node": "If Posts Added",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get All Users",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get All Users": {
      "main": [
        [
          {
            "node": "Process Posts",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Posts": {
      "main": [
        [
          {
            "node": "AI Analysis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Analysis": {
      "main": [
        [
          {
            "node": "Slack Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If Posts Added": {
      "main": [
        [
          {
            "node": "Parsing Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2024-01-01T00:00:00.000Z",
      "updatedAt": "2024-01-01T00:00:00.000Z",
      "id": "telegram-parser",
      "name": "Telegram Parser"
    }
  ],
  "triggerCount": 1,
  "updatedAt": "2024-01-01T00:00:00.000Z",
  "versionId": "1"
} 