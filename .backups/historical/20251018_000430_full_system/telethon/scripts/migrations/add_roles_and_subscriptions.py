#!/usr/bin/env python3
"""
–ú–∏–≥—Ä–∞—Ü–∏—è –ë–î: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Ä–æ–ª–µ–π –∏ –ø–æ–¥–ø–∏—Å–æ–∫

–î–æ–±–∞–≤–ª—è–µ—Ç:
- –ù–æ–≤—ã–µ –ø–æ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É users (role, subscription_type, etc.)
- –¢–∞–±–ª–∏—Ü—É invite_codes
- –¢–∞–±–ª–∏—Ü—É subscription_history

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python scripts/migrations/add_roles_and_subscriptions.py
"""

import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PYTHONPATH
root_dir = Path(__file__).parent.parent.parent
sys.path.insert(0, str(root_dir))

from sqlalchemy import create_engine, text, inspect
from datetime import datetime, timezone
import logging
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def get_database_url():
    """–ü–æ–ª—É—á–∏—Ç—å URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö - –¢–û–õ–¨–ö–û PostgreSQL"""
    db_url = os.getenv("TELEGRAM_DATABASE_URL")
    if not db_url:
        raise ValueError(
            "‚ùå TELEGRAM_DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\n"
            "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤ .env:\n"
            "TELEGRAM_DATABASE_URL=postgresql://postgres:password@supabase-db:5432/postgres?sslmode=disable"
        )
    
    if not db_url.startswith("postgresql://"):
        raise ValueError(
            f"‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ PostgreSQL!\n"
            f"–¢–µ–∫—É—â–∏–π URL: {db_url}"
        )
    
    return db_url


def backup_database(engine):
    """–°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    if "sqlite" in str(engine.url):
        import shutil
        db_path = str(engine.url).replace("sqlite:///", "")
        backup_path = f"{db_path}.backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        
        if os.path.exists(db_path):
            shutil.copy2(db_path, backup_path)
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –±—ç–∫–∞–ø: {backup_path}")
            return backup_path
    return None


def column_exists(engine, table_name, column_name):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–∞"""
    inspector = inspect(engine)
    columns = [col['name'] for col in inspector.get_columns(table_name)]
    return column_name in columns


def table_exists(engine, table_name):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã"""
    inspector = inspect(engine)
    return table_name in inspector.get_table_names()


def add_user_fields(engine):
    """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –ø–æ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É users"""
    logger.info("üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π –≤ —Ç–∞–±–ª–∏—Ü—É users...")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–ª—è –¥–∞—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ë–î
    datetime_type = "TIMESTAMP" if "postgresql" in str(engine.url) else "DATETIME"
    
    fields_to_add = [
        ("role", "VARCHAR", "user"),
        ("subscription_type", "VARCHAR", "free"),
        ("subscription_expires", datetime_type, None),
        ("subscription_started_at", datetime_type, None),
        ("max_channels", "INTEGER", 3),
        ("invited_by", "INTEGER", None),
    ]
    
    for field_name, field_type, default_value in fields_to_add:
        if not column_exists(engine, "users", field_name):
            if default_value is not None:
                if isinstance(default_value, str):
                    default_clause = f"DEFAULT '{default_value}'"
                else:
                    default_clause = f"DEFAULT {default_value}"
            else:
                default_clause = ""
            
            try:
                with engine.connect() as conn:
                    conn.execute(text(f"ALTER TABLE users ADD COLUMN {field_name} {field_type} {default_clause}"))
                    conn.commit()
                    logger.info(f"  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ: {field_name}")
            except Exception as e:
                logger.warning(f"  ‚ö†Ô∏è –ü–æ–ª–µ {field_name} –≤–æ–∑–º–æ–∂–Ω–æ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {e}")
        else:
            logger.info(f"  ‚ÑπÔ∏è –ü–æ–ª–µ {field_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")


def create_invite_codes_table(engine):
    """–°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É invite_codes"""
    logger.info("üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã invite_codes...")
    
    if table_exists(engine, "invite_codes"):
        logger.info("  ‚ÑπÔ∏è –¢–∞–±–ª–∏—Ü–∞ invite_codes —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–ª—è –¥–∞—Ç
    datetime_type = "TIMESTAMP" if "postgresql" in str(engine.url) else "DATETIME"
    
    create_table_sql = f"""
    CREATE TABLE invite_codes (
        code VARCHAR PRIMARY KEY,
        created_by INTEGER NOT NULL,
        created_at {datetime_type} NOT NULL,
        used_by INTEGER,
        used_at {datetime_type},
        expires_at {datetime_type} NOT NULL,
        max_uses INTEGER DEFAULT 1,
        uses_count INTEGER DEFAULT 0,
        default_subscription VARCHAR DEFAULT 'free',
        default_trial_days INTEGER DEFAULT 0,
        FOREIGN KEY (created_by) REFERENCES users(id),
        FOREIGN KEY (used_by) REFERENCES users(id)
    )
    """
    
    with engine.connect() as conn:
        conn.execute(text(create_table_sql))
        conn.commit()
        logger.info("  ‚úÖ –¢–∞–±–ª–∏—Ü–∞ invite_codes —Å–æ–∑–¥–∞–Ω–∞")
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
    indexes = [
        "CREATE INDEX IF NOT EXISTS idx_invite_codes_created_by ON invite_codes(created_by)",
        "CREATE INDEX IF NOT EXISTS idx_invite_codes_used_by ON invite_codes(used_by)"
    ]
    
    for idx_sql in indexes:
        try:
            with engine.connect() as conn:
                conn.execute(text(idx_sql))
                conn.commit()
        except Exception as e:
            logger.warning(f"  ‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞: {e}")
    
    logger.info("  ‚úÖ –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è invite_codes —Å–æ–∑–¥–∞–Ω—ã")


def create_subscription_history_table(engine):
    """–°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É subscription_history"""
    logger.info("üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã subscription_history...")
    
    if table_exists(engine, "subscription_history"):
        logger.info("  ‚ÑπÔ∏è –¢–∞–±–ª–∏—Ü–∞ subscription_history —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–ª—è –¥–∞—Ç –∏ –∞–≤—Ç–æ–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç
    datetime_type = "TIMESTAMP" if "postgresql" in str(engine.url) else "DATETIME"
    autoincrement = "SERIAL PRIMARY KEY" if "postgresql" in str(engine.url) else "INTEGER PRIMARY KEY AUTOINCREMENT"
    
    create_table_sql = f"""
    CREATE TABLE subscription_history (
        id {autoincrement},
        user_id INTEGER NOT NULL,
        action VARCHAR NOT NULL,
        old_type VARCHAR,
        new_type VARCHAR NOT NULL,
        changed_by INTEGER,
        changed_at {datetime_type} NOT NULL,
        notes TEXT,
        FOREIGN KEY (user_id) REFERENCES users(id),
        FOREIGN KEY (changed_by) REFERENCES users(id)
    )
    """
    
    with engine.connect() as conn:
        conn.execute(text(create_table_sql))
        conn.commit()
        logger.info("  ‚úÖ –¢–∞–±–ª–∏—Ü–∞ subscription_history —Å–æ–∑–¥–∞–Ω–∞")
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
    indexes = [
        "CREATE INDEX IF NOT EXISTS idx_subscription_history_user_id ON subscription_history(user_id)",
        "CREATE INDEX IF NOT EXISTS idx_subscription_history_changed_at ON subscription_history(changed_at)"
    ]
    
    for idx_sql in indexes:
        try:
            with engine.connect() as conn:
                conn.execute(text(idx_sql))
                conn.commit()
        except Exception as e:
            logger.warning(f"  ‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞: {e}")
    
    logger.info("  ‚úÖ –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è subscription_history —Å–æ–∑–¥–∞–Ω—ã")


def assign_first_admin(engine):
    """–ù–∞–∑–Ω–∞—á–∏—Ç—å –ø–µ—Ä–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    logger.info("üëë –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...")
    
    admin_ids = os.getenv("ADMIN_TELEGRAM_IDS", "").split(",")
    if not admin_ids or not admin_ids[0]:
        logger.warning("  ‚ö†Ô∏è ADMIN_TELEGRAM_IDS –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env")
        return
    
    first_admin_id = admin_ids[0].strip()
    
    with engine.connect() as conn:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        result = conn.execute(
            text("SELECT id, telegram_id, first_name FROM users WHERE telegram_id = :telegram_id"),
            {"telegram_id": int(first_admin_id)}
        )
        user = result.fetchone()
        
        if user:
            # –ù–∞–∑–Ω–∞—á–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
            conn.execute(
                text("UPDATE users SET role = 'admin' WHERE telegram_id = :telegram_id"),
                {"telegram_id": int(first_admin_id)}
            )
            conn.commit()
            logger.info(f"  ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user[2]} ({first_admin_id}) –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
        else:
            logger.warning(f"  ‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å telegram_id {first_admin_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
            logger.info(f"  üí° –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –±—É–¥–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ /start")


def migrate_existing_users(engine):
    """–ú–∏–≥—Ä–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    logger.info("üîÑ –ú–∏–≥—Ä–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    
    with engine.connect() as conn:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        result = conn.execute(text("SELECT COUNT(*) FROM users"))
        count = result.fetchone()[0]
        
        if count > 0:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å NULL –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
            conn.execute(text("""
                UPDATE users 
                SET 
                    role = COALESCE(role, 'user'),
                    subscription_type = COALESCE(subscription_type, 'free'),
                    max_channels = COALESCE(max_channels, 3)
                WHERE role IS NULL OR subscription_type IS NULL OR max_channels IS NULL
            """))
            conn.commit()
            logger.info(f"  ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ {count} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏"""
    logger.info("=" * 60)
    logger.info("üöÄ –ù–∞—á–∞–ª–æ –º–∏–≥—Ä–∞—Ü–∏–∏: –†–æ–ª–∏ –∏ –ø–æ–¥–ø–∏—Å–∫–∏")
    logger.info("=" * 60)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º URL –ë–î
        db_url = get_database_url()
        logger.info(f"üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {db_url}")
        
        # –°–æ–∑–¥–∞–µ–º engine
        engine = create_engine(db_url)
        
        # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø
        backup_path = backup_database(engine)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
        add_user_fields(engine)
        create_invite_codes_table(engine)
        create_subscription_history_table(engine)
        migrate_existing_users(engine)
        assign_first_admin(engine)
        
        logger.info("=" * 60)
        logger.info("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        logger.info("=" * 60)
        
        if backup_path:
            logger.info(f"üí° –ë—ç–∫–∞–ø —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {backup_path}")
        
        logger.info("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        logger.info("1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ MASTER_API_ID –∏ MASTER_API_HASH –≤ .env")
        logger.info("2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ ADMIN_TELEGRAM_IDS –≤ .env")
        logger.info("3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞")
        logger.info("4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin_invite –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–∞–π—Ç –∫–æ–¥–æ–≤")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        logger.error("üí° –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ë–î –∏–∑ –±—ç–∫–∞–ø–∞ –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ")
        sys.exit(1)


if __name__ == "__main__":
    main()

