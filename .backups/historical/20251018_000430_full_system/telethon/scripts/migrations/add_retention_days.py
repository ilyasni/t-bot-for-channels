"""
–°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è retention_days –≤ —Ç–∞–±–ª–∏—Ü—É users

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–ª–æ–Ω–∫—É retention_days —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30 –¥–Ω–µ–π
–≤ —Ç–∞–±–ª–∏—Ü—É users –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–∏–æ–¥–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤.

–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç SQLite –∏ PostgreSQL.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python add_retention_days.py
"""

import os
import sys
from sqlalchemy import create_engine, text, inspect
from dotenv import load_dotenv

load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DATABASE_URL = os.getenv("DATABASE_URL", "sqlite:///./data/telethon_bot.db")

# –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è PostgreSQL, –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É SSL
if DATABASE_URL.startswith("postgresql://"):
    if "?sslmode=" not in DATABASE_URL:
        DATABASE_URL += "?sslmode=require"

def check_column_exists(engine, table_name, column_name):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–ª–æ–Ω–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ"""
    inspector = inspect(engine)
    columns = [col['name'] for col in inspector.get_columns(table_name)]
    return column_name in columns

def add_retention_days_column():
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ retention_days –≤ —Ç–∞–±–ª–∏—Ü—É users"""
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        engine = create_engine(DATABASE_URL)
        
        print(f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {DATABASE_URL.split('@')[-1] if '@' in DATABASE_URL else DATABASE_URL}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–ª–æ–Ω–∫–∞
        if check_column_exists(engine, 'users', 'retention_days'):
            print("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ 'retention_days' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ 'users'")
            print("‚ÑπÔ∏è  –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
            return True
        
        print("üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ 'retention_days' –≤ —Ç–∞–±–ª–∏—Ü—É 'users'...")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        is_sqlite = DATABASE_URL.startswith("sqlite://")
        is_postgresql = DATABASE_URL.startswith("postgresql://")
        
        with engine.connect() as conn:
            if is_sqlite:
                # SQLite —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
                sql = text("ALTER TABLE users ADD COLUMN retention_days INTEGER DEFAULT 30")
                conn.execute(sql)
                conn.commit()
                print("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ 'retention_days' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ (SQLite)")
                
            elif is_postgresql:
                # PostgreSQL —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
                sql = text("ALTER TABLE users ADD COLUMN retention_days INTEGER DEFAULT 30")
                conn.execute(sql)
                conn.commit()
                print("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ 'retention_days' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ (PostgreSQL)")
                
            else:
                print("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
                return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–ª–æ–Ω–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞
        if check_column_exists(engine, 'users', 'retention_days'):
            print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            print("‚ÑπÔ∏è  –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ retention_days = 30 –¥–Ω–µ–π")
            
            # –í—ã–≤–æ–¥–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            with engine.connect() as conn:
                result = conn.execute(text("SELECT COUNT(*) FROM users"))
                user_count = result.scalar()
                print(f"üìä –û–±–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_count}")
            
            return True
        else:
            print("‚ùå –û—à–∏–±–∫–∞: –∫–æ–ª–æ–Ω–∫–∞ –Ω–µ –±—ã–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {str(e)}")
        return False

def rollback_migration():
    """–û—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏: —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ retention_days"""
    try:
        engine = create_engine(DATABASE_URL)
        
        print(f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–∫–∞—Ç–∞...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–ª–æ–Ω–∫–∞
        if not check_column_exists(engine, 'users', 'retention_days'):
            print("‚ÑπÔ∏è  –ö–æ–ª–æ–Ω–∫–∞ 'retention_days' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ—Ç–∫–∞—Ç –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
            return True
        
        print("‚ö†Ô∏è  –û—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏: —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ 'retention_days'...")
        
        is_sqlite = DATABASE_URL.startswith("sqlite://")
        is_postgresql = DATABASE_URL.startswith("postgresql://")
        
        with engine.connect() as conn:
            if is_postgresql:
                # PostgreSQL –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç DROP COLUMN
                sql = text("ALTER TABLE users DROP COLUMN retention_days")
                conn.execute(sql)
                conn.commit()
                print("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ 'retention_days' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ (PostgreSQL)")
                
            elif is_sqlite:
                # SQLite –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç DROP COLUMN –Ω–∞–ø—Ä—è–º—É—é
                print("‚ö†Ô∏è  SQLite –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç DROP COLUMN")
                print("‚ÑπÔ∏è  –î–ª—è –æ—Ç–∫–∞—Ç–∞ –≤ SQLite —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã")
                print("‚ÑπÔ∏è  –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏")
                return False
            else:
                print("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
                return False
        
        print("‚úÖ –û—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–∞—Ç–∞: {str(e)}")
        return False

if __name__ == "__main__":
    print("=" * 60)
    print("–ú–∏–≥—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ retention_days")
    print("=" * 60)
    print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    if len(sys.argv) > 1 and sys.argv[1] == "--rollback":
        print("‚ö†Ô∏è  –†–ï–ñ–ò–ú –û–¢–ö–ê–¢–ê –ú–ò–ì–†–ê–¶–ò–ò")
        print()
        response = input("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–∞—Ç–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é? (yes/no): ")
        if response.lower() == "yes":
            success = rollback_migration()
        else:
            print("‚ùå –û—Ç–∫–∞—Ç –æ—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            success = False
    else:
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –¥–ª—è SQLite
        if DATABASE_URL.startswith("sqlite://"):
            db_path = DATABASE_URL.replace("sqlite:///", "")
            if os.path.exists(db_path):
                import shutil
                backup_path = f"{db_path}.backup_{os.path.getmtime(db_path)}"
                shutil.copy2(db_path, backup_path)
                print(f"üíæ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}")
                print()
        
        success = add_retention_days_column()
    
    print()
    print("=" * 60)
    if success:
        print("‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    else:
        print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏")
    print("=" * 60)
    
    sys.exit(0 if success else 1)

