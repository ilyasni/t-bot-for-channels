#!/usr/bin/env python3
"""
migrate_services.py

Python —Å–∫—Ä–∏–ø—Ç –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏ –∫ Many-to-Many —Å—Ç—Ä—É–∫—Ç—É—Ä–µ.
–ê–Ω–∞–ª–æ–≥ start_services.py –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–µ–π.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python3 migrate_services.py               # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
    python3 migrate_services.py --force       # –ë–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π
    python3 migrate_services.py --dry-run     # –ü–æ–∫–∞–∑–∞—Ç—å –ø–ª–∞–Ω –±–µ–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    python3 migrate_services.py --skip-tests  # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã
"""

import os
import sys
import subprocess
import shutil
import time
import argparse
from datetime import datetime
from pathlib import Path


class MigrationManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –º–∏–≥—Ä–∞—Ü–∏–∏ –∫ Many-to-Many —Å—Ç—Ä—É–∫—Ç—É—Ä–µ"""
    
    def __init__(self, force=False, dry_run=False, skip_tests=False):
        self.force = force
        self.dry_run = dry_run
        self.skip_tests = skip_tests
        self.script_dir = Path(__file__).parent
        self.db_file = None  # –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        self.backup_file = None
        self.db_type = 'unknown'  # sqlite or postgresql
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ë–î –∏–∑ .env
        self._detect_database_type()
    
    def _detect_database_type(self):
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –ë–î –∏–∑ .env"""
        try:
            env_path = self.script_dir / ".env"
            if env_path.exists():
                with open(env_path) as f:
                    for line in f:
                        if line.strip().startswith('DATABASE_URL='):
                            db_url = line.split('=', 1)[1].strip()
                            if db_url.startswith('postgresql://') or db_url.startswith('postgres://'):
                                self.db_type = 'postgresql'
                                self.db_file = None  # PostgreSQL –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ñ–∞–π–ª
                            elif db_url.startswith('sqlite:///'):
                                self.db_type = 'sqlite'
                                # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
                                db_path = db_url.replace('sqlite:///', '')
                                self.db_file = Path(db_path) if not Path(db_path).is_absolute() else Path(db_path)
                            break
        except Exception as e:
            # –ù–µ –º–æ–∂–µ–º –≤—ã–∑–≤–∞—Ç—å log_warning –∑–¥–µ—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º print
            print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –ë–î: {e}")
        
    def log_box(self, message, symbol="‚ïê", width=64):
        """–í—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ä–∞–º–∫–µ"""
        print(f"‚ïî{symbol * width}‚ïó")
        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        padding = (width - len(message)) // 2
        print(f"‚ïë{' ' * padding}{message}{' ' * (width - padding - len(message))}‚ïë")
        print(f"‚ïö{symbol * width}‚ïù")
    
    def log_message(self, icon, level, message):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –∏–∫–æ–Ω–∫–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        print(f"{icon} [{level}] {timestamp}: {message}")
    
    def log_info(self, message):
        self.log_message("‚ÑπÔ∏è ", "INFO", message)
    
    def log_success(self, message):
        self.log_message("‚úÖ", "SUCCESS", message)
    
    def log_warning(self, message):
        self.log_message("‚ö†Ô∏è ", "WARNING", message)
    
    def log_error(self, message):
        self.log_message("‚ùå", "ERROR", message)
    
    def log_step(self, message):
        self.log_message("üîÑ", "STEP", message)
    
    def confirm(self, question, default="n"):
        """–ó–∞–ø—Ä–æ—Å–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ"""
        if self.force or self.dry_run:
            return True
        
        prompt = f"‚ùì {question} [{'Y/n' if default == 'y' else 'y/N'}]: "
        
        try:
            response = input(prompt).strip().lower()
            if not response:
                response = default
            return response == 'y'
        except (KeyboardInterrupt, EOFError):
            print()
            return False
    
    def run_command(self, cmd, shell=False, check=True):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É"""
        if self.dry_run:
            self.log_info(f"[DRY-RUN] Would run: {' '.join(cmd) if isinstance(cmd, list) else cmd}")
            return True
        
        try:
            if shell:
                subprocess.run(cmd, shell=True, check=check, cwd=self.script_dir)
            else:
                subprocess.run(cmd, check=check, cwd=self.script_dir)
            return True
        except subprocess.CalledProcessError as e:
            self.log_error(f"–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–≤–∞–ª–µ–Ω–∞: {e}")
            return False
    
    def check_environment(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        self.log_step("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Python
        python_version = sys.version.split()[0]
        self.log_success(f"Python —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {python_version}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø –ë–î
        if self.db_type == 'postgresql':
            self.log_success(f"–¢–∏–ø –ë–î: PostgreSQL (Supabase)")
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ psql (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            try:
                result = subprocess.run(
                    ["psql", "--version"],
                    capture_output=True,
                    text=True,
                    check=True
                )
                self.log_success(f"psql —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {result.stdout.strip()}")
            except (subprocess.CalledProcessError, FileNotFoundError):
                self.log_info("psql –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ)")
        elif self.db_type == 'sqlite':
            self.log_success(f"–¢–∏–ø –ë–î: SQLite")
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ sqlite3
            try:
                result = subprocess.run(
                    ["sqlite3", "--version"],
                    capture_output=True,
                    text=True,
                    check=True
                )
                self.log_success(f"sqlite3 —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {result.stdout.strip()}")
            except (subprocess.CalledProcessError, FileNotFoundError):
                self.log_warning("sqlite3 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–æ–∫)")
        else:
            self.log_warning(f"–¢–∏–ø –ë–î –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ .env)")
        
        print()
    
    def check_files(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        self.log_step("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤")
        print()
        
        required_files = [
            "migrate_to_many_to_many.py",
            "models.py",
            "database.py",
        ]
        
        all_present = True
        for file in required_files:
            file_path = self.script_dir / file
            if file_path.exists():
                self.log_success(f"–ù–∞–π–¥–µ–Ω: {file}")
            else:
                self.log_error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file}")
                all_present = False
        
        print()
        
        if not all_present:
            self.log_error("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã")
            return False
        
        return True
    
    def check_database(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        self.log_step("–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        print()
        
        if self.db_type == 'postgresql':
            self.log_success("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: PostgreSQL (Supabase)")
            self.log_info("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏")
            print()
            return True
        
        elif self.db_type == 'sqlite':
            if not self.db_file or not self.db_file.exists():
                self.log_warning(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {self.db_file}")
                self.log_info("–ú–∏–≥—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞—Å—Ç –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ")
                print()
                return True
            
            self.log_success(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–π–¥–µ–Ω–∞: {self.db_file.name}")
            
            # –†–∞–∑–º–µ—Ä –ë–î
            size_mb = self.db_file.stat().st_size / (1024 * 1024)
            print(f"  üìä –†–∞–∑–º–µ—Ä –ë–î: {size_mb:.2f} MB")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–µ—Å–ª–∏ sqlite3 –¥–æ—Å—Ç—É–ø–µ–Ω)
            try:
                for query, label in [
                    ("SELECT COUNT(*) FROM channels", "–ö–∞–Ω–∞–ª–æ–≤"),
                    ("SELECT COUNT(*) FROM users", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"),
                    ("SELECT COUNT(*) FROM posts", "–ü–æ—Å—Ç–æ–≤"),
                ]:
                    result = subprocess.run(
                        ["sqlite3", str(self.db_file), query],
                        capture_output=True,
                        text=True,
                        check=True
                    )
                    count = result.stdout.strip()
                    print(f"  üìä {label}: {count}")
            except (subprocess.CalledProcessError, FileNotFoundError):
                self.log_warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ë–î")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏
            try:
                result = subprocess.run(
                    ["sqlite3", str(self.db_file), "PRAGMA integrity_check;"],
                    capture_output=True,
                    text=True,
                    check=True
                )
                if result.stdout.strip() == "ok":
                    self.log_success("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—à–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫—É —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏")
                else:
                    self.log_warning(f"–ü—Ä–æ–±–ª–µ–º—ã —Å —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å—é –ë–î: {result.stdout.strip()}")
            except (subprocess.CalledProcessError, FileNotFoundError):
                pass
            
            print()
            return True
        
        else:
            self.log_warning("–¢–∏–ø –ë–î –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω")
            print()
            return True
    
    def stop_services(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤"""
        self.log_step("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤")
        print()
        
        services = [
            "python.*main.py",
            "python.*bot.py",
            "python.*run_system.py",
            # "python.*start_secure_system.py",  # Removed in v3.1.1
        ]
        
        for service in services:
            self.log_info(f"–û—Å—Ç–∞–Ω–æ–≤–∫–∞: {service}")
            self.run_command(f"pkill -f '{service}'", shell=True, check=False)
        
        if not self.dry_run:
            time.sleep(2)
        
        self.log_success("–í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        print()
    
    def create_backup(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
        self.log_step("–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏")
        print()
        
        if self.db_type == 'postgresql':
            self.log_info("PostgreSQL: –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ pg_dump")
            self.log_warning("–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å snapshot –≤ Supabase –ø–µ—Ä–µ–¥ –º–∏–≥—Ä–∞—Ü–∏–µ–π")
            print()
            print("  üíæ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ PostgreSQL (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):")
            print("     pg_dump -h your-host -U postgres -d postgres > backup.sql")
            print("  –∏–ª–∏ —á–µ—Ä–µ–∑ Supabase Dashboard:")
            print("     Settings ‚Üí Database ‚Üí Create backup")
            print()
            
            if not self.force and not self.confirm("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –±—ç–∫–∞–ø–∞?", "y"):
                return False
            
            print()
            return True
        
        elif self.db_type == 'sqlite':
            if not self.db_file or not self.db_file.exists():
                self.log_info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –Ω–µ –Ω—É–∂–Ω–∞")
                print()
                return True
            
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            self.backup_file = self.script_dir / f"{self.db_file.name}.backup_{timestamp}"
            
            if self.dry_run:
                self.log_info(f"[DRY-RUN] Would create backup: {self.backup_file.name}")
                print()
                return True
            
            try:
                shutil.copy2(self.db_file, self.backup_file)
                self.log_success(f"–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {self.backup_file.name}")
                print()
                print(f"  üíæ –î–ª—è –æ—Ç–∫–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:")
                print(f"     cp {self.backup_file.name} {self.db_file.name}")
                print()
                return True
            except Exception as e:
                self.log_error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é: {e}")
                
                if not self.confirm("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏?", "n"):
                    return False
                
                print()
                return True
        
        else:
            self.log_warning("–¢–∏–ø –ë–î –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è")
            print()
            return True
    
    def run_migration(self):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏"""
        self.log_step("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        print()
        
        self.log_info("–ó–∞–ø—É—Å–∫ migrate_to_many_to_many.py...")
        print()
        print("‚îÄ" * 64)
        
        migration_script = self.script_dir / "migrate_to_many_to_many.py"
        success = self.run_command([sys.executable, str(migration_script)])
        
        print("‚îÄ" * 64)
        print()
        
        if not success:
            self.log_error("–ú–ò–ì–†–ê–¶–ò–Ø –ü–†–û–í–ê–õ–ï–ù–ê!")
            print()
            print("üîÑ –î–ª—è –æ—Ç–∫–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:")
            if self.backup_file:
                print(f"   cp {self.backup_file.name} {self.db_file.name}")
            else:
                print("   –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ë–î –∏–∑ –≤–∞—à–µ–π —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏")
            print("   python3 run_system.py &")
            print()
            return False
        
        self.log_success("–ú–∏–≥—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        print()
        
        return True
    
    def run_tests(self):
        """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤"""
        if self.skip_tests:
            self.log_info("–¢–µ—Å—Ç—ã –ø—Ä–æ–ø—É—â–µ–Ω—ã (--skip-tests)")
            print()
            return True
        
        self.log_step("–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)")
        print()
        
        if not self.force and not self.confirm("–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã?", "y"):
            self.log_info("–¢–µ—Å—Ç—ã –ø—Ä–æ–ø—É—â–µ–Ω—ã")
            print()
            return True
        
        print()
        print("‚îÄ" * 64)
        
        test_script = self.script_dir / "test_many_to_many.py"
        success = self.run_command([sys.executable, str(test_script)], check=False)
        
        print("‚îÄ" * 64)
        print()
        
        if success:
            self.log_success("–í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã")
        else:
            self.log_warning("–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã")
            self.log_info("–≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—ã–≤–æ–¥ –≤—ã—à–µ")
        
        print()
        return True
    
    def start_services(self):
        """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤"""
        self.log_step("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤")
        print()
        
        if not self.force and not self.confirm("–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã?", "y"):
            self.log_info("–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤ –ø—Ä–æ–ø—É—â–µ–Ω")
            print()
            print("  –î–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:")
            print("    python3 run_system.py &")
            print("  –∏–ª–∏:")
            print("    python3 main.py & python3 bot.py &")
            print()
            return True
        
        self.log_info("–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤...")
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
        logs_dir = self.script_dir / "logs"
        logs_dir.mkdir(exist_ok=True)
        
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∑–∞–ø—É—Å–∫–∞
        started = False
        
        for script, log_file in [
            ("run_system.py", "system.log"),
            # ("start_secure_system.py", "secure_system.log"),  # Removed in v3.1.1
        ]:
            script_path = self.script_dir / script
            if script_path.exists():
                log_path = logs_dir / log_file
                
                if not self.dry_run:
                    # –ó–∞–ø—É—Å–∫ –≤ —Ñ–æ–Ω–µ
                    with open(log_path, 'a') as log:
                        subprocess.Popen(
                            [sys.executable, str(script_path)],
                            stdout=log,
                            stderr=log,
                            cwd=self.script_dir
                        )
                
                self.log_success(f"–°–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã —á–µ—Ä–µ–∑ {script}")
                started = True
                break
        
        if not started:
            # –ó–∞–ø—É—Å–∫ –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏
            for script, log_file in [
                ("main.py", "main.log"),
                ("bot.py", "bot.log"),
            ]:
                script_path = self.script_dir / script
                if script_path.exists():
                    log_path = logs_dir / log_file
                    
                    if not self.dry_run:
                        with open(log_path, 'a') as log:
                            subprocess.Popen(
                                [sys.executable, str(script_path)],
                                stdout=log,
                                stderr=log,
                                cwd=self.script_dir
                            )
                        time.sleep(2)
            
            self.log_success("–°–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã (main.py + bot.py)")
        
        if not self.dry_run:
            time.sleep(3)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞
            try:
                result = subprocess.run(
                    ["pgrep", "-f", "python.*main.py"],
                    capture_output=True,
                    check=False
                )
                if result.returncode == 0:
                    self.log_success("–°–µ—Ä–≤–∏—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç")
                else:
                    self.log_warning("–°–µ—Ä–≤–∏—Å—ã –º–æ–≥—É—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏")
            except FileNotFoundError:
                self.log_warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤ (pgrep –Ω–µ –Ω–∞–π–¥–µ–Ω)")
        
        print()
        return True
    
    def show_summary(self):
        """–ò—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        self.log_box("‚úÖ –ú–ò–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!", "‚ïê")
        print()
        
        self.log_info("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∏–≥—Ä–∞—Ü–∏–∏")
        print()
        
        # –†–∞–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ë–î
        if self.db_type == 'postgresql':
            print("  üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (—á–µ—Ä–µ–∑ psql):")
            print("     SELECT COUNT(*) FROM channels;")
            print("     SELECT COUNT(*) FROM user_channel;")
            print()
            print("  –∏–ª–∏ —á–µ—Ä–µ–∑ Supabase Dashboard:")
            print("     Table Editor ‚Üí channels")
            print("     Table Editor ‚Üí user_channel")
        elif self.db_type == 'sqlite':
            print("  üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
            print(f"     sqlite3 {self.db_file.name} 'SELECT COUNT(*) FROM channels;'")
            print(f"     sqlite3 {self.db_file.name} 'SELECT COUNT(*) FROM user_channel;'")
        else:
            print("  üìä –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —á–µ—Ä–µ–∑ –≤–∞—à –∫–ª–∏–µ–Ω—Ç –ë–î")
        
        print()
        print("  üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:")
        print("     ‚Ä¢ MANY_TO_MANY_SUMMARY.md   - –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ")
        print("     ‚Ä¢ QUICK_MIGRATION.md        - –±—ã—Å—Ç—Ä–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
        print("     ‚Ä¢ MIGRATION_MANY_TO_MANY.md - –ø–æ–ª–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è")
        print()
        
        if self.backup_file:
            print("  üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è (SQLite):")
            print(f"     {self.backup_file.name}")
            print()
            print("  üîÑ –û—Ç–∫–∞—Ç (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ):")
            print(f"     cp {self.backup_file.name} {self.db_file.name}")
            print("     python3 run_system.py &")
            print()
        elif self.db_type == 'postgresql':
            print("  üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è (PostgreSQL):")
            print("     –°–æ–∑–¥–∞–π—Ç–µ —á–µ—Ä–µ–∑ Supabase Dashboard –∏–ª–∏ pg_dump")
            print()
            print("  üîÑ –û—Ç–∫–∞—Ç —á–µ—Ä–µ–∑ pg_restore –∏–ª–∏ Supabase Dashboard")
            print()
        
        print("‚ïê" * 64)
        print()
        
        self.log_success("–ì–æ—Ç–æ–≤–æ! –í–∞—à–∞ —Å–∏—Å—Ç–µ–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
        print()
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏"""
        print()
        self.log_box("üîÑ –ú–ò–ì–†–ê–¶–ò–Ø –ö MANY-TO-MANY –°–¢–†–£–ö–¢–£–†–ï", "‚ïê")
        print()
        self.log_info("–£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        print()
        
        if self.dry_run:
            self.log_warning("–†–µ–∂–∏–º DRY-RUN: –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ –±—É–¥—É—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")
            print()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        if not self.check_environment():
            return False
        
        if not self.check_files():
            return False
        
        if not self.check_database():
            return False
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        if not self.force and not self.dry_run:
            print("‚ïê" * 64)
            print()
            print("üìã –ß—Ç–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–æ:")
            print("  1. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤")
            print("  2. –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –ë–î")
            print("  3. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã user_channel")
            print("  4. –ü–µ—Ä–µ–Ω–æ—Å –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å—Ç–∞—Ä–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã")
            print("  5. –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∫–∞–Ω–∞–ª–æ–≤")
            print("  6. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–≤—è–∑–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ posts")
            print("  7. –ó–∞–º–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü—ã channels")
            print("  8. –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤")
            if not self.skip_tests:
                print("  9. –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)")
                print("  10. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤")
            else:
                print("  9. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤")
            print()
            print("‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: –æ–±—ã—á–Ω–æ 1-5 —Å–µ–∫—É–Ω–¥")
            print()
            print("‚ïê" * 64)
            print()
            
            if not self.confirm("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é?", "n"):
                self.log_warning("–ú–∏–≥—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                return False
            
            print()
        
        # –†–µ–∂–∏–º dry-run - –≤—ã—Ö–æ–¥
        if self.dry_run:
            self.log_info("–†–µ–∂–∏–º dry-run –∑–∞–≤–µ—Ä—à–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–µ–∑ --dry-run –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è")
            return True
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏
        if not self.stop_services():
            return False
        
        if not self.create_backup():
            return False
        
        if not self.run_migration():
            return False
        
        if not self.run_tests():
            return False
        
        if not self.start_services():
            return False
        
        self.show_summary()
        
        return True


def main():
    parser = argparse.ArgumentParser(
        description="–ú–∏–≥—Ä–∞—Ü–∏—è –∫ Many-to-Many —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –¥–ª—è Telegram Channel Parser"
    )
    parser.add_argument(
        "--force",
        action="store_true",
        help="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
    )
    parser.add_argument(
        "--dry-run",
        action="store_true",
        help="–ü–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–æ, –±–µ–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"
    )
    parser.add_argument(
        "--skip-tests",
        action="store_true",
        help="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã"
    )
    
    args = parser.parse_args()
    
    manager = MigrationManager(
        force=args.force,
        dry_run=args.dry_run,
        skip_tests=args.skip_tests
    )
    
    try:
        success = manager.run()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print()
        manager.log_warning("–ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print()
        manager.log_error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)


if __name__ == "__main__":
    main()

