#!/usr/bin/env python3
"""
Migration: Add Groups Support
Date: 2025-10-13
Description: –î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫—É Telegram –≥—Ä—É–ø–ø —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞–º–∏ –¥–∏–∞–ª–æ–≥–æ–≤
"""
import os
import sys
from datetime import datetime, timezone
import psycopg2
from psycopg2.extras import RealDictCursor

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ path
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../..')))


def get_database_url() -> str:
    """–ü–æ–ª—É—á–∏—Ç—å URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    from dotenv import load_dotenv
    load_dotenv()
    
    url = os.getenv("TELEGRAM_DATABASE_URL")
    
    if not url:
        raise ValueError(
            "TELEGRAM_DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\n"
            "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å: postgresql://postgres:password@db:5432/postgres"
        )
    
    if "sqlite" in url.lower():
        raise ValueError(
            "SQLite –ù–ï –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è!\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ PostgreSQL"
        )
    
    return url


def backup_info():
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—ç–∫–∞–ø–µ"""
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    print(f"\nüì¶ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å backup –ë–î –ø–µ—Ä–µ–¥ –º–∏–≥—Ä–∞—Ü–∏–µ–π")
    print(f"   –ö–æ–º–∞–Ω–¥–∞: docker exec postgres pg_dump -U postgres postgres > backup_{timestamp}.sql")
    print()


def migrate():
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é"""
    database_url = get_database_url()
    
    print("=" * 80)
    print("üöÄ Migration: Add Groups Support")
    print("=" * 80)
    
    backup_info()
    
    response = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é? (yes/no): ")
    if response.lower() != "yes":
        print("‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        return
    
    conn = psycopg2.connect(database_url)
    cursor = conn.cursor(cursor_factory=RealDictCursor)
    
    try:
        print("\nüìã –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é...\n")
        
        # 1. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã groups
        print("1Ô∏è‚É£  –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã 'groups'...")
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS groups (
                id SERIAL PRIMARY KEY,
                group_id BIGINT UNIQUE NOT NULL,
                group_title VARCHAR,
                group_username VARCHAR,
                created_at TIMESTAMP WITH TIME ZONE DEFAULT (NOW() AT TIME ZONE 'UTC')
            );
        """)
        
        # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è groups
        cursor.execute("""
            CREATE INDEX IF NOT EXISTS idx_groups_group_id ON groups(group_id);
            CREATE INDEX IF NOT EXISTS idx_groups_group_username ON groups(group_username);
        """)
        print("   ‚úÖ –¢–∞–±–ª–∏—Ü–∞ 'groups' —Å–æ–∑–¥–∞–Ω–∞")
        
        # 2. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã user_group (many-to-many)
        print("2Ô∏è‚É£  –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã 'user_group'...")
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS user_group (
                user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
                group_id INTEGER NOT NULL REFERENCES groups(id) ON DELETE CASCADE,
                is_active BOOLEAN DEFAULT TRUE,
                mentions_enabled BOOLEAN DEFAULT TRUE,
                created_at TIMESTAMP WITH TIME ZONE DEFAULT (NOW() AT TIME ZONE 'UTC'),
                PRIMARY KEY (user_id, group_id)
            );
        """)
        
        # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è user_group
        cursor.execute("""
            CREATE INDEX IF NOT EXISTS idx_user_group_user_id ON user_group(user_id);
            CREATE INDEX IF NOT EXISTS idx_user_group_group_id ON user_group(group_id);
        """)
        print("   ‚úÖ –¢–∞–±–ª–∏—Ü–∞ 'user_group' —Å–æ–∑–¥–∞–Ω–∞")
        
        # 3. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã group_mentions
        print("3Ô∏è‚É£  –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã 'group_mentions'...")
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS group_mentions (
                id SERIAL PRIMARY KEY,
                user_id INTEGER NOT NULL REFERENCES users(id),
                group_id INTEGER NOT NULL REFERENCES groups(id),
                message_id BIGINT NOT NULL,
                mentioned_at TIMESTAMP WITH TIME ZONE DEFAULT (NOW() AT TIME ZONE 'UTC'),
                context TEXT,
                reason TEXT,
                urgency VARCHAR,
                notified BOOLEAN DEFAULT FALSE,
                notified_at TIMESTAMP WITH TIME ZONE,
                CONSTRAINT uix_user_group_message UNIQUE (user_id, group_id, message_id)
            );
        """)
        
        # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è group_mentions
        cursor.execute("""
            CREATE INDEX IF NOT EXISTS idx_group_mentions_user_id ON group_mentions(user_id);
            CREATE INDEX IF NOT EXISTS idx_group_mentions_group_id ON group_mentions(group_id);
            CREATE INDEX IF NOT EXISTS idx_group_mentions_mentioned_at ON group_mentions(mentioned_at);
        """)
        print("   ‚úÖ –¢–∞–±–ª–∏—Ü–∞ 'group_mentions' —Å–æ–∑–¥–∞–Ω–∞")
        
        # 4. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã group_settings
        print("4Ô∏è‚É£  –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã 'group_settings'...")
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS group_settings (
                id SERIAL PRIMARY KEY,
                user_id INTEGER UNIQUE NOT NULL REFERENCES users(id),
                mentions_enabled BOOLEAN DEFAULT TRUE,
                mention_context_messages INTEGER DEFAULT 5,
                digest_default_hours INTEGER DEFAULT 24,
                digest_max_messages INTEGER DEFAULT 200
            );
        """)
        
        # –ò–Ω–¥–µ–∫—Å –¥–ª—è group_settings
        cursor.execute("""
            CREATE INDEX IF NOT EXISTS idx_group_settings_user_id ON group_settings(user_id);
        """)
        print("   ‚úÖ –¢–∞–±–ª–∏—Ü–∞ 'group_settings' —Å–æ–∑–¥–∞–Ω–∞")
        
        # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
        print("\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü...")
        cursor.execute("""
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public' 
            AND table_name IN ('groups', 'user_group', 'group_mentions', 'group_settings')
            ORDER BY table_name;
        """)
        
        tables = cursor.fetchall()
        print(f"   –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(tables)}")
        for table in tables:
            print(f"     ‚úì {table['table_name']}")
        
        # Commit –∏–∑–º–µ–Ω–µ–Ω–∏–π
        conn.commit()
        
        print("\n" + "=" * 80)
        print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print("=" * 80)
        print("\nüìù –ß—Ç–æ –¥–∞–ª—å—à–µ:")
        print("   1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ telethon –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã: docker restart telethon telethon-bot")
        print("   2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: docker logs telethon -f")
        print("   3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã: /add_group, /my_groups")
        print()
        
    except Exception as e:
        conn.rollback()
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        print("   –ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–∫–∞—á–µ–Ω—ã (rollback)")
        raise
        
    finally:
        cursor.close()
        conn.close()


def rollback():
    """–û—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)"""
    database_url = get_database_url()
    
    print("=" * 80)
    print("‚ö†Ô∏è  ROLLBACK: Remove Groups Support")
    print("=" * 80)
    print("\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ —É–¥–∞–ª–∏—Ç –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –≥—Ä—É–ø–ø –∏ –¥–∞–Ω–Ω—ã–µ!")
    print()
    
    response = input("–í—ã —É–≤–µ—Ä–µ–Ω—ã? –í–≤–µ–¥–∏—Ç–µ 'DELETE ALL GROUPS' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ")
    if response != "DELETE ALL GROUPS":
        print("‚ùå Rollback –æ—Ç–º–µ–Ω–µ–Ω")
        return
    
    conn = psycopg2.connect(database_url)
    cursor = conn.cursor()
    
    try:
        print("\nüóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü...")
        
        cursor.execute("DROP TABLE IF EXISTS group_mentions CASCADE;")
        print("   ‚úì group_mentions —É–¥–∞–ª–µ–Ω–∞")
        
        cursor.execute("DROP TABLE IF EXISTS group_settings CASCADE;")
        print("   ‚úì group_settings —É–¥–∞–ª–µ–Ω–∞")
        
        cursor.execute("DROP TABLE IF EXISTS user_group CASCADE;")
        print("   ‚úì user_group —É–¥–∞–ª–µ–Ω–∞")
        
        cursor.execute("DROP TABLE IF EXISTS groups CASCADE;")
        print("   ‚úì groups —É–¥–∞–ª–µ–Ω–∞")
        
        conn.commit()
        print("\n‚úÖ Rollback –∑–∞–≤–µ—Ä—à–µ–Ω")
        
    except Exception as e:
        conn.rollback()
        print(f"\n‚ùå –û—à–∏–±–∫–∞ rollback: {e}")
        raise
        
    finally:
        cursor.close()
        conn.close()


if __name__ == "__main__":
    import argparse
    
    parser = argparse.ArgumentParser(description='Migration: Add Groups Support')
    parser.add_argument('action', choices=['migrate', 'rollback'], 
                       help='–î–µ–π—Å—Ç–≤–∏–µ: migrate (–ø—Ä–∏–º–µ–Ω–∏—Ç—å) –∏–ª–∏ rollback (–æ—Ç–∫–∞—Ç–∏—Ç—å)')
    
    args = parser.parse_args()
    
    if args.action == 'migrate':
        migrate()
    elif args.action == 'rollback':
        rollback()

