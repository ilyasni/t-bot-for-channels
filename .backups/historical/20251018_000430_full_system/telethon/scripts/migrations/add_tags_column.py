#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—è tags –≤ —Ç–∞–±–ª–∏—Ü—É posts
–î–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–ª–æ–Ω–∫—É tags —Ç–∏–ø–∞ JSON –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –º–∞—Å—Å–∏–≤–∞ —Ç–µ–≥–æ–≤
"""

import logging
import os
import sys
from sqlalchemy import text, inspect
from sqlalchemy.exc import OperationalError

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from database import engine, SessionLocal
from models import Base, Post
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


def check_column_exists(table_name, column_name):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ"""
    try:
        with engine.connect() as conn:
            inspector = inspect(engine)
            columns = [col['name'] for col in inspector.get_columns(table_name)]
            return column_name in columns
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–ª–æ–Ω–∫–∏ {column_name}: {str(e)}")
        return False


def get_database_type():
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (SQLite –∏–ª–∏ PostgreSQL)"""
    db_url = os.getenv("DATABASE_URL", "sqlite:///./telethon_bot.db")
    if db_url.startswith("postgresql://"):
        return "postgresql"
    else:
        return "sqlite"


def add_tags_column():
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–ª–æ–Ω–∫—É tags –≤ —Ç–∞–±–ª–∏—Ü—É posts"""
    try:
        if check_column_exists("posts", "tags"):
            logger.info("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ tags —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return True
        
        db_type = get_database_type()
        logger.info(f"üìä –¢–∏–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {db_type}")
        
        with engine.connect() as conn:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è JSON
            if db_type == "postgresql":
                # PostgreSQL –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –Ω–∞—Ç–∏–≤–Ω—ã–π —Ç–∏–ø JSON
                column_type = "JSON"
            else:
                # SQLite —Ö—Ä–∞–Ω–∏—Ç JSON –∫–∞–∫ TEXT
                column_type = "TEXT"
            
            sql = f"ALTER TABLE posts ADD COLUMN tags {column_type}"
            
            logger.info(f"üîÑ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ tags —Å —Ç–∏–ø–æ–º {column_type}...")
            conn.execute(text(sql))
            conn.commit()
            
            logger.info("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ tags —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞")
            return True
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏ tags: {str(e)}")
        return False


def verify_migration():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏"""
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–ª–æ–Ω–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if not check_column_exists("posts", "tags"):
            logger.error("‚ùå –ö–æ–ª–æ–Ω–∫–∞ tags –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏")
            return False
        
        db = SessionLocal()
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å –Ω–æ–≤–æ–π –∫–æ–ª–æ–Ω–∫–æ–π
        post = db.query(Post).first()
        if post:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—è
            _ = post.tags
            logger.info("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ - –ø–æ–ª–µ tags –¥–æ—Å—Ç—É–ø–Ω–æ")
        else:
            logger.info("‚ÑπÔ∏è –í –±–∞–∑–µ –Ω–µ—Ç –ø–æ—Å—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
        
        db.close()
        return True
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: {str(e)}")
        return False


def show_migration_info():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∏–≥—Ä–∞—Ü–∏–∏"""
    logger.info("=" * 70)
    logger.info("üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∏–≥—Ä–∞—Ü–∏–∏")
    logger.info("=" * 70)
    
    try:
        db = SessionLocal()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ—Å—Ç–∞–º
        total_posts = db.query(Post).count()
        logger.info(f"üìù –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤ –≤ –±–∞–∑–µ: {total_posts}")
        
        if check_column_exists("posts", "tags"):
            posts_with_tags = db.query(Post).filter(Post.tags != None).count()
            posts_without_tags = db.query(Post).filter(Post.tags == None).count()
            
            logger.info(f"‚úÖ –ü–æ—Å—Ç–æ–≤ —Å —Ç–µ–≥–∞–º–∏: {posts_with_tags}")
            logger.info(f"üì≠ –ü–æ—Å—Ç–æ–≤ –±–µ–∑ —Ç–µ–≥–æ–≤: {posts_without_tags}")
        
        db.close()
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
    
    logger.info("=" * 70)


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è")
    logger.info("=" * 70)
    
    try:
        # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
        logger.info("üìä –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        try:
            with engine.connect() as conn:
                conn.execute(text("SELECT 1"))
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {str(e)}")
            return False
        
        # –®–∞–≥ 2: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ tags
        logger.info("üìä –®–∞–≥ 2: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ tags...")
        if not add_tags_column():
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–ª–æ–Ω–∫—É tags")
            return False
        
        # –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏
        logger.info("üîç –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏...")
        if not verify_migration():
            logger.error("‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ —É–¥–∞–ª–∞—Å—å")
            return False
        
        # –®–∞–≥ 4: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        logger.info("üìä –®–∞–≥ 4: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞...")
        show_migration_info()
        
        logger.info("=" * 70)
        logger.info("üéâ –ú–∏–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        logger.info("‚úÖ –ü–æ–ª–µ tags –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü—É posts")
        logger.info("üè∑Ô∏è –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è")
        logger.info("")
        logger.info("üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        logger.info("  1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ .env —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω OPENROUTER_API_KEY")
        logger.info("  2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install httpx")
        logger.info("  3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É")
        logger.info("  4. –¢–µ–≥–∏ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {str(e)}")
        return False


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)

