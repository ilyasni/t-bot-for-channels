#!/usr/bin/env python3
"""
Migration: Add Voice Transcription Support
Date: 2025-10-13
Description: –î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—è –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
"""
import os
import sys
from datetime import datetime
import psycopg2

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../..')))

from dotenv import load_dotenv
load_dotenv()


def get_database_url():
    """–ü–æ–ª—É—á–∏—Ç—å DATABASE_URL –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    database_url = os.getenv("TELEGRAM_DATABASE_URL")
    
    if not database_url:
        raise ValueError(
            "TELEGRAM_DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\n"
            "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å: postgresql://postgres:password@db:5432/postgres"
        )
    
    if "sqlite" in database_url.lower():
        raise ValueError(
            "SQLite –ù–ï –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è!\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ PostgreSQL"
        )
    
    return database_url


def backup_database():
    """–°–æ–∑–¥–∞—Ç—å backup –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –º–∏–≥—Ä–∞—Ü–∏–µ–π"""
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    print(f"üì¶ Backup database: {timestamp}")
    print("   –î–ª—è production –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: docker exec supabase-db pg_dump ...")
    print("   –ü—Ä–æ–ø—É—Å–∫–∞–µ–º backup –¥–ª—è development...")


def migrate():
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é"""
    database_url = get_database_url()
    
    print("üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    conn = psycopg2.connect(database_url)
    cursor = conn.cursor()
    
    try:
        print("üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π –¥–ª—è Voice Transcription...")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è voice_queries_today –∏ voice_queries_reset_at
        cursor.execute("""
            ALTER TABLE users
            ADD COLUMN IF NOT EXISTS voice_queries_today INTEGER DEFAULT 0,
            ADD COLUMN IF NOT EXISTS voice_queries_reset_at TIMESTAMP WITH TIME ZONE
        """)
        
        conn.commit()
        print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print("   –î–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–ª—è:")
        print("   ‚Ä¢ users.voice_queries_today (INTEGER)")
        print("   ‚Ä¢ users.voice_queries_reset_at (TIMESTAMP WITH TIME ZONE)")
        
    except Exception as e:
        conn.rollback()
        print(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        raise
    finally:
        cursor.close()
        conn.close()


def verify_migration():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏"""
    database_url = get_database_url()
    conn = psycopg2.connect(database_url)
    cursor = conn.cursor()
    
    try:
        print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π
        cursor.execute("""
            SELECT column_name, data_type
            FROM information_schema.columns
            WHERE table_name = 'users'
            AND column_name IN ('voice_queries_today', 'voice_queries_reset_at')
            ORDER BY column_name
        """)
        
        columns = cursor.fetchall()
        
        if len(columns) == 2:
            print("‚úÖ –í—Å–µ –ø–æ–ª—è —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ:")
            for col_name, col_type in columns:
                print(f"   ‚Ä¢ {col_name}: {col_type}")
        else:
            print(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {len(columns)} –∏–∑ 2 –ø–æ–ª–µ–π")
            for col_name, col_type in columns:
                print(f"   ‚Ä¢ {col_name}: {col_type}")
        
    finally:
        cursor.close()
        conn.close()


if __name__ == "__main__":
    print("=" * 60)
    print("üöÄ Migration: Add Voice Transcription Support")
    print("=" * 60)
    print()
    
    try:
        backup_database()
        migrate()
        verify_migration()
        
        print("\n" + "=" * 60)
        print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print("=" * 60)
        print()
        print("üìù Next steps:")
        print("1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã:")
        print("   docker-compose restart telethon telethon-bot")
        print()
        print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥:")
        print("   ‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ /ask –≤ –±–æ—Ç")
        print("   ‚Ä¢ –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        print()
        
    except Exception as e:
        print("\n" + "=" * 60)
        print("‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –ù–ï –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print("=" * 60)
        print(f"\n–û—à–∏–±–∫–∞: {e}")
        print("\nüí° Troubleshooting:")
        print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ TELEGRAM_DATABASE_URL –≤ .env")
        print("2. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ PostgreSQL –∑–∞–ø—É—â–µ–Ω:")
        print("   docker ps | grep postgres")
        print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:")
        print("   docker exec supabase-db psql -U postgres -d postgres -c 'SELECT 1'")
        sys.exit(1)

