#!/usr/bin/env python3
"""
–ú–∏–≥—Ä–∞—Ü–∏—è: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è enriched_content –≤ —Ç–∞–±–ª–∏—Ü—É posts

–≠—Ç–æ –ø–æ–ª–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±–æ–≥–∞—â–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ—Å—Ç–æ–≤:
- –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
- –ö–æ–Ω—Ç–µ–Ω—Ç –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π –∏–∑ —Å—Å—ã–ª–æ–∫ —á–µ—Ä–µ–∑ Crawl4AI

–≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç RAG-—Å–∏—Å—Ç–µ–º–µ –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞—Ç—å –Ω–µ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞,
–Ω–æ –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü.

–î–∞—Ç–∞: 11 –æ–∫—Ç—è–±—Ä—è 2025
–í–µ—Ä—Å–∏—è: 2.2.1
"""

import sys
import os
from datetime import datetime
import shutil

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ path
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../..')))

from sqlalchemy import create_engine, text, inspect
from dotenv import load_dotenv

load_dotenv()

def get_database_url():
    """–ü–æ–ª—É—á–∏—Ç—å URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    return os.getenv("DATABASE_URL", "sqlite:///./data/telethon_bot.db")

def backup_database():
    """–°–æ–∑–¥–∞—Ç—å backup –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –º–∏–≥—Ä–∞—Ü–∏–µ–π"""
    db_url = get_database_url()
    
    # Backup —Ç–æ–ª—å–∫–æ –¥–ª—è SQLite
    if db_url.startswith('sqlite'):
        db_path = db_url.replace('sqlite:///', '')
        if os.path.exists(db_path):
            try:
                timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
                backup_path = f"{db_path}.backup_{timestamp}"
                shutil.copy(db_path, backup_path)
                print(f"‚úÖ Backup —Å–æ–∑–¥–∞–Ω: {backup_path}")
                return backup_path
            except PermissionError:
                print("‚ö†Ô∏è –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è backup (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –≤ Docker)")
                print("üí° Backup –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ Docker volumes")
                return None
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å backup: {e}")
                print("üí° –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—Å—è –±–µ–∑ backup")
                return None
    else:
        print("‚ö†Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π backup –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è SQLite")
        print("üí° –î–ª—è PostgreSQL —Å–æ–∑–¥–∞–π—Ç–µ backup –≤—Ä—É—á–Ω—É—é:")
        print("   docker exec supabase-db pg_dump -U postgres postgres > backup.sql")
    
    return None

def check_column_exists(engine, table_name: str, column_name: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ"""
    inspector = inspect(engine)
    columns = [col['name'] for col in inspector.get_columns(table_name)]
    return column_name in columns

def add_enriched_content_column(engine):
    """–î–æ–±–∞–≤–∏—Ç—å —Å—Ç–æ–ª–±–µ—Ü enriched_content –≤ —Ç–∞–±–ª–∏—Ü—É posts"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞
    if check_column_exists(engine, 'posts', 'enriched_content'):
        print("‚úÖ –°—Ç–æ–ª–±–µ—Ü 'enriched_content' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return True
    
    print("üîÑ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ enriched_content...")
    
    try:
        with engine.connect() as conn:
            # –î–ª—è SQLite –∏ PostgreSQL —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π
            conn.execute(text(
                "ALTER TABLE posts ADD COLUMN enriched_content TEXT"
            ))
            conn.commit()
        
        print("‚úÖ –°—Ç–æ–ª–±–µ—Ü enriched_content —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç–æ–ª–±—Ü–∞: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏"""
    print("=" * 60)
    print("–ú–∏–≥—Ä–∞—Ü–∏—è: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è enriched_content")
    print("=" * 60)
    
    # –ü–æ–ª—É—á–∞–µ–º URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db_url = get_database_url()
    print(f"üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {db_url.split('@')[0] if '@' in db_url else db_url.split('///')[0]}")
    
    # –°–æ–∑–¥–∞–µ–º backup
    backup_path = backup_database()
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    response = input("\n‚ö†Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é? (yes/no): ")
    if response.lower() not in ['yes', 'y', '–¥–∞', '–¥']:
        print("‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        return
    
    # –°–æ–∑–¥–∞–µ–º engine
    engine = create_engine(db_url)
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
    print("\nüöÄ –ù–∞—á–∞–ª–æ –º–∏–≥—Ä–∞—Ü–∏–∏...")
    
    success = add_enriched_content_column(engine)
    
    if success:
        print("\n" + "=" * 60)
        print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print("=" * 60)
        print("\nüí° –¢–µ–ø–µ—Ä—å:")
        print("1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ CRAWL4AI_ENABLED=true –≤ .env")
        print("2. –ù–æ–≤—ã–µ –ø–æ—Å—Ç—ã —Å —Å—Å—ã–ª–∫–∞–º–∏ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–æ–≥–∞—â–∞—Ç—å—Å—è")
        print("3. RAG-—Å–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞—Ç—å –æ–±–æ–≥–∞—â–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç")
        if backup_path:
            print(f"\nüì¶ Backup —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {backup_path}")
    else:
        print("\n" + "=" * 60)
        print("‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")
        print("=" * 60)
        if backup_path:
            print(f"\nüîÑ –î–ª—è –æ—Ç–∫–∞—Ç–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ backup: {backup_path}")
            print("   cp {backup_path} {db_url.replace('sqlite:///', '')}")

if __name__ == "__main__":
    main()

