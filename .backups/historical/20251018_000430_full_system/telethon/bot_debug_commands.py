"""
Debug –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
"""

import asyncio
import logging
import os
from datetime import datetime, timezone
from telegram import Update
from telegram.ext import ContextTypes
from telethon import TelegramClient
from telethon.errors import FloodWaitError, PhoneNumberBannedError, PhoneNumberInvalidError
from telethon.sessions import StringSession

from database import SessionLocal
from models import User
from shared_auth_manager import shared_auth_manager

logger = logging.getLogger(__name__)


async def debug_test_phone_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram
    –ö–æ–º–∞–Ω–¥–∞: /debug_test_phone +79991234567
    """
    user = update.effective_user
    args = context.args
    
    if not args:
        await update.message.reply_text(
            "üì± **–¢–µ—Å—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞**\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/debug_test_phone +79991234567`\n\n"
            "–ü—Ä–æ–≤–µ—Ä—è–µ—Ç:\n"
            "‚Ä¢ –ú–æ–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å SMS –∫–æ–¥ –Ω–∞ –Ω–æ–º–µ—Ä\n"
            "‚Ä¢ –ù–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –Ω–æ–º–µ—Ä Telegram'–æ–º\n"
            "‚Ä¢ FloodWait –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è\n\n"
            "‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ:** –û—Ç–ø—Ä–∞–≤–∏—Ç —Ä–µ–∞–ª—å–Ω—ã–π SMS –∫–æ–¥!",
            parse_mode='HTML'
        )
        return
    
    phone = args[0]
    
    await update.message.reply_text("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞...\n–≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.")
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∞
    test_client = None
    
    try:
        master_api_id = os.getenv("MASTER_API_ID")
        master_api_hash = os.getenv("MASTER_API_HASH")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º StringSession (–≤ –ø–∞–º—è—Ç–∏, –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è)
        test_client = TelegramClient(
            StringSession(),
            int(master_api_id),
            master_api_hash,
            connection_retries=2,
            timeout=15
        )
        
        await test_client.connect()
        
        if not test_client.is_connected():
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram")
            return
        
        # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥
        logger.info(f"üß™ –¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –Ω–∞ {phone} –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏")
        sent_code = await test_client.send_code_request(phone)
        
        # –£—Å–ø–µ—à–Ω–æ!
        text = f"‚úÖ **–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ—Å—Ç—É–ø–µ–Ω!**\n\n"
        text += f"üì± –ù–æ–º–µ—Ä: `{phone}`\n"
        text += f"üì§ SMS –∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω\n"
        text += f"üîë phone_code_hash: `{sent_code.phone_code_hash[:15]}...`\n\n"
        text += f"**–í—ã–≤–æ–¥:**\n"
        text += f"‚Ä¢ –ù–æ–º–µ—Ä –ù–ï –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω Telegram ‚úÖ\n"
        text += f"‚Ä¢ –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ ‚úÖ\n\n"
        text += f"üí° –ï—Å–ª–∏ –ø—Ä–∏ `/login` –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –æ—à–∏–±–∫–∞ '–∫–æ–¥ –∏—Å—Ç–µ–∫' - –ø—Ä–æ–±–ª–µ–º–∞ –≤ –¥—Ä—É–≥–æ–º:\n"
        text += f"‚Ä¢ –ù–æ–º–µ—Ä —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –≤ –¥—Ä—É–≥–∏—Ö –∫–ª–∏–µ–Ω—Ç–∞—Ö\n"
        text += f"‚Ä¢ Telegram —Å—á–∏—Ç–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π\n"
        text += f"‚Ä¢ –ù—É–∂–Ω–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å 30-60 –º–∏–Ω—É—Ç –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏"
        
        await update.message.reply_text(text, parse_mode='HTML')
        
    except PhoneNumberBannedError:
        await update.message.reply_text(
            f"‚ùå **–ù–æ–º–µ—Ä –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω Telegram!**\n\n"
            f"üì± –ù–æ–º–µ—Ä: `{phone}`\n"
            f"üö´ –°—Ç–∞—Ç—É—Å: BANNED\n\n"
            f"**–ü—Ä–∏—á–∏–Ω–∞:**\n"
            f"‚Ä¢ –ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª Telegram\n"
            f"‚Ä¢ –°–ø–∞–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å\n"
            f"‚Ä¢ –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∂–∞–ª–æ–±—ã\n\n"
            f"**–†–µ—à–µ–Ω–∏–µ:**\n"
            f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n"
            f"‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É Telegram",
            parse_mode='HTML'
        )
    
    except PhoneNumberInvalidError:
        await update.message.reply_text(
            f"‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞!**\n\n"
            f"üì± –ù–æ–º–µ—Ä: `{phone}`\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:\n"
            f"‚Ä¢ `+79991234567` (–†–æ—Å—Å–∏—è)\n"
            f"‚Ä¢ `+380991234567` (–£–∫—Ä–∞–∏–Ω–∞)\n"
            f"‚Ä¢ `+12025551234` (–°–®–ê)",
            parse_mark='Markdown'
        )
    
    except FloodWaitError as e:
        await update.message.reply_text(
            f"‚è≥ **FloodWait –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ**\n\n"
            f"üì± –ù–æ–º–µ—Ä: `{phone}`\n"
            f"‚è∞ –ü–æ–¥–æ–∂–¥–∏—Ç–µ: {e.seconds} —Å–µ–∫—É–Ω–¥\n\n"
            f"**–ü—Ä–∏—á–∏–Ω–∞:**\n"
            f"‚Ä¢ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ SMS –∫–æ–¥–æ–≤ –∑–∞ –∫–æ—Ä–æ—Ç–∫–∏–π –ø–µ—Ä–∏–æ–¥\n"
            f"‚Ä¢ Telegram –≤—Ä–µ–º–µ–Ω–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏–ª –æ—Ç–ø—Ä–∞–≤–∫—É\n\n"
            f"**–†–µ—à–µ–Ω–∏–µ:**\n"
            f"‚Ä¢ –ü–æ–¥–æ–∂–¥–∏—Ç–µ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è\n"
            f"‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞",
            parse_mode='HTML'
        )
    
    except Exception as e:
        error_type = type(e).__name__
        error_msg = str(e)
        
        await update.message.reply_text(
            f"‚ö†Ô∏è **–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–æ–º–µ—Ä–∞**\n\n"
            f"üì± –ù–æ–º–µ—Ä: `{phone}`\n"
            f"‚ùå –¢–∏–ø: `{error_type}`\n"
            f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ: {error_msg}\n\n"
            f"–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç—É –æ—à–∏–±–∫—É –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É",
            parse_mode='HTML'
        )
        
        logger.error(f"Debug test phone error for {phone}: {error_type} - {error_msg}")
    
    finally:
        if test_client:
            await test_client.disconnect()
            logger.info("üîå –¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω")


async def debug_check_sessions_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ Telegram (—Ç–µ—Ä–º–∏–Ω–∞–ª –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π –∫—Ä–æ–º–µ —Ç–µ–∫—É—â–µ–π)
    –ö–æ–º–∞–Ω–¥–∞: /debug_check_sessions
    """
    user = update.effective_user
    
    text = f"üîç **–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π**\n\n"
    text += f"–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–∫–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π —É –≤–∞—à–µ–≥–æ –Ω–æ–º–µ—Ä–∞.\n\n"
    text += f"**–î–ª—è —Ç–µ—Ä–º–∏–Ω–∞—Ü–∏–∏ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π:**\n"
    text += f"1. –û—Ç–∫—Ä–æ–π—Ç–µ Telegram Desktop/Mobile\n"
    text += f"2. Settings ‚Üí Privacy and Security ‚Üí Active Sessions\n"
    text += f"3. Terminate all other sessions\n\n"
    text += f"–ü–æ—Å–ª–µ —Ç–µ—Ä–º–∏–Ω–∞—Ü–∏–∏ –ø–æ–¥–æ–∂–¥–∏—Ç–µ 5-10 –º–∏–Ω—É—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ `/login` —Å–Ω–æ–≤–∞."
    
    await update.message.reply_text(text, parse_mode='HTML')


async def debug_force_auth_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    [ADMIN ONLY] –§–æ—Ä—Å–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ session —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    –ö–æ–º–∞–Ω–¥–∞: /debug_force_auth USER_ID –∏–ª–∏ /debug_force_auth TELEGRAM_ID
    """
    user = update.effective_user
    args = context.args
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∞
    db = SessionLocal()
    try:
        admin_user = db.query(User).filter(User.telegram_id == user.id).first()
        if not admin_user or not admin_user.is_admin():
            await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
            return
    finally:
        db.close()
    
    if not args:
        await update.message.reply_text(
            "üîß **Force Auth - Admin Tool**\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/debug_force_auth USER_ID`\n"
            "–∏–ª–∏: `/debug_force_auth TELEGRAM_ID`\n\n"
            "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏:\n"
            "‚Ä¢ Session —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n"
            "‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≤–µ—Ä—à–∏–ª QR auth –Ω–æ –ë–î –Ω–µ –æ–±–Ω–æ–≤–∏–ª–∞—Å—å\n"
            "‚Ä¢ –ù—É–∂–Ω–æ –≤—Ä—É—á–Ω—É—é –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é",
            parse_mode='HTML'
        )
        return
    
    target_id = args[0]
    
    await update.message.reply_text(f"üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id}...")
    
    db = SessionLocal()
    try:
        # –ò—â–µ–º –ø–æ ID –∏–ª–∏ telegram_id
        if target_id.isdigit():
            target_user = db.query(User).filter(
                (User.id == int(target_id)) | (User.telegram_id == int(target_id))
            ).first()
        else:
            await update.message.reply_text("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            return
        
        if not target_user:
            await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ session —Ñ–∞–π–ª–∞
        session_file = f"/app/sessions/user_{target_user.telegram_id}.session"
        
        if not os.path.exists(session_file):
            await update.message.reply_text(
                f"‚ùå Session —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!\n\n"
                f"üë§ User ID: {target_user.id}\n"
                f"üì± Telegram ID: {target_user.telegram_id}\n"
                f"üìÇ –û–∂–∏–¥–∞–µ–º—ã–π —Ñ–∞–π–ª: `user_{target_user.telegram_id}.session`\n\n"
                f"**–†–µ—à–µ–Ω–∏–µ:**\n"
                f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –∑–∞–≤–µ—Ä—à–∏—Ç—å QR –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é\n"
                f"‚Ä¢ –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–∞—Ä—ã–π `/login` —Å SMS",
                parse_mode='HTML'
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–µ—Å—Å–∏—è –≤–∞–ª–∏–¥–Ω–∞
        try:
            test_client = await shared_auth_manager.get_client(target_user.telegram_id)
            if test_client and await test_client.is_user_authorized():
                # –°–µ—Å—Å–∏—è –≤–∞–ª–∏–¥–Ω–∞! –û–±–Ω–æ–≤–ª—è–µ–º –ë–î
                target_user.is_authenticated = True
                target_user.failed_auth_attempts = 0
                target_user.auth_error = None
                target_user.last_auth_check = datetime.now(timezone.utc)
                
                db.commit()
                
                await update.message.reply_text(
                    f"‚úÖ **–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!**\n\n"
                    f"üë§ User ID: {target_user.id}\n"
                    f"üì± Telegram ID: {target_user.telegram_id}\n"
                    f"üíé –ü–æ–¥–ø–∏—Å–∫–∞: {target_user.subscription_type}\n"
                    f"üìä –ö–∞–Ω–∞–ª–æ–≤: {len(target_user.channels)}/{target_user.max_channels}\n"
                    f"‚úÖ is_authenticated: TRUE\n\n"
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `/my_channels` –∏ –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã.",
                    parse_mode='HTML'
                )
                
                logger.info(f"‚úÖ ADMIN {user.id} force activated auth for user {target_user.id}")
                
            else:
                await update.message.reply_text(
                    f"‚ö†Ô∏è **Session —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ –Ω–µ –≤–∞–ª–∏–¥–µ–Ω**\n\n"
                    f"üë§ User ID: {target_user.id}\n"
                    f"üì± Telegram ID: {target_user.telegram_id}\n\n"
                    f"**–ü—Ä–∏—á–∏–Ω—ã:**\n"
                    f"‚Ä¢ Session —Ñ–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω\n"
                    f"‚Ä¢ –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞\n"
                    f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–ª–æ–≥–∏–Ω–∏–ª—Å—è –∏–∑ Telegram\n\n"
                    f"**–†–µ—à–µ–Ω–∏–µ:**\n"
                    f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–π—Ç–∏ QR –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ",
                    parse_mode='HTML'
                )
        
        except Exception as e:
            await update.message.reply_text(
                f"‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Å—Å–∏–∏**\n\n"
                f"üìù {str(e)}\n\n"
                f"–í–æ–∑–º–æ–∂–Ω–æ session —Ñ–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                parse_mode='HTML'
            )
            logger.error(f"Force auth error for user {target_user.id}: {e}")
    
    finally:
        db.close()


async def debug_reset_auth_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    [ADMIN ONLY] –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    –ö–æ–º–∞–Ω–¥–∞: /debug_reset_auth USER_ID –∏–ª–∏ TELEGRAM_ID
    
    –í–ê–ñ–ù–û: –£–¥–∞–ª—è–µ—Ç session —Ñ–∞–π–ª, —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –ë–î, –æ—á–∏—â–∞–µ—Ç –ø–∞–º—è—Ç—å
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è QR login —Å –Ω—É–ª—è
    """
    user = update.effective_user
    args = context.args
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∞
    db = SessionLocal()
    try:
        admin_user = db.query(User).filter(User.telegram_id == user.id).first()
        if not admin_user or not admin_user.is_admin():
            await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
            return
    finally:
        db.close()
    
    if not args:
        await update.message.reply_text(
            "üîß **Reset Auth - Admin Tool**\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/debug_reset_auth USER_ID`\n"
            "–∏–ª–∏: `/debug_reset_auth TELEGRAM_ID`\n\n"
            "‚ö†Ô∏è **–í–ù–ò–ú–ê–ù–ò–ï:** –ü–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª—è–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é:\n"
            "‚Ä¢ –£–¥–∞–ª—è–µ—Ç session —Ñ–∞–π–ª\n"
            "‚Ä¢ –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç is_authenticated = FALSE\n"
            "‚Ä¢ –û—á–∏—â–∞–µ—Ç –∏–∑ –ø–∞–º—è—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã\n"
            "‚Ä¢ –£–¥–∞–ª—è–µ—Ç QR —Å–µ—Å—Å–∏–∏ –∏–∑ Redis\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è QR login —Å –Ω—É–ª—è",
            parse_mode='HTML'
        )
        return
    
    target_id = args[0]
    
    await update.message.reply_text(f"üîç –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id}...")
    
    db = SessionLocal()
    try:
        # –ò—â–µ–º –ø–æ ID –∏–ª–∏ telegram_id
        if target_id.isdigit():
            target_user = db.query(User).filter(
                (User.id == int(target_id)) | (User.telegram_id == int(target_id))
            ).first()
        else:
            await update.message.reply_text("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            return
        
        if not target_user:
            await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
            return
        
        telegram_id = target_user.telegram_id
        user_id = target_user.id
        
        # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç—á–µ—Ç–∞
        report = []
        report.append(f"üë§ **–°–±—Ä–æ—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**\n")
        report.append(f"‚Ä¢ User ID: {user_id}")
        report.append(f"‚Ä¢ Telegram ID: {telegram_id}")
        report.append(f"‚Ä¢ –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {'‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' if target_user.is_authenticated else '‚ùå –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'}")
        report.append(f"‚Ä¢ –ü–æ–¥–ø–∏—Å–∫–∞: {target_user.subscription_type}")
        report.append(f"‚Ä¢ –ö–∞–Ω–∞–ª–æ–≤: {len(target_user.channels)}")
        report.append(f"\n‚öôÔ∏è **–ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É...**\n")
        
        # 1. –û—Ç–∫–ª—é—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–µ–Ω
        try:
            if telegram_id in shared_auth_manager.active_clients:
                client = shared_auth_manager.active_clients[telegram_id]
                if client.is_connected():
                    await client.disconnect()
                    logger.info(f"üîå –ö–ª–∏–µ–Ω—Ç {telegram_id} –æ—Ç–∫–ª—é—á–µ–Ω")
                    report.append("‚úÖ –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω")
                
                # –£–¥–∞–ª—è–µ–º –∏–∑ –ø–∞–º—è—Ç–∏
                del shared_auth_manager.active_clients[telegram_id]
                report.append("‚úÖ –£–¥–∞–ª–µ–Ω –∏–∑ –ø–∞–º—è—Ç–∏ (shared_auth_manager)")
            else:
                report.append("‚Ä¢ –ö–ª–∏–µ–Ω—Ç –Ω–µ –±—ã–ª –∞–∫—Ç–∏–≤–µ–Ω –≤ –ø–∞–º—è—Ç–∏")
        except Exception as e:
            report.append(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: {str(e)}")
            logger.error(f"Error disconnecting client {telegram_id}: {e}")
        
        # 2. –£–¥–∞–ª—è–µ–º session —Ñ–∞–π–ª
        session_file = f"/app/sessions/user_{telegram_id}.session"
        try:
            if os.path.exists(session_file):
                os.remove(session_file)
                report.append(f"‚úÖ Session —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω: `user_{telegram_id}.session`")
                logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω session —Ñ–∞–π–ª: {session_file}")
            else:
                report.append(f"‚Ä¢ Session —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª")
            
            # –£–¥–∞–ª—è–µ–º —Ç–∞–∫–∂–µ -journal —Ñ–∞–π–ª –µ—Å–ª–∏ –µ—Å—Ç—å
            journal_file = f"{session_file}-journal"
            if os.path.exists(journal_file):
                os.remove(journal_file)
                report.append(f"‚úÖ Journal —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω")
        except Exception as e:
            report.append(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è session: {str(e)}")
            logger.error(f"Error deleting session file: {e}")
        
        # 3. –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –≤ –ë–î
        try:
            target_user.is_authenticated = False
            target_user.failed_auth_attempts = 0
            target_user.auth_error = None
            target_user.last_auth_check = None
            target_user.session_file = None
            
            db.commit()
            report.append("‚úÖ –§–ª–∞–≥–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å–±—Ä–æ—à–µ–Ω—ã –≤ –ë–î")
            logger.info(f"‚úÖ –ë–î –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
        except Exception as e:
            db.rollback()
            report.append(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î: {str(e)}")
            logger.error(f"Error updating DB: {e}")
        
        # 4. –û—á–∏—â–∞–µ–º QR —Å–µ—Å—Å–∏–∏ –∏–∑ Redis
        try:
            from qr_auth_manager import qr_auth_manager
            
            if qr_auth_manager.redis_client:
                # –ò—â–µ–º –≤—Å–µ QR —Å–µ—Å—Å–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                keys = qr_auth_manager.redis_client.keys(f"qr_session:*")
                deleted_count = 0
                
                for key in keys:
                    try:
                        session_data = qr_auth_manager.redis_client.get(key)
                        if session_data:
                            import json
                            data = json.loads(session_data)
                            if data.get("telegram_id") == telegram_id:
                                qr_auth_manager.redis_client.delete(key)
                                deleted_count += 1
                    except:
                        pass
                
                if deleted_count > 0:
                    report.append(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {deleted_count} QR —Å–µ—Å—Å–∏–π –∏–∑ Redis")
                else:
                    report.append("‚Ä¢ QR —Å–µ—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ Redis")
            else:
                report.append("‚Ä¢ Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        except Exception as e:
            report.append(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ Redis: {str(e)}")
            logger.error(f"Error cleaning Redis: {e}")
        
        # 5. –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        report.append(f"\nüéâ **–°–±—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω!**\n")
        report.append(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –º–æ–∂–µ—Ç —Ç–µ–ø–µ—Ä—å:")
        report.append(f"‚Ä¢ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å `/login INVITE_CODE` –∑–∞–Ω–æ–≤–æ")
        report.append(f"‚Ä¢ –ü—Ä–æ–π—Ç–∏ QR –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —Å –Ω—É–ª—è")
        report.append(f"‚Ä¢ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å")
        
        await update.message.reply_text(
            "\n".join(report),
            parse_mode='HTML'
        )
        
        logger.info(f"‚úÖ ADMIN {user.id} reset auth for user {user_id} (telegram_id: {telegram_id})")
        
    except Exception as e:
        await update.message.reply_text(
            f"‚ùå **–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞**\n\n"
            f"üìù {str(e)}\n\n"
            f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞",
            parse_mode='HTML'
        )
        logger.error(f"Critical error in debug_reset_auth: {e}", exc_info=True)
    
    finally:
        db.close()


async def debug_delete_user_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    [ADMIN ONLY] –ü–û–õ–ù–û–ï —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–∏—Å—Ç–µ–º—ã  
    –ö–æ–º–∞–Ω–¥–∞: /debug_delete_user USER_ID –∏–ª–∏ TELEGRAM_ID
    
    –í–ù–ò–ú–ê–ù–ò–ï: –£–¥–∞–ª—è–µ—Ç –í–°–Å - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–∞–Ω–∞–ª—ã, –ø–æ–¥–ø–∏—Å–∫—É, session
    –ù–µ–æ–±—Ä–∞—Ç–∏–º–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è!
    """
    user = update.effective_user
    args = context.args
    
    logger.info(f"üîß DEBUG: debug_delete_user –≤—ã–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user.id}, args: {args}")
    print(f"üîß DEBUG: debug_delete_user START - user={user.id}, args={args}")  # Force print
    
    try:
        await update.message.reply_text(f"üîß –ö–æ–º–∞–Ω–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞! args={args}")
        logger.info(f"üì§ Sent initial reply")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∞  
        db = SessionLocal()
        try:
            admin_user = db.query(User).filter(User.telegram_id == user.id).first()
            if not admin_user:
                await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
                logger.warning(f"Admin user {user.id} not found in DB")
                return
            
            if not admin_user.is_admin():
                await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
                logger.warning(f"User {user.id} tried to use admin command")
                return
            
            logger.info(f"‚úÖ Admin check passed for {user.id}")
        finally:
            db.close()
        
        if not args:
            await update.message.reply_text(
                "üóëÔ∏è **Delete User - Admin Tool**\n\n"
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/debug_delete_user USER_ID`\n\n"
                "‚ö†Ô∏è **–í–ù–ò–ú–ê–ù–ò–ï - –ù–ï–û–ë–†–ê–¢–ò–ú–û:**\n"
                "‚Ä¢ –ü–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î\n"
                "‚Ä¢ –£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n"
                "‚Ä¢ –£–¥–∞–ª—è–µ—Ç session —Ñ–∞–π–ª",
                parse_mode='HTML'
            )
            return
        
        target_id = args[0]
        logger.info(f"üîç –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id}")
        
        await update.message.reply_text(f"üîç –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id}...")
        
        db = SessionLocal()
        try:
            if target_id.isdigit():
                target_user = db.query(User).filter(
                    (User.id == int(target_id)) | (User.telegram_id == int(target_id))
                ).first()
            else:
                await update.message.reply_text("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
                return
            
            if not target_user:
                await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                logger.warning(f"Target user {target_id} not found")
                return
            
            telegram_id = target_user.telegram_id
            user_id = target_user.id
            
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω: user_id={user_id}, telegram_id={telegram_id}")
            
            report = []
            report.append(f"üóëÔ∏è **–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}**\n")
            
            # 1. –û—Ç–∫–ª—é—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç (–ë–ï–ó await disconnect - –º–æ–∂–µ—Ç –∑–∞–≤–∏—Å–Ω—É—Ç—å!)
            try:
                if telegram_id in shared_auth_manager.active_clients:
                    # –ü—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ–º –∏–∑ —Å–ª–æ–≤–∞—Ä—è, disconnect –¥–µ–ª–∞—Ç—å –ù–ï –Ω—É–∂–Ω–æ
                    del shared_auth_manager.active_clients[telegram_id]
                    report.append("‚úÖ –ö–ª–∏–µ–Ω—Ç —É–¥–∞–ª–µ–Ω –∏–∑ –ø–∞–º—è—Ç–∏")
                    logger.info(f"üóëÔ∏è Client {telegram_id} removed from memory")
                else:
                    report.append("‚Ä¢ –ö–ª–∏–µ–Ω—Ç –Ω–µ –±—ã–ª –∞–∫—Ç–∏–≤–µ–Ω")
                    logger.info(f"Client {telegram_id} not in active_clients")
            except Exception as e:
                report.append(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: {str(e)}")
                logger.error(f"Error removing client: {e}", exc_info=True)
            
            # 2. –£–¥–∞–ª—è–µ–º session —Ñ–∞–π–ª
            session_file = f"/app/sessions/user_{telegram_id}.session"
            try:
                deleted_files = []
                if os.path.exists(session_file):
                    os.remove(session_file)
                    deleted_files.append("session")
                
                journal_file = f"{session_file}-journal"
                if os.path.exists(journal_file):
                    os.remove(journal_file)
                    deleted_files.append("journal")
                
                if deleted_files:
                    report.append(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ: {', '.join(deleted_files)}")
                    logger.info(f"üóëÔ∏è Deleted files for {telegram_id}: {deleted_files}")
                else:
                    report.append("‚Ä¢ Session —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    logger.info(f"No session files found for {telegram_id}")
            except Exception as e:
                report.append(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤: {str(e)}")
                logger.error(f"Error deleting session: {e}", exc_info=True)
            
            # 3. –û—á–∏—â–∞–µ–º SubscriptionHistory (—Å–Ω–∞—á–∞–ª–∞ changed_by, –ø–æ—Ç–æ–º user_id)
            try:
                from models import SubscriptionHistory
                
                # 3.1. –û–±–Ω—É–ª—è–µ–º changed_by –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –∞–¥–º–∏–Ω–æ–º
                admin_records = db.query(SubscriptionHistory).filter(
                    SubscriptionHistory.changed_by == user_id
                ).all()
                
                if admin_records:
                    for record in admin_records:
                        record.changed_by = None
                        record.notes = f"{record.notes or ''} [Admin user deleted]".strip()
                    db.commit()
                    report.append(f"‚úÖ –û–±–Ω—É–ª–µ–Ω–æ {len(admin_records)} –∑–∞–ø–∏—Å–µ–π –≥–¥–µ –±—ã–ª –∞–¥–º–∏–Ω–æ–º")
                    logger.info(f"Nullified {len(admin_records)} admin references")
                
                # 3.2. –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - owner
                user_records = db.query(SubscriptionHistory).filter(
                    SubscriptionHistory.user_id == user_id
                ).delete()
                
                if user_records > 0:
                    db.commit()
                    report.append(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {user_records} –∑–∞–ø–∏—Å–µ–π –ø–æ–¥–ø–∏—Å–∫–∏")
                    logger.info(f"Deleted {user_records} subscription history records")
                
            except Exception as e:
                logger.warning(f"Error cleaning subscription_history: {e}")
                report.append(f"‚ö†Ô∏è –ò—Å—Ç–æ—Ä–∏—è –ø–æ–¥–ø–∏—Å–æ–∫: {str(e)}")
            
            # 4. –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
            try:
                logger.info(f"üóëÔ∏è Deleting user {user_id} from DB...")
                db.delete(target_user)
                db.commit()
                report.append("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω –∏–∑ –ë–î")
                report.append(f"\nüéâ –ì–æ—Ç–æ–≤–æ! User {telegram_id} –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω")
                logger.info(f"‚úÖ User {user_id} deleted from DB")
                
                await update.message.reply_text(
                    "\n".join(report),
                    parse_mode='HTML'
                )
                logger.info(f"‚úÖ ADMIN {user.id} deleted user {user_id}")
                
            except Exception as e:
                db.rollback()
                error_msg = str(e)
                report.append(f"‚ùå –û—à–∏–±–∫–∞ –ë–î: {error_msg}")
                await update.message.reply_text(
                    "\n".join(report),
                    parse_mode='HTML'
                )
                logger.error(f"Error deleting user from DB: {e}", exc_info=True)
        
        except Exception as e:
            logger.error(f"Critical error in try block: {e}", exc_info=True)
            from telegram_formatter import markdownify
            await update.message.reply_text(
                markdownify(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"),
                parse_mode='HTML'
            )
        finally:
            db.close()
            logger.info("üîí DB session closed")
    
    except Exception as e:
        logger.error(f"‚ùå CRITICAL: Unhandled exception in debug_delete_user: {e}", exc_info=True)
        try:
            await update.message.reply_text(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        except:
            pass

