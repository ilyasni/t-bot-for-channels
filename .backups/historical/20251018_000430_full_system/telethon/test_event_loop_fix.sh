#!/bin/bash
# –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è Event Loop
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –ø–∞—Ä—Å–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ

set -e

echo "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è Event Loop..."
echo "================================================"

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# –°—á–µ—Ç—á–∏–∫–∏
PASSED=0
FAILED=0

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
check() {
    local test_name="$1"
    local command="$2"
    local expected="$3"
    
    echo -n "‚è≥ $test_name... "
    
    if eval "$command" | grep -q "$expected"; then
        echo -e "${GREEN}‚úÖ PASSED${NC}"
        ((PASSED++))
        return 0
    else
        echo -e "${RED}‚ùå FAILED${NC}"
        echo "   –û–∂–∏–¥–∞–ª–æ—Å—å: $expected"
        echo "   –ö–æ–º–∞–Ω–¥–∞: $command"
        ((FAILED++))
        return 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω
echo ""
echo "1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞..."
if docker ps | grep -q "telethon"; then
    echo -e "${GREEN}‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä telethon –∑–∞–ø—É—â–µ–Ω${NC}"
    ((PASSED++))
else
    echo -e "${RED}‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä telethon –ù–ï –∑–∞–ø—É—â–µ–Ω${NC}"
    echo "   –ó–∞–ø—É—Å—Ç–∏—Ç–µ: docker-compose up -d telethon"
    ((FAILED++))
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –ù–µ—Ç –æ—à–∏–±–æ–∫ event loop –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ª–æ–≥–∞—Ö
echo ""
echo "2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—à–∏–±–æ–∫ event loop..."
if docker logs telethon --tail 100 2>&1 | grep -q "event loop must not change"; then
    echo -e "${RED}‚ùå –ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏ event loop –≤ –ª–æ–≥–∞—Ö${NC}"
    ((FAILED++))
else
    echo -e "${GREEN}‚úÖ –ù–µ—Ç –æ—à–∏–±–æ–∫ event loop${NC}"
    ((PASSED++))
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: ParserService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
echo ""
echo "3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ParserService..."
check "ParserService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω" \
    "docker logs telethon --tail 200" \
    "ParserService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤ –∫–æ–¥–µ
echo ""
echo "4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π..."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤ parser_service.py –µ—Å—Ç—å –Ω–æ–≤—ã–π –∫–æ–¥
check "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ run_parsing()" \
    "docker exec telethon cat parser_service.py" \
    "–ö–†–ò–¢–ò–ß–ù–û: –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ–º asyncio.run()"

check "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ run_system.py" \
    "docker exec telethon cat run_system.py" \
    "asyncio.run() –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –¢–û–õ–¨–ö–û –û–î–ò–ù –†–ê–ó"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ 5: API –¥–æ—Å—Ç—É–ø–Ω–æ
echo ""
echo "5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ API..."
if curl -s http://localhost:8010/health > /dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ API –¥–æ—Å—Ç—É–ø–Ω–æ${NC}"
    ((PASSED++))
else
    echo -e "${YELLOW}‚ö†Ô∏è  API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ (–≤–æ–∑–º–æ–∂–Ω–æ, –µ—â–µ –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª–æ—Å—å)${NC}"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ 6: –ï—Å—Ç—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
echo ""
echo "6Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π..."
USER_COUNT=$(docker exec telethon python3 -c "
from database import SessionLocal
from models import User
db = SessionLocal()
print(db.query(User).filter(User.is_authenticated==True).count())
" 2>/dev/null || echo "0")

if [ "$USER_COUNT" -gt 0 ]; then
    echo -e "${GREEN}‚úÖ –ù–∞–π–¥–µ–Ω–æ $USER_COUNT –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π${NC}"
    ((PASSED++))
else
    echo -e "${YELLOW}‚ö†Ô∏è  –ù–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π${NC}"
    echo "   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –Ω—É–∂–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ –±–æ—Ç–∞: /login"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ 7: –ï—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
echo ""
echo "7Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–Ω–∞–ª–æ–≤..."
CHANNEL_COUNT=$(docker exec telethon python3 -c "
from database import SessionLocal
from models import Channel
db = SessionLocal()
print(db.query(Channel).filter(Channel.is_active==True).count())
" 2>/dev/null || echo "0")

if [ "$CHANNEL_COUNT" -gt 0 ]; then
    echo -e "${GREEN}‚úÖ –ù–∞–π–¥–µ–Ω–æ $CHANNEL_COUNT –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤${NC}"
    ((PASSED++))
else
    echo -e "${YELLOW}‚ö†Ô∏è  –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤${NC}"
    echo "   –î–æ–±–∞–≤—å—Ç–µ –∫–∞–Ω–∞–ª—ã —á–µ—Ä–µ–∑ –±–æ—Ç–∞: /add_channel"
fi

# –ò—Ç–æ–≥–∏
echo ""
echo "================================================"
echo "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"
echo "   ‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: $PASSED"
echo "   ‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: $FAILED"
echo "================================================"

if [ $FAILED -eq 0 ]; then
    echo -e "${GREEN}üéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã!${NC}"
    echo ""
    echo "üìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:"
    echo "   1. –î–æ–∂–¥–∏—Ç–µ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ (30 –º–∏–Ω—É—Ç)"
    echo "   2. –ò–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –≤—Ä—É—á–Ω—É—é: curl -X POST http://localhost:8010/parse/user/{USER_ID}"
    echo "   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: docker logs telethon -f | grep '–¥–æ–±–∞–≤–ª–µ–Ω–æ'"
    echo ""
    echo "üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:"
    echo "   - TESTING_EVENT_LOOP_FIX.md - –ø–æ–ª–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ"
    echo "   - docs/EVENT_LOOP_FIX.md - –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ"
    exit 0
else
    echo -e "${RED}‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–≤–∞–ª–µ–Ω—ã${NC}"
    echo ""
    echo "üîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:"
    echo "   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: docker logs telethon --tail 100"
    echo "   2. –ü–µ—Ä–µ—Å–æ–±–µ—Ä–∏—Ç–µ –æ–±—Ä–∞–∑: docker-compose build telethon"
    echo "   3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ: docker-compose restart telethon"
    echo ""
    echo "üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:"
    echo "   - TESTING_EVENT_LOOP_FIX.md - —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é –ø—Ä–æ–±–ª–µ–º"
    exit 1
fi

