"""
–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –º–æ–¥—É–ª—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –º–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç SecureAuthManager –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º–∏ –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
–£—Å—Ç—Ä–∞–Ω—è–µ—Ç –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤–≤–æ–¥ –∫–æ–¥–æ–≤ —á–µ—Ä–µ–∑ Telegram —á–∞—Ç.
"""

from secure_auth_manager import secure_auth_manager
from models import User
import logging
import os

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def get_user_client(user: User):
    """
    –ü–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        user: –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    
    Returns:
        TelegramClient: –ö–ª–∏–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    try:
        return await secure_auth_manager.get_user_client(user)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}: {str(e)}")
        return None

async def create_auth_session(user: User) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç —Å–µ—Å—Å–∏—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        user: –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    
    Returns:
        str: ID —Å–µ—Å—Å–∏–∏ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    try:
        session_id = await secure_auth_manager.create_auth_session(user)
        if session_id:
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Å–µ—Å—Å–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}")
        return session_id
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}: {str(e)}")
        return None

async def get_auth_url(session_id: str) -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç URL –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    
    Args:
        session_id: ID —Å–µ—Å—Å–∏–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    
    Returns:
        str: URL –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    """
    try:
        base_url = os.getenv("AUTH_BASE_URL", "https://localhost:8000")
        return f"{base_url}/auth?sid={session_id}"
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è URL –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {str(e)}")
        return None

async def check_user_auth_status(user: User) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        user: –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    
    Returns:
        bool: True –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω, False –µ—Å–ª–∏ –Ω–µ—Ç
    """
    try:
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∏–∑ –ë–î
        return user.is_authenticated and not user.is_blocked
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}: {str(e)}")
        return False

async def logout_user(user: User):
    """
    –í—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–∏—Å—Ç–µ–º—ã
    
    Args:
        user: –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    """
    try:
        # –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º shared_auth_manager (–Ω–æ–≤–∞—è QR —Å–∏—Å—Ç–µ–º–∞)
        # –ö–ª—é—á - telegram_id, –ù–ï user.id
        from shared_auth_manager import shared_auth_manager
        
        telegram_id = user.telegram_id
        
        # –û—Ç–∫–ª—é—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–µ–Ω
        if telegram_id in shared_auth_manager.active_clients:
            client = shared_auth_manager.active_clients[telegram_id]
            if client.is_connected():
                await client.disconnect()
                logger.info(f"üîå –ö–ª–∏–µ–Ω—Ç {telegram_id} –æ—Ç–∫–ª—é—á–µ–Ω")
            del shared_auth_manager.active_clients[telegram_id]
            logger.info(f"üóëÔ∏è –ö–ª–∏–µ–Ω—Ç {telegram_id} —É–¥–∞–ª–µ–Ω –∏–∑ –ø–∞–º—è—Ç–∏")
        
        # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (—Å—Ç–∞—Ä–∞—è —Å–∏—Å—Ç–µ–º–∞)
        if user.auth_session_id:
            if user.auth_session_id in secure_auth_manager.auth_sessions:
                del secure_auth_manager.auth_sessions[user.auth_session_id]
            user.auth_session_id = None
            user.auth_session_expires = None
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
        user.is_authenticated = False
        user.auth_error = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª –∏–∑ —Å–∏—Å—Ç–µ–º—ã"
        
        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.telegram_id} –≤—ã—à–µ–ª –∏–∑ —Å–∏—Å—Ç–µ–º—ã")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}: {str(e)}")

async def get_authenticated_users(db) -> list:
    """
    –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    
    Args:
        db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    
    Returns:
        list: –°–ø–∏—Å–æ–∫ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    """
    try:
        return db.query(User).filter(
            User.is_authenticated == True,
            User.is_active == True,
            User.is_blocked == False
        ).all()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {str(e)}")
        return []

async def cleanup_inactive_clients():
    """–û—á–∏—Å—Ç–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤"""
    try:
        # –û—á–∏—â–∞–µ–º –∏—Å—Ç–µ–∫—à–∏–µ —Å–µ—Å—Å–∏–∏
        await secure_auth_manager.cleanup_expired_sessions()
        
        # –û—á–∏—â–∞–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã
        inactive_users = []
        for user_id, client in secure_auth_manager.active_clients.items():
            try:
                if not client.is_connected():
                    inactive_users.append(user_id)
            except:
                inactive_users.append(user_id)
        
        for user_id in inactive_users:
            if user_id in secure_auth_manager.active_clients:
                try:
                    await secure_auth_manager.active_clients[user_id].disconnect()
                except:
                    pass
                del secure_auth_manager.active_clients[user_id]
        
        if inactive_users:
            logger.info(f"üßπ –û—á–∏—â–µ–Ω–æ {len(inactive_users)} –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: {str(e)}")

async def disconnect_all_clients():
    """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤"""
    try:
        for user_id, client in secure_auth_manager.active_clients.items():
            try:
                if client.is_connected():
                    await client.disconnect()
            except:
                pass
        
        secure_auth_manager.active_clients.clear()
        secure_auth_manager.auth_sessions.clear()
        logger.info("üîå –í—Å–µ –∫–ª–∏–µ–Ω—Ç—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: {str(e)}")

async def clear_all_sessions():
    """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π"""
    try:
        import os
        import glob
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã —Å–µ—Å—Å–∏–π
        session_files = glob.glob(os.path.join(secure_auth_manager.sessions_dir, "*.session*"))
        for session_file in session_files:
            try:
                os.remove(session_file)
                logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏: {session_file}")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {session_file}: {str(e)}")
        
        # –û—á–∏—â–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã –∏ —Å–µ—Å—Å–∏–∏
        secure_auth_manager.active_clients.clear()
        secure_auth_manager.auth_sessions.clear()
        
        logger.info("üßπ –í—Å–µ —Å–µ—Å—Å–∏–∏ –æ—á–∏—â–µ–Ω—ã")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Å—Å–∏–π: {str(e)}")
        return False

# –£—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ —É–¥–∞–ª–µ–Ω—ã - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–æ–≤—ã–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏