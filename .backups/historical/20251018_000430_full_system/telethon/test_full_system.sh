#!/bin/bash
# –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è Event Loop
# –ü—Ä–æ–≤–µ—Ä—è–µ—Ç: –ø–∞—Ä—Å–∏–Ω–≥, —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é, –ø–æ–∏—Å–∫

# –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ–º set -e —á—Ç–æ–±—ã —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ–¥–æ–ª–∂–∞–ª —Ä–∞–±–æ—Ç—É –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

PASSED=0
FAILED=0

echo -e "${BLUE}üîç –ü–û–õ–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê TELEGRAM PARSER SYSTEM${NC}"
echo "============================================================"

# 1. –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
echo -e "\n${BLUE}1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...${NC}"
for container in telethon rag-service qdrant; do
    if docker ps | grep -q "$container"; then
        echo -e "  ${GREEN}‚úÖ $container${NC}"
        ((PASSED++))
    else
        echo -e "  ${RED}‚ùå $container –ù–ï –ó–ê–ü–£–©–ï–ù${NC}"
        ((FAILED++))
    fi
done

# 2. Event Loop
echo -e "\n${BLUE}2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ Event Loop...${NC}"
LOOP_COUNT=$(docker logs telethon 2>&1 | grep "event loop ID" | awk '{print $NF}' | sort -u | wc -l)
if [ "$LOOP_COUNT" -eq 1 ]; then
    LOOP_ID=$(docker logs telethon 2>&1 | grep "event loop ID" | tail -1 | awk '{print $NF}')
    echo -e "  ${GREEN}‚úÖ –í—Å–µ –∫–ª–∏–µ–Ω—Ç—ã –≤ –æ–¥–Ω–æ–º event loop: $LOOP_ID${NC}"
    ((PASSED++))
else
    echo -e "  ${YELLOW}‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ $LOOP_COUNT —Ä–∞–∑–Ω—ã—Ö event loops${NC}"
    ((FAILED++))
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—à–∏–±–æ–∫ event loop
if docker logs telethon 2>&1 | grep -q "event loop must not change"; then
    echo -e "  ${RED}‚ùå –ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏ event loop${NC}"
    ((FAILED++))
else
    echo -e "  ${GREEN}‚úÖ –ù–µ—Ç –æ—à–∏–±–æ–∫ event loop${NC}"
    ((PASSED++))
fi

# 3. –ü–∞—Ä—Å–∏–Ω–≥
echo -e "\n${BLUE}3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞...${NC}"
PARSE_RESULT=$(curl -s -X POST http://localhost:8010/users/6/channels/parse 2>/dev/null || echo '{"posts_added":0}')
POSTS_ADDED=$(echo "$PARSE_RESULT" | python3 -c "import sys, json; print(json.load(sys.stdin).get('posts_added', 0))" 2>/dev/null || echo "0")

if [ "$POSTS_ADDED" -gt 0 ]; then
    echo -e "  ${GREEN}‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ —Ä–∞–±–æ—Ç–∞–µ—Ç: $POSTS_ADDED –ø–æ—Å—Ç–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ${NC}"
    ((PASSED++))
else
    echo -e "  ${YELLOW}‚ö†Ô∏è  –ü–∞—Ä—Å–∏–Ω–≥ –≤–µ—Ä–Ω—É–ª 0 –ø–æ—Å—Ç–æ–≤ (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ—Ç –Ω–æ–≤—ã—Ö)${NC}"
fi

# 4. –¢–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
echo -e "\n${BLUE}4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è...${NC}"
TAG_STATS=$(docker exec telethon python3 -c "
from database import SessionLocal
from models import Post
db = SessionLocal()
with_tags = db.query(Post).filter(Post.tags != None).count()
total = db.query(Post).count()
print(f'{with_tags},{total}')
" 2>/dev/null)

WITH_TAGS=$(echo "$TAG_STATS" | cut -d',' -f1)
TOTAL=$(echo "$TAG_STATS" | cut -d',' -f2)

if [ -n "$WITH_TAGS" ] && [ -n "$TOTAL" ] && [ "$TOTAL" -gt 0 ]; then
    PERCENT=$(python3 -c "print(int($WITH_TAGS/$TOTAL*100))")
    if [ "$PERCENT" -ge 90 ]; then
        echo -e "  ${GREEN}‚úÖ –¢–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ: $WITH_TAGS/$TOTAL –ø–æ—Å—Ç–æ–≤ ($PERCENT%)${NC}"
        ((PASSED++))
    else
        echo -e "  ${YELLOW}‚ö†Ô∏è  –¢–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ: $WITH_TAGS/$TOTAL –ø–æ—Å—Ç–æ–≤ ($PERCENT%)${NC}"
    fi
else
    echo -e "  ${YELLOW}‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–µ–≥–æ–≤${NC}"
fi

# 5. RAG Service
echo -e "\n${BLUE}5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ RAG Service...${NC}"
RAG_HEALTH=$(curl -s http://localhost:8020/health 2>/dev/null || echo '{"status":"error"}')
RAG_STATUS=$(echo "$RAG_HEALTH" | python3 -c "import sys, json; print(json.load(sys.stdin).get('status', 'error'))" 2>/dev/null || echo "error")

if [ "$RAG_STATUS" = "healthy" ]; then
    echo -e "  ${GREEN}‚úÖ RAG Service —Ä–∞–±–æ—Ç–∞–µ—Ç${NC}"
    ((PASSED++))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Qdrant –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    QDRANT_CONN=$(echo "$RAG_HEALTH" | python3 -c "import sys, json; print(json.load(sys.stdin).get('qdrant_connected', False))" 2>/dev/null || echo "False")
    if [ "$QDRANT_CONN" = "True" ]; then
        echo -e "  ${GREEN}‚úÖ Qdrant –ø–æ–¥–∫–ª—é—á–µ–Ω${NC}"
        ((PASSED++))
    else
        echo -e "  ${RED}‚ùå Qdrant –ù–ï –ø–æ–¥–∫–ª—é—á–µ–Ω${NC}"
        ((FAILED++))
    fi
else
    echo -e "  ${RED}‚ùå RAG Service –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω${NC}"
    ((FAILED++))
fi

# 6. –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è
echo -e "\n${BLUE}6Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ –≤ Qdrant...${NC}"
QDRANT_STATS=$(curl -s http://localhost:8020/rag/stats/6 2>/dev/null || echo '{"vectors_count":0}')
VECTORS=$(echo "$QDRANT_STATS" | python3 -c "import sys, json; print(json.load(sys.stdin).get('vectors_count', 0))" 2>/dev/null || echo "0")
INDEXED=$(echo "$QDRANT_STATS" | python3 -c "import sys, json; print(json.load(sys.stdin).get('indexed_posts', 0))" 2>/dev/null || echo "0")

if [ "$VECTORS" -gt 0 ]; then
    echo -e "  ${GREEN}‚úÖ –í–µ–∫—Ç–æ—Ä–æ–≤ –≤ Qdrant: $VECTORS${NC}"
    echo -e "  ${GREEN}‚úÖ –ü—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–æ –ø–æ—Å—Ç–æ–≤: $INDEXED${NC}"
    ((PASSED++))
else
    echo -e "  ${YELLOW}‚ö†Ô∏è  –ù–µ—Ç –≤–µ–∫—Ç–æ—Ä–æ–≤ –≤ Qdrant (–≤–æ–∑–º–æ–∂–Ω–æ, –µ—â–µ –Ω–µ –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–ª–∏—Å—å)${NC}"
fi

# 7. –í–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫
echo -e "\n${BLUE}7Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞...${NC}"
SEARCH_RESULT=$(curl -s "http://localhost:8020/rag/search?user_id=6&query=–∞–≤—Ç–æ&limit=1&min_score=0.5" 2>/dev/null || echo '{"results_count":0}')
RESULTS_COUNT=$(echo "$SEARCH_RESULT" | python3 -c "import sys, json; print(json.load(sys.stdin).get('results_count', 0))" 2>/dev/null || echo "0")

if [ "$RESULTS_COUNT" -gt 0 ]; then
    echo -e "  ${GREEN}‚úÖ –ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç: –Ω–∞–π–¥–µ–Ω–æ $RESULTS_COUNT —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤${NC}"
    ((PASSED++))
else
    echo -e "  ${YELLOW}‚ö†Ô∏è  –ü–æ–∏—Å–∫ –≤–µ—Ä–Ω—É–ª 0 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤${NC}"
fi

# –ò–¢–û–ì–ò
echo ""
echo "============================================================"
echo -e "${BLUE}üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:${NC}"
echo "  ‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: $PASSED"
echo "  ‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: $FAILED"
echo "============================================================"

if [ $FAILED -eq 0 ]; then
    echo -e "${GREEN}üéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!${NC}"
    echo ""
    echo "üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:"
    echo "  - FINAL_SUMMARY.md - –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç"
    echo "  - QUICK_REFERENCE.md - —à–ø–∞—Ä–≥–∞–ª–∫–∞"
    echo "  - VERIFICATION_REPORT.md - –¥–µ—Ç–∞–ª–∏ event loop fix"
    echo "  - TAGGING_INDEXING_VERIFICATION.md - –¥–µ—Ç–∞–ª–∏ —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"
    echo ""
    echo "üöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!"
    exit 0
else
    echo -e "${YELLOW}‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –ø—Ä–æ—à–ª–∏ (—Å–º. –≤—ã—à–µ)${NC}"
    echo ""
    echo "üîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:"
    echo "  1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: docker logs telethon --tail 100"
    echo "  2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ RAG service: docker logs rag-service --tail 50"
    echo "  3. –°–º. –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é: TROUBLESHOOTING.md"
    exit 1
fi

