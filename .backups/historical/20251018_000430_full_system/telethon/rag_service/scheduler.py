"""
–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤
–ë–∞–∑–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
"""
import logging
import os
import sys
from datetime import datetime, timedelta
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from apscheduler.triggers.date import DateTrigger
import httpx
import pytz

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ path
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from database import SessionLocal
from models import DigestSettings

logger = logging.getLogger(__name__)


class DigestScheduler:
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        self.scheduler = AsyncIOScheduler()
        logger.info("‚úÖ Digest Scheduler –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def start(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        try:
            if not self.scheduler.running:
                self.scheduler.start()
                logger.info("üïê Digest Scheduler –∑–∞–ø—É—â–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        try:
            if self.scheduler.running:
                self.scheduler.shutdown()
                logger.info("üõë Digest Scheduler –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
    
    async def schedule_digest(
        self,
        user_id: int,
        time: str = "09:00",
        days_of_week: str = "mon-sun",
        timezone: str = "Europe/Moscow"
    ):
        """
        –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            time: –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (HH:MM)
            days_of_week: –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
            timezone: –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'Europe/Moscow')
        """
        try:
            hour, minute = time.split(":")
            
            # –°–æ–∑–¥–∞–µ–º timezone –æ–±—ä–µ–∫—Ç
            tz = pytz.timezone(timezone)
            
            trigger = CronTrigger(
                hour=int(hour),
                minute=int(minute),
                day_of_week=days_of_week,
                timezone=tz
            )
            
            job_id = f"digest_user_{user_id}"
            
            # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
            if self.scheduler.get_job(job_id):
                self.scheduler.remove_job(job_id)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ
            self.scheduler.add_job(
                self._send_digest,
                trigger=trigger,
                id=job_id,
                args=[user_id],
                replace_existing=True
            )
            
            logger.info(f"üìÖ –î–∞–π–¥–∂–µ—Å—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –¥–ª—è user {user_id} ({time} {timezone}, {days_of_week})")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞: {e}")
            raise
    
    async def _send_digest(self, user_id: int):
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        db = SessionLocal()
        
        try:
            logger.info(f"üìß –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –¥–ª—è user {user_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –∏–∑ –ë–î
            settings = db.query(DigestSettings).filter(
                DigestSettings.user_id == user_id
            ).first()
            
            if not settings or not settings.enabled:
                logger.warning(f"‚ö†Ô∏è –î–∞–π–¥–∂–µ—Å—Ç –æ—Ç–∫–ª—é—á–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è user {user_id}")
                return
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥ –¥–ª—è –¥–∞–π–¥–∂–µ—Å—Ç–∞
            now = datetime.now(pytz.timezone(settings.timezone))
            
            if settings.frequency == "daily":
                date_from = now - timedelta(days=1)
            elif settings.frequency == "weekly":
                date_from = now - timedelta(days=7)
            else:
                date_from = now - timedelta(days=1)
            
            date_to = now
            
            # –í—ã–∑—ã–≤–∞–µ–º RAG Service –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞
            rag_url = os.getenv("RAG_SERVICE_URL", "http://localhost:8020")
            
            async with httpx.AsyncClient(timeout=60.0) as client:
                try:
                    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è AI-–¥–∞–π–¥–∂–µ—Å—Ç–∞
                    response = await client.post(
                        f"{rag_url}/rag/digest/generate",
                        json={
                            "user_id": user_id,
                            "date_from": date_from.isoformat(),
                            "date_to": date_to.isoformat(),
                            "preferred_topics": settings.preferred_topics,
                            "topics_limit": settings.topics_limit or 5,
                            "summary_style": settings.summary_style or "concise",
                            "format": settings.format or "markdown",
                            "max_posts": settings.max_posts or 200,
                            "channels": settings.channels,
                            "tags": settings.tags
                        }
                    )
                    
                    if response.status_code != 200:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {response.status_code} - {response.text[:200]}")
                        return
                    
                    result = response.json()
                    digest_text = result.get("digest", "")
                    
                    if not digest_text:
                        logger.warning(f"‚ö†Ô∏è –ü—É—Å—Ç–æ–π –¥–∞–π–¥–∂–µ—Å—Ç –¥–ª—è user {user_id}")
                        return
                    
                except httpx.TimeoutException:
                    logger.error(f"‚ùå Timeout –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –¥–ª—è user {user_id}")
                    return
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ RAG service: {e}")
                    return
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ Telegram Bot
            bot_token = os.getenv("BOT_TOKEN")
            
            if not bot_token:
                logger.error("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º telegram_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
            from models import User
            user = db.query(User).filter(User.id == user_id).first()
            
            if not user:
                logger.error(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
                return
            
            telegram_id = user.telegram_id
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ Telegram Bot API —Å retry –º–µ—Ö–∞–Ω–∏–∑–º–æ–º
            max_retries = 3
            retry_delay = 2  # —Å–µ–∫—É–Ω–¥—ã
            
            for attempt in range(max_retries):
                try:
                    async with httpx.AsyncClient(timeout=30.0) as client:
                        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ (–º–∞–∫—Å 4096 —Å–∏–º–≤–æ–ª–æ–≤ –≤ Telegram)
                        max_length = 4000  # –û—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å
                        
                        if len(digest_text) <= max_length:
                            messages = [digest_text]
                        else:
                            # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞–º
                            messages = []
                            current_message = ""
                            
                            for line in digest_text.split("\n"):
                                if len(current_message) + len(line) + 1 <= max_length:
                                    current_message += line + "\n"
                                else:
                                    if current_message:
                                        messages.append(current_message)
                                    current_message = line + "\n"
                            
                            if current_message:
                                messages.append(current_message)
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —á–∞—Å—Ç–∏
                        for i, message in enumerate(messages):
                            response = await client.post(
                                f"https://api.telegram.org/bot{bot_token}/sendMessage",
                                json={
                                    "chat_id": telegram_id,
                                    "text": message,
                                    "parse_mode": "HTML",  # –í—Å–µ–≥–¥–∞ HTML, —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ digest_generator
                                    "disable_web_page_preview": True
                                }
                            )
                            
                            if response.status_code != 200:
                                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –≤ Telegram: {response.status_code} - {response.text[:200]}")
                                raise Exception(f"Telegram API returned {response.status_code}")
                            
                            logger.info(f"‚úÖ –ß–∞—Å—Ç—å {i+1}/{len(messages)} –¥–∞–π–¥–∂–µ—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ user {user_id}")
                        
                        # –£—Å–ø–µ—à–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ - –≤—ã—Ö–æ–¥–∏–º –∏–∑ retry loop
                        break
                        
                except Exception as e:
                    if attempt < max_retries - 1:
                        logger.warning(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries} –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {retry_delay} —Å–µ–∫...")
                        import asyncio
                        await asyncio.sleep(retry_delay)
                        retry_delay *= 2  # Exponential backoff
                    else:
                        logger.error(f"‚ùå –í—Å–µ {max_retries} –ø–æ–ø—ã—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å: {e}")
                        return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º last_sent_at –≤ –ë–î
            settings.last_sent_at = datetime.now(pytz.UTC)
            
            # –í—ã—á–∏—Å–ª—è–µ–º next_scheduled_at
            job_id = f"digest_user_{user_id}"
            job = self.scheduler.get_job(job_id)
            
            if job and job.next_run_time:
                settings.next_scheduled_at = job.next_run_time
            
            db.commit()
            
            logger.info(f"‚úÖ –î–∞–π–¥–∂–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω user {user_id} (telegram_id: {telegram_id})")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –¥–ª—è user {user_id}: {e}", exc_info=True)
            db.rollback()
        finally:
            db.close()


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
digest_scheduler = DigestScheduler()

