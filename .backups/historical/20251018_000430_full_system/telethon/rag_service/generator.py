"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º RAG
(Retrieval-Augmented Generation)
"""
import logging
import httpx
from typing import List, Dict, Any, Optional, Tuple
from datetime import datetime

from search import search_service
import config

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º logger –¥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# Feature flags –¥–ª—è A/B testing
try:
    from rag_service.feature_flags import feature_flags
    from rag_service.enhanced_search import enhanced_search_service
    ENHANCED_SEARCH_AVAILABLE = True
except ImportError:
    logger.warning("‚ö†Ô∏è Enhanced search not available, using baseline only")
    ENHANCED_SEARCH_AVAILABLE = False
    feature_flags = None
    enhanced_search_service = None


class RAGGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º RAG"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞"""
        self.openrouter_api_key = config.OPENROUTER_API_KEY
        self.openrouter_model = config.OPENROUTER_MODEL
        self.openrouter_url = config.OPENROUTER_API_URL
        self.gigachat_url = f"{config.GIGACHAT_PROXY_URL}/v1/chat/completions"
        
        self.enabled = self.openrouter_api_key is not None
        
        if self.enabled:
            logger.info(f"‚úÖ RAG Generator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–º–æ–¥–µ–ª—å: {self.openrouter_model})")
        else:
            logger.warning("‚ö†Ô∏è RAG Generator –æ—Ç–∫–ª—é—á–µ–Ω (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç OPENROUTER_API_KEY)")
    
    def _create_rag_prompt(
        self,
        query: str,
        contexts: List[Dict[str, Any]]
    ) -> str:
        """
        –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–ø—Ç –¥–ª—è RAG
        
        Args:
            query: –í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            contexts: –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–ø–æ—Å—Ç–æ–≤)
            
        Returns:
            –ü—Ä–æ–º–ø—Ç –¥–ª—è LLM
        """
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã
        formatted_contexts = []
        for i, ctx in enumerate(contexts, 1):
            channel = ctx.get("channel_username", "Unknown")
            posted_at = ctx.get("posted_at", "")
            if isinstance(posted_at, datetime):
                posted_at = posted_at.strftime("%Y-%m-%d %H:%M")
            text = ctx.get("text", "")
            url = ctx.get("url", "")
            
            context_str = f"""
–ò—Å—Ç–æ—á–Ω–∏–∫ {i}:
–ö–∞–Ω–∞–ª: @{channel}
–î–∞—Ç–∞: {posted_at}
–°—Å—ã–ª–∫–∞: {url}
–¢–µ–∫—Å—Ç:
{text}
"""
            formatted_contexts.append(context_str.strip())
        
        contexts_block = "\n\n---\n\n".join(formatted_contexts)
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç
        prompt = f"""–¢—ã ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Å—Ç–æ–≤ –∏–∑ Telegram –∫–∞–Ω–∞–ª–æ–≤.

–ö–æ–Ω—Ç–µ–∫—Å—Ç (–ø–æ—Å—Ç—ã):
{contexts_block}

–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
{query}

–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:
- –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
- –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ—Ç ‚Äî —Å–∫–∞–∂–∏ "–ü–æ –¥–∞–Ω–Ω–æ–º—É –≤–æ–ø—Ä–æ—Å—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –ø–æ—Å—Ç–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
- –¶–∏—Ç–∏—Ä—É–π –∏—Å—Ç–æ—á–Ω–∏–∫–∏: —É–∫–∞–∂–∏ –∫–∞–Ω–∞–ª –∏ –¥–∞—Ç—É –ø–æ—Å—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ [@–∫–∞–Ω–∞–ª, –¥–∞—Ç–∞]
- –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º
- –ò—Å–ø–æ–ª—å–∑—É–π —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫
- –ï—Å–ª–∏ –≤ –ø–æ—Å—Ç–∞—Ö –µ—Å—Ç—å –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, —É–∫–∞–∂–∏ –Ω–∞ —ç—Ç–æ
- –ë—É–¥—å –æ–±—ä–µ–∫—Ç–∏–≤–Ω—ã–º –∏ —Ç–æ—á–Ω—ã–º

–û—Ç–≤–µ—Ç:"""
        
        return prompt
    
    async def _generate_with_openrouter(
        self,
        prompt: str,
        temperature: float = 0.3,
        max_tokens: int = 1000
    ) -> Optional[str]:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ OpenRouter
        
        Args:
            prompt: –ü—Ä–æ–º–ø—Ç
            temperature: Temperature –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            max_tokens: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤
            
        Returns:
            –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–ª–∏ None
        """
        try:
            async with httpx.AsyncClient(timeout=60.0) as client:
                response = await client.post(
                    self.openrouter_url,
                    headers={
                        "Authorization": f"Bearer {self.openrouter_api_key}",
                        "Content-Type": "application/json"
                    },
                    json={
                        "model": self.openrouter_model,
                        "messages": [
                            {
                                "role": "user",
                                "content": prompt
                            }
                        ],
                        "temperature": temperature,
                        "max_tokens": max_tokens
                    }
                )
                
                if response.status_code != 200:
                    logger.error(f"‚ùå OpenRouter error {response.status_code}: {response.text[:200]}")
                    return None
                
                result = response.json()
                answer = result.get("choices", [{}])[0].get("message", {}).get("content", "")
                
                if answer:
                    logger.debug("‚úÖ –û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ OpenRouter")
                    return answer
                else:
                    logger.error("‚ùå –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç OpenRouter")
                    return None
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ OpenRouter: {e}")
            return None
    
    async def _generate_with_gigachat(
        self,
        prompt: str,
        temperature: float = 0.3,
        max_tokens: int = 1000
    ) -> Optional[str]:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ GigaChat (fallback)
        
        Args:
            prompt: –ü—Ä–æ–º–ø—Ç
            temperature: Temperature –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            max_tokens: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤
            
        Returns:
            –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–ª–∏ None
        """
        try:
            async with httpx.AsyncClient(timeout=60.0) as client:
                response = await client.post(
                    self.gigachat_url,
                    json={
                        "model": "GigaChat",
                        "messages": [
                            {
                                "role": "user",
                                "content": prompt
                            }
                        ],
                        "temperature": temperature,
                        "max_tokens": max_tokens
                    }
                )
                
                if response.status_code != 200:
                    logger.error(f"‚ùå GigaChat error {response.status_code}: {response.text[:200]}")
                    return None
                
                result = response.json()
                answer = result.get("choices", [{}])[0].get("message", {}).get("content", "")
                
                if answer:
                    logger.debug("‚úÖ –û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ GigaChat")
                    return answer
                else:
                    logger.error("‚ùå –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç GigaChat")
                    return None
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ GigaChat: {e}")
            return None
    
    async def _log_query_to_history(self, user_id: int, query: str):
        """
        –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å RAG-–∑–∞–ø—Ä–æ—Å –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            query: –¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞
        """
        try:
            import sys
            import os
            sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
            
            from database import SessionLocal
            from models import RAGQueryHistory
            
            db = SessionLocal()
            try:
                history_entry = RAGQueryHistory(
                    user_id=user_id,
                    query=query,
                    extracted_topics=None  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–º –ø–æ–∑–∂–µ
                )
                db.add(history_entry)
                db.commit()
                logger.debug(f"üìù –ó–∞–ø—Ä–æ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∏—Å—Ç–æ—Ä–∏—é user {user_id}")
            finally:
                db.close()
                
        except Exception as e:
            # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –≤ –∏—Å—Ç–æ—Ä–∏—é: {e}")
    
    async def generate_answer(
        self,
        query: str,
        user_id: int,
        context_limit: int = 10,
        channels: Optional[List[int]] = None,
        tags: Optional[List[str]] = None,
        date_from: Optional[datetime] = None,
        date_to: Optional[datetime] = None
    ) -> Dict[str, Any]:
        """
        –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º RAG
        
        Args:
            query: –í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            context_limit: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            channels: –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞–Ω–∞–ª–∞–º
            tags: –§–∏–ª—å—Ç—Ä –ø–æ —Ç–µ–≥–∞–º
            date_from: –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ (–æ—Ç)
            date_to: –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ (–¥–æ)
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –æ—Ç–≤–µ—Ç–æ–º –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏
        """
        if not self.enabled:
            return {
                "error": "RAG Generator –æ—Ç–∫–ª—é—á–µ–Ω",
                "query": query,
                "answer": None,
                "sources": []
            }
        
        try:
            logger.info(f"ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –¥–ª—è user {user_id}: '{query}'")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
            await self._log_query_to_history(user_id, query)
            
            # A/B Test: Hybrid search vs Baseline
            use_hybrid = (
                ENHANCED_SEARCH_AVAILABLE and 
                feature_flags and 
                feature_flags.is_enabled('hybrid_search', user_id=user_id)
            )
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫
            search_results = []
            
            if use_hybrid:
                # –ù–æ–≤—ã–π: Hybrid search (Qdrant + Neo4j)
                logger.info(f"üî¨ A/B Test: Using HYBRID search for user {user_id}")
                
                try:
                    search_results = await enhanced_search_service.search_with_graph_context(
                        query=query,
                        user_id=user_id,
                        limit=context_limit,
                        channel_id=channels[0] if channels else None,
                        tags=tags,
                        date_from=date_from,
                        date_to=date_to
                    )
                except Exception as e:
                    logger.error(f"‚ùå Hybrid search failed, fallback to baseline: {e}")
                    use_hybrid = False  # Fallback
            
            if not use_hybrid:
                # Baseline: –û–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ Qdrant
                logger.info(f"üìä A/B Test: Using BASELINE search for user {user_id}")
                
                if channels:
                    # –ò—â–µ–º –ø–æ –∫–∞–∂–¥–æ–º—É –∫–∞–Ω–∞–ª—É –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    for channel_id in channels:
                        results = await search_service.search(
                            query=query,
                            user_id=user_id,
                            limit=context_limit // len(channels) + 1,
                            channel_id=channel_id,
                            tags=tags,
                            date_from=date_from,
                            date_to=date_to
                        )
                        search_results.extend(results)
                else:
                    # –û–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫
                    search_results = await search_service.search(
                        query=query,
                        user_id=user_id,
                        limit=context_limit,
                        tags=tags,
                        date_from=date_from,
                        date_to=date_to
                    )
            
            if not search_results:
                return {
                    "query": query,
                    "answer": "–ü–æ –¥–∞–Ω–Ω–æ–º—É –≤–æ–ø—Ä–æ—Å—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –ø–æ—Å—Ç–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞.",
                    "sources": [],
                    "context_used": 0
                }
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            search_results = search_results[:context_limit]
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç
            prompt = self._create_rag_prompt(query, search_results)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            answer = None
            
            # –ü—Ä–æ–±—É–µ–º OpenRouter
            answer = await self._generate_with_openrouter(
                prompt,
                temperature=config.RAG_TEMPERATURE
            )
            
            # Fallback –Ω–∞ GigaChat
            if not answer and config.GIGACHAT_ENABLED:
                logger.info("üîÑ Fallback –Ω–∞ GigaChat –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞")
                answer = await self._generate_with_gigachat(
                    prompt,
                    temperature=config.RAG_TEMPERATURE
                )
            
            if not answer:
                return {
                    "query": query,
                    "error": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç",
                    "answer": None,
                    "sources": [],
                    "context_used": len(search_results)
                }
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏
            sources = [
                {
                    "post_id": result["post_id"],
                    "channel_username": result["channel_username"],
                    "posted_at": result["posted_at"],
                    "url": result["url"],
                    "excerpt": result["text"][:200] + "..." if len(result["text"]) > 200 else result["text"],
                    "score": result["score"]
                }
                for result in search_results
            ]
            
            logger.info(f"‚úÖ –û—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è user {user_id} (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ {len(sources)} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤)")
            
            return {
                "query": query,
                "answer": answer,
                "sources": sources,
                "context_used": len(sources)
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
            return {
                "query": query,
                "error": str(e),
                "answer": None,
                "sources": [],
                "context_used": 0
            }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
rag_generator = RAGGenerator()

