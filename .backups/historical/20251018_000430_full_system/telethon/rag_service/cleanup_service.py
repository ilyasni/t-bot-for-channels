"""
Background cleanup –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤

Best practice: Context7 FastAPI background tasks + batch processing
–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ—Å—Ç—ã –≤ —Å—Ç–∞—Ç—É—Å–µ pending/failed –∏ –ø–æ—Å—Ç—ã –±–µ–∑ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
"""
import logging
import sys
import os
import asyncio
from datetime import datetime, timedelta, timezone
from typing import List

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ path
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from database import SessionLocal
from models import Post, IndexingStatus
from indexer import indexer_service

logger = logging.getLogger(__name__)


class CleanupService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤"""
    
    async def process_untagged_posts(self, limit: int = 50):
        """
        –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ—Å—Ç—ã –±–µ–∑ —Ç–µ–≥–æ–≤
        
        Args:
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        db = SessionLocal()
        try:
            # –ü–æ—Å—Ç—ã —Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞ –≤ —Å—Ç–∞—Ç—É—Å–µ pending/failed
            cutoff = datetime.now(timezone.utc) - timedelta(hours=1)
            
            posts = db.query(Post).filter(
                Post.tagging_status.in_(['pending', 'failed']),
                Post.parsed_at < cutoff,
                Post.text.isnot(None)
            ).limit(limit).all()
            
            if not posts:
                logger.info("‚úÖ –ù–µ—Ç –ø–æ—Å—Ç–æ–≤ –¥–ª—è —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è")
                return
            
            logger.info(f"üè∑Ô∏è –ó–∞–ø—É—Å–∫ —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è {len(posts)} –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤")
            
            # –í—ã–∑—ã–≤–∞–µ–º —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ HTTP API (–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–µ–µ)
            # –ò–∑–±–µ–≥–∞–µ–º –ø—Ä–æ–±–ª–µ–º —Å cross-service –∏–º–ø–æ—Ä—Ç–∞–º–∏
            import httpx
            post_ids = [p.id for p in posts]
            
            telethon_api_url = os.getenv("TELETHON_API_URL", "http://telethon:8010")
            
            # Sequential –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å rate limiting
            async with httpx.AsyncClient(timeout=300.0) as client:
                for post_id in post_ids:
                    try:
                        response = await client.post(
                            f"{telethon_api_url}/posts/{post_id}/generate_tags"
                        )
                        
                        if response.status_code == 200:
                            logger.debug(f"‚úÖ Post {post_id} —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω")
                        else:
                            logger.warning(f"‚ö†Ô∏è Post {post_id}: {response.status_code}")
                        
                        # –ó–∞–¥–µ—Ä–∂–∫–∞ —Å —É—á–µ—Ç–æ–º rate limit
                        await asyncio.sleep(1.5)
                        
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è post {post_id}: {e}")
            
            logger.info(f"‚úÖ –¢–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ {len(post_ids)} –ø–æ—Å—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤: {e}")
        finally:
            db.close()
    
    async def process_unindexed_posts(self, limit: int = 50):
        """
        –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ—Å—Ç—ã –±–µ–∑ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ –≤ Qdrant
        
        Args:
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        db = SessionLocal()
        try:
            # –ü–æ—Å—Ç—ã —Å —Ç–µ–≥–∞–º–∏ –Ω–æ –±–µ–∑ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º LEFT JOIN –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ—Å—Ç–æ–≤ –±–µ–∑ –∑–∞–ø–∏—Å–∏ –≤ indexing_status
            unindexed = db.query(Post).filter(
                Post.tags.isnot(None),
                ~Post.id.in_(
                    db.query(IndexingStatus.post_id)
                )
            ).limit(limit).all()
            
            if not unindexed:
                logger.info("‚úÖ –ù–µ—Ç –ø–æ—Å—Ç–æ–≤ –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏")
                return
            
            logger.info(f"üìä –ó–∞–ø—É—Å–∫ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ {len(unindexed)} –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤")
            
            post_ids = [p.id for p in unindexed]
            
            # Batch –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è
            await indexer_service.index_posts_batch(post_ids)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤: {e}")
        finally:
            db.close()
    
    async def get_backlog_stats(self) -> dict:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        db = SessionLocal()
        try:
            # –ü–æ—Å—Ç—ã –±–µ–∑ —Ç–µ–≥–æ–≤
            untagged_count = db.query(Post).filter(
                Post.tagging_status.in_(['pending', 'failed']),
                Post.text.isnot(None)
            ).count()
            
            # –ü–æ—Å—Ç—ã –±–µ–∑ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
            unindexed_count = db.query(Post).filter(
                Post.tags.isnot(None),
                ~Post.id.in_(
                    db.query(IndexingStatus.post_id)
                )
            ).count()
            
            # –ü–æ—Å—Ç—ã —Å –æ—à–∏–±–∫–∞–º–∏ —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            failed_tagging = db.query(Post).filter(
                Post.tagging_status == 'failed'
            ).count()
            
            # –ü–æ—Å—Ç—ã —Å –æ—à–∏–±–∫–∞–º–∏ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
            failed_indexing = db.query(IndexingStatus).filter(
                IndexingStatus.status == 'failed'
            ).count()
            
            return {
                "untagged_posts": untagged_count,
                "unindexed_posts": unindexed_count,
                "failed_tagging": failed_tagging,
                "failed_indexing": failed_indexing,
                "total_backlog": untagged_count + unindexed_count
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {}
        finally:
            db.close()


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
cleanup_service = CleanupService()

