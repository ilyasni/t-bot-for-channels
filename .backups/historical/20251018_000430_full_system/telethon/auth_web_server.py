"""
–í–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç HTTPS –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–¥–æ–≤ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
"""

import asyncio
import logging
from datetime import datetime, timezone
from typing import Dict, Any
from fastapi import FastAPI, HTTPException, Request, Depends
from fastapi.responses import HTMLResponse, JSONResponse
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from pydantic import BaseModel
import uvicorn
import os
from sqlalchemy.orm import Session

from database import get_db, SessionLocal
from models import User
from secure_auth_manager import secure_auth_manager

# –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
class AuthData(BaseModel):
    api_id: str
    api_hash: str
    phone: str
    session_id: str

class VerifyData(BaseModel):
    session_id: str
    code: str

class TwoFactorData(BaseModel):
    session_id: str
    password: str

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(
    title="Telegram Auth Server",
    description="–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ Telegram",
    version="1.0.0"
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤
templates = Jinja2Templates(directory="templates")

# –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
security = HTTPBearer(auto_error=False)

def get_auth_url() -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç URL –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    base_url = os.getenv("AUTH_BASE_URL", "https://localhost:8000")
    return f"{base_url}/auth"

@app.get("/", response_class=HTMLResponse)
async def root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    html_content = """
    <!DOCTYPE html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Telegram Authentication</title>
        <style>
            body {
                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                margin: 0;
                padding: 20px;
                min-height: 100vh;
                display: flex;
                align-items: center;
                justify-content: center;
            }
            .container {
                background: white;
                border-radius: 20px;
                padding: 40px;
                box-shadow: 0 20px 40px rgba(0,0,0,0.1);
                max-width: 500px;
                width: 100%;
                text-align: center;
            }
            .logo {
                font-size: 48px;
                margin-bottom: 20px;
            }
            h1 {
                color: #333;
                margin-bottom: 10px;
            }
            .subtitle {
                color: #666;
                margin-bottom: 30px;
                line-height: 1.6;
            }
            .warning {
                background: #fff3cd;
                border: 1px solid #ffeaa7;
                border-radius: 10px;
                padding: 15px;
                margin: 20px 0;
                color: #856404;
            }
            .info {
                background: #d1ecf1;
                border: 1px solid #bee5eb;
                border-radius: 10px;
                padding: 15px;
                margin: 20px 0;
                color: #0c5460;
            }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="logo">üîê</div>
            <h1>Telegram Authentication</h1>
            <p class="subtitle">
                –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ Telegram –±–æ—Ç–µ
            </p>
            
            <div class="warning">
                <strong>‚ö†Ô∏è –í–∞–∂–Ω–æ:</strong><br>
                –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –≤–≤–æ–¥–∏—Ç–µ –∫–æ–¥—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ Telegram —á–∞—Ç!<br>
                –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —ç—Ç–æ—Ç –∑–∞—â–∏—â–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å.
            </div>
            
            <div class="info">
                <strong>üí° –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</strong><br>
                1. –í –±–æ—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /auth<br>
                2. –ü–æ–ª—É—á–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É<br>
                3. –û—Ç–∫—Ä–æ–π—Ç–µ —Å—Å—ã–ª–∫—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ<br>
                4. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏<br>
                5. –ü–æ–ª—É—á–∏—Ç–µ –∫–æ–¥ –≤ Telegram –∏ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –∑–¥–µ—Å—å
            </div>
        </div>
    </body>
    </html>
    """
    return HTMLResponse(content=html_content)

@app.get("/auth", response_class=HTMLResponse)
async def auth_page(request: Request, sid: str = None):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    if not sid:
        return HTMLResponse(content="""
        <!DOCTYPE html>
        <html lang="ru">
        <head>
            <meta charset="UTF-8">
            <title>–û—à–∏–±–∫–∞</title>
            <style>
                body { font-family: Arial, sans-serif; text-align: center; padding: 50px; }
                .error { color: #e74c3c; background: #fdf2f2; padding: 20px; border-radius: 10px; }
            </style>
        </head>
        <body>
            <div class="error">
                <h2>‚ùå –û—à–∏–±–∫–∞</h2>
                <p>–ù–µ —É–∫–∞–∑–∞–Ω ID —Å–µ—Å—Å–∏–∏. –ü–æ–ª—É—á–∏—Ç–µ —Å—Å—ã–ª–∫—É –∏–∑ Telegram –±–æ—Ç–∞.</p>
            </div>
        </body>
        </html>
        """)
    
    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é
    session = await secure_auth_manager.validate_auth_session(sid)
    if not session:
        return HTMLResponse(content="""
        <!DOCTYPE html>
        <html lang="ru">
        <head>
            <meta charset="UTF-8">
            <title>–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞</title>
            <style>
                body { font-family: Arial, sans-serif; text-align: center; padding: 50px; }
                .error { color: #e74c3c; background: #fdf2f2; padding: 20px; border-radius: 10px; }
            </style>
        </head>
        <body>
            <div class="error">
                <h2>‚è∞ –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞</h2>
                <p>–í—Ä–µ–º—è —Å–µ—Å—Å–∏–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –∏–∑ –±–æ—Ç–∞.</p>
            </div>
        </body>
        </html>
        """)
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ñ–æ—Ä–º—É –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    html_content = f"""
    <!DOCTYPE html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Telegram Authentication</title>
        <style>
            body {{
                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                margin: 0;
                padding: 20px;
                min-height: 100vh;
                display: flex;
                align-items: center;
                justify-content: center;
            }}
            .container {{
                background: white;
                border-radius: 20px;
                padding: 40px;
                box-shadow: 0 20px 40px rgba(0,0,0,0.1);
                max-width: 500px;
                width: 100%;
            }}
            .logo {{
                font-size: 48px;
                text-align: center;
                margin-bottom: 20px;
            }}
            h1 {{
                color: #333;
                text-align: center;
                margin-bottom: 30px;
            }}
            .form-group {{
                margin-bottom: 20px;
            }}
            label {{
                display: block;
                margin-bottom: 5px;
                font-weight: 600;
                color: #333;
            }}
            input[type="text"], input[type="password"] {{
                width: 100%;
                padding: 12px;
                border: 2px solid #e1e5e9;
                border-radius: 10px;
                font-size: 16px;
                box-sizing: border-box;
                transition: border-color 0.3s;
            }}
            input[type="text"]:focus, input[type="password"]:focus {{
                outline: none;
                border-color: #667eea;
            }}
            button {{
                width: 100%;
                padding: 15px;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                border: none;
                border-radius: 10px;
                font-size: 16px;
                font-weight: 600;
                cursor: pointer;
                transition: transform 0.2s;
            }}
            button:hover {{
                transform: translateY(-2px);
            }}
            button:disabled {{
                opacity: 0.6;
                cursor: not-allowed;
                transform: none;
            }}
            .message {{
                padding: 15px;
                border-radius: 10px;
                margin-bottom: 20px;
                text-align: center;
            }}
            .success {{
                background: #d4edda;
                color: #155724;
                border: 1px solid #c3e6cb;
            }}
            .error {{
                background: #f8d7da;
                color: #721c24;
                border: 1px solid #f5c6cb;
            }}
            .info {{
                background: #d1ecf1;
                color: #0c5460;
                border: 1px solid #bee5eb;
            }}
            .hidden {{
                display: none;
            }}
            .step {{
                display: none;
            }}
            .step.active {{
                display: block;
            }}
        </style>
    </head>
    <body>
        <div class="container">
            <div class="logo">üîê</div>
            <h1>Telegram Authentication</h1>
            
            <div id="message"></div>
            
            <div id="step1" class="step active">
                <form id="authForm">
                    <input type="hidden" id="sessionId" value="{sid}">
                    
                    <div class="form-group">
                        <label for="apiId">API ID:</label>
                        <input type="text" id="apiId" name="api_id" required 
                               placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à API ID">
                    </div>
                    
                    <div class="form-group">
                        <label for="apiHash">API Hash:</label>
                        <input type="password" id="apiHash" name="api_hash" required 
                               placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à API Hash">
                    </div>
                    
                    <div class="form-group">
                        <label for="phone">–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</label>
                        <input type="text" id="phone" name="phone" required 
                               placeholder="+1234567890" pattern="^\\+[1-9]\\d{{1,14}}$">
                    </div>
                    
                    <button type="submit">–ù–∞—á–∞—Ç—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é</button>
                </form>
            </div>
            
            <div id="step2" class="step">
                <form id="codeForm">
                    <div class="form-group">
                        <label for="code">–ö–æ–¥ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:</label>
                        <input type="text" id="code" name="code" required 
                               placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ Telegram" maxlength="5">
                    </div>
                    
                    <button type="submit">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–¥</button>
                    <button type="button" onclick="goBack()" style="background: #6c757d; margin-top: 10px;">
                        –ù–∞–∑–∞–¥
                    </button>
                </form>
            </div>
            
            <div id="step2fa" class="step">
                <form id="twoFactorForm">
                    <div class="form-group">
                        <label for="password">–ü–∞—Ä–æ–ª—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:</label>
                        <input type="password" id="password" name="password" required 
                               placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å 2FA">
                    </div>
                    
                    <button type="submit">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–∞—Ä–æ–ª—å</button>
                    <button type="button" onclick="goBack()" style="background: #6c757d; margin-top: 10px;">
                        –ù–∞–∑–∞–¥
                    </button>
                </form>
            </div>
            
            <div id="step3" class="step">
                <div class="message success">
                    <h3>‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!</h3>
                    <p>–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞.</p>
                    <p>–ó–∞–∫—Ä–æ–π—Ç–µ —ç—Ç–æ –æ–∫–Ω–æ –∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ Telegram.</p>
                </div>
            </div>
        </div>
        
        <script>
            let currentSessionId = '{sid}';
            
            document.getElementById('authForm').addEventListener('submit', async function(e) {{
                e.preventDefault();
                
                const formData = new FormData(this);
                const data = Object.fromEntries(formData.entries());
                data.session_id = currentSessionId;
                
                showMessage('–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö...', 'info');
                
                try {{
                    const response = await fetch('/api/auth/process', {{
                        method: 'POST',
                        headers: {{
                            'Content-Type': 'application/json',
                        }},
                        body: JSON.stringify(data)
                    }});
                    
                    const result = await response.json();
                    
                    if (result.success) {{
                        if (result.requires_code) {{
                            showStep(2);
                            showMessage('–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', 'success');
                        }} else {{
                            showStep(3);
                        }}
                    }} else {{
                        showMessage(result.error || '–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏', 'error');
                    }}
                }} catch (error) {{
                    showMessage('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ' + error.message, 'error');
                }}
            }});
            
            document.getElementById('codeForm').addEventListener('submit', async function(e) {{
                e.preventDefault();
                
                const code = document.getElementById('code').value;
                
                showMessage('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞...', 'info');
                
                try {{
                    const response = await fetch('/api/auth/verify', {{
                        method: 'POST',
                        headers: {{
                            'Content-Type': 'application/json',
                        }},
                        body: JSON.stringify({{
                            session_id: currentSessionId,
                            code: code
                        }})
                    }});
                    
                    const result = await response.json();
                    
                    if (result.success) {{
                        if (result.requires_2fa) {{
                            showStep('2fa');
                            showMessage('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏', 'info');
                        }} else {{
                            showStep(3);
                        }}
                    }} else {{
                        showMessage(result.error || '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥', 'error');
                    }}
                }} catch (error) {{
                    showMessage('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ' + error.message, 'error');
                }}
            }});
            
            document.getElementById('twoFactorForm').addEventListener('submit', async function(e) {{
                e.preventDefault();
                
                const password = document.getElementById('password').value;
                
                showMessage('–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è 2FA...', 'info');
                
                try {{
                    const response = await fetch('/api/auth/2fa', {{
                        method: 'POST',
                        headers: {{
                            'Content-Type': 'application/json',
                        }},
                        body: JSON.stringify({{
                            session_id: currentSessionId,
                            password: password
                        }})
                    }});
                    
                    const result = await response.json();
                    
                    if (result.success) {{
                        showStep(3);
                    }} else {{
                        showMessage(result.error || '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å 2FA', 'error');
                    }}
                }} catch (error) {{
                    showMessage('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ' + error.message, 'error');
                }}
            }});
            
            function showStep(stepNumber) {{
                document.querySelectorAll('.step').forEach(step => {{
                    step.classList.remove('active');
                }});
                document.getElementById(`step${{stepNumber}}`).classList.add('active');
            }}
            
            function showMessage(text, type) {{
                const messageDiv = document.getElementById('message');
                messageDiv.className = `message ${{type}}`;
                messageDiv.textContent = text;
                messageDiv.style.display = 'block';
                
                if (type === 'success' || type === 'error') {{
                    setTimeout(() => {{
                        messageDiv.style.display = 'none';
                    }}, 5000);
                }}
            }}
            
            function goBack() {{
                showStep(1);
                document.getElementById('message').style.display = 'none';
            }}
        </script>
    </body>
    </html>
    """
    
    return HTMLResponse(content=html_content)

@app.post("/api/auth/process")
async def process_auth_data(auth_data: AuthData):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    try:
        logger.info(f"üîê –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è —Å–µ—Å—Å–∏–∏ {auth_data.session_id[:8]}...")
        
        result = await secure_auth_manager.process_auth_data(
            auth_data.session_id, auth_data.api_id, auth_data.api_hash, auth_data.phone
        )
        
        logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {result}")
        return JSONResponse(content=result)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {str(e)}")
        import traceback
        logger.error(f"‚ùå Traceback: {traceback.format_exc()}")
        
        return JSONResponse(
            status_code=500,
            content={
                'success': False,
                'error': f'–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}'
            }
        )

@app.post("/api/auth/verify")
async def verify_auth_code(verify_data: VerifyData):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    try:
        logger.info(f"üîê –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–æ–¥–∞ –¥–ª—è —Å–µ—Å—Å–∏–∏ {verify_data.session_id[:8]}...")
        
        result = await secure_auth_manager.verify_auth_code(verify_data.session_id, verify_data.code)
        
        logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {result}")
        return JSONResponse(content=result)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {str(e)}")
        import traceback
        logger.error(f"‚ùå Traceback: {traceback.format_exc()}")
        
        return JSONResponse(
            status_code=500,
            content={
                'success': False,
                'error': f'–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}'
            }
        )

@app.post("/api/auth/2fa")
async def verify_two_factor(two_factor_data: TwoFactorData):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    try:
        logger.info(f"üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ 2FA –¥–ª—è —Å–µ—Å—Å–∏–∏ {two_factor_data.session_id[:8]}...")
        
        result = await secure_auth_manager.verify_two_factor(
            two_factor_data.session_id, 
            two_factor_data.password
        )
        
        logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç 2FA: {result}")
        return JSONResponse(content=result)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ 2FA: {str(e)}")
        import traceback
        logger.error(f"‚ùå Traceback: {traceback.format_exc()}")
        
        return JSONResponse(
            status_code=500,
            content={
                'success': False,
                'error': f'–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}'
            }
        )

@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞"""
    return JSONResponse(content={
        'status': 'healthy',
        'timestamp': datetime.now(timezone.utc).isoformat(),
        'active_sessions': len(secure_auth_manager.auth_sessions),
        'active_clients': len(secure_auth_manager.active_clients)
    })

async def cleanup_task():
    """–ó–∞–¥–∞—á–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö —Å–µ—Å—Å–∏–π"""
    while True:
        try:
            await secure_auth_manager.cleanup_expired_sessions()
            await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Å—Å–∏–π: {str(e)}")
            await asyncio.sleep(60)

def start_auth_server(host: str = "0.0.0.0", port: int = 8000, ssl_cert: str = None, ssl_key: str = None):
    """–ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –æ—á–∏—Å—Ç–∫–∏ –≤ —Ñ–æ–Ω–µ
    asyncio.create_task(cleanup_task())
    
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–∞ {host}:{port}")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ SSL
    ssl_context = None
    if ssl_cert and ssl_key:
        import ssl
        ssl_context = ssl.SSLContext(ssl.PROTOCOL_TLS_SERVER)
        ssl_context.load_cert_chain(ssl_cert, ssl_key)
        logger.info("üîí SSL –≤–∫–ª—é—á–µ–Ω")
    else:
        logger.warning("‚ö†Ô∏è SSL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏!")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    uvicorn.run(
        app,
        host=host,
        port=port,
        ssl_context=ssl_context,
        log_level="info"
    )

if __name__ == "__main__":
    import argparse
    
    parser = argparse.ArgumentParser(description="Telegram Auth Web Server")
    parser.add_argument("--host", default="0.0.0.0", help="Host to bind to")
    parser.add_argument("--port", type=int, default=8000, help="Port to bind to")
    parser.add_argument("--ssl-cert", help="SSL certificate file")
    parser.add_argument("--ssl-key", help="SSL private key file")
    
    args = parser.parse_args()
    
    start_auth_server(
        host=args.host,
        port=args.port,
        ssl_cert=args.ssl_cert,
        ssl_key=args.ssl_key
    )
