"""
–¢–µ—Å—Ç—ã –¥–ª—è Group Digest Generator
–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤ –¥–∏–∞–ª–æ–≥–æ–≤ —á–µ—Ä–µ–∑ n8n workflows
"""

import pytest
from datetime import datetime, timezone, timedelta
from unittest.mock import AsyncMock, MagicMock, patch

from group_digest_generator import GroupDigestGenerator
from tests.utils.mocks import create_mock_telethon_message


@pytest.mark.unit
@pytest.mark.groups
class TestGroupDigestGenerator:
    """–¢–µ—Å—Ç—ã –¥–ª—è GroupDigestGenerator"""
    
    @pytest.fixture
    def digest_generator(self):
        """Fixture –¥–ª—è GroupDigestGenerator"""
        generator = GroupDigestGenerator()
        return generator
    
    @pytest.mark.asyncio
    async def test_generate_digest(self, digest_generator):
        """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞ —á–µ—Ä–µ–∑ n8n"""
        user_id = 1
        group_id = 1
        hours = 24
        
        # Mock —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≥—Ä—É–ø–ø—ã
        messages = [
            create_mock_telethon_message(
                text=f"Message {i} about technology",
                message_id=i,
                sender_username=f"user_{i % 3}"
            )
            for i in range(10)
        ]
        
        # Mock n8n response
        mock_n8n_response = {
            "summary": "–û–±—Å—É–∂–¥–∞–ª–∏—Å—å –Ω–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏",
            "topics": ["AI", "–±–ª–æ–∫—á–µ–π–Ω"],
            "key_speakers": ["alice", "bob"],
            "message_count": 10
        }
        
        # Mock httpx
        mock_response = MagicMock()
        mock_response.status_code = 200
        mock_response.json = MagicMock(return_value=mock_n8n_response)
        
        with patch('httpx.AsyncClient') as mock_httpx:
            mock_client = AsyncMock()
            mock_client.__aenter__ = AsyncMock(return_value=mock_client)
            mock_client.__aexit__ = AsyncMock()
            mock_client.post = AsyncMock(return_value=mock_response)
            mock_httpx.return_value = mock_client
            
            digest = await digest_generator.generate_digest(
                user_id, group_id, messages, hours
            )
            
            assert digest is not None
            assert 'summary' in digest
            assert 'topics' in digest
            assert digest['message_count'] == 10
    
    @pytest.mark.asyncio
    async def test_generate_digest_timeout_handling(self, digest_generator):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ timeout –æ—Ç n8n"""
        messages = [create_mock_telethon_message(text="Test")]
        
        # Mock timeout exception
        with patch('httpx.AsyncClient') as mock_httpx:
            mock_client = AsyncMock()
            mock_client.__aenter__ = AsyncMock(return_value=mock_client)
            mock_client.__aexit__ = AsyncMock()
            mock_client.post = AsyncMock(side_effect=TimeoutError())
            mock_httpx.return_value = mock_client
            
            # –î–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å timeout gracefully
            with pytest.raises(Exception):
                await digest_generator.generate_digest(1, 1, messages, 24)
    
    @pytest.mark.asyncio
    async def test_analyze_mention(self, digest_generator):
        """–¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —á–µ—Ä–µ–∑ n8n"""
        mentioned_user = "testuser"
        context_messages = [
            create_mock_telethon_message(
                text=f"Context message {i}",
                message_id=i
            )
            for i in range(5)
        ]
        
        # Mock n8n mention analyzer response
        mock_response_data = {
            "reason": "–ó–∞–ø—Ä–æ—Å–∏–ª–∏ –º–Ω–µ–Ω–∏–µ",
            "context": "–û–±—Å—É–∂–¥–µ–Ω–∏–µ AI —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π",
            "urgency": "medium"
        }
        
        mock_response = MagicMock()
        mock_response.status_code = 200
        mock_response.json = MagicMock(return_value=mock_response_data)
        
        with patch('httpx.AsyncClient') as mock_httpx:
            mock_client = AsyncMock()
            mock_client.__aenter__ = AsyncMock(return_value=mock_client)
            mock_client.__aexit__ = AsyncMock()
            mock_client.post = AsyncMock(return_value=mock_response)
            mock_httpx.return_value = mock_client
            
            analysis = await digest_generator.analyze_mention(
                mentioned_user, context_messages
            )
            
            assert analysis is not None
            assert analysis['reason'] == "–ó–∞–ø—Ä–æ—Å–∏–ª–∏ –º–Ω–µ–Ω–∏–µ"
            assert analysis['urgency'] == "medium"
    
    def test_format_digest_for_telegram(self, digest_generator):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞ –¥–ª—è Telegram"""
        digest = {
            "summary": "–¢–µ—Å—Ç–æ–≤–æ–µ —Ä–µ–∑—é–º–µ –¥–∏–∞–ª–æ–≥–∞",
            "topics": ["Topic 1", "Topic 2"],
            "key_speakers": ["Alice", "Bob"],
            "message_count": 25
        }
        
        formatted = digest_generator.format_digest_for_telegram(
            digest, "Test Group"
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Markdown formatting
        assert "Test Group" in formatted
        assert "–¢–µ—Å—Ç–æ–≤–æ–µ —Ä–µ–∑—é–º–µ" in formatted
        assert "Topic 1" in formatted
        assert "Alice" in formatted
        assert "25" in formatted
    
    def test_format_mention_for_telegram(self, digest_generator):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
        analysis = {
            "reason": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å",
            "context": "–û–±—Å—É–∂–¥–µ–Ω–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π",
            "urgency": "high"
        }
        
        formatted = digest_generator.format_mention_for_telegram(
            analysis,
            "Tech Chat",
            "https://t.me/c/123456/789"
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º formatting
        assert "Tech Chat" in formatted
        assert "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å" in formatted
        assert "üî¥" in formatted  # High urgency indicator

