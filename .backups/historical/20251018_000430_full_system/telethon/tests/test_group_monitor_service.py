"""
–¢–µ—Å—Ç—ã –¥–ª—è Group Monitor Service
Real-time –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ Telegram –≥—Ä—É–ø–ø–∞—Ö
"""

import pytest
from datetime import datetime, timezone
from unittest.mock import AsyncMock, MagicMock, patch

from group_monitor_service import GroupMonitorService
from tests.utils.factories import UserFactory, GroupFactory
from tests.utils.mocks import create_mock_telethon_client, create_mock_telethon_message


@pytest.mark.unit
@pytest.mark.groups
class TestGroupMonitorService:
    """–¢–µ—Å—Ç—ã –¥–ª—è GroupMonitorService"""
    
    @pytest.fixture
    def monitor_service(self):
        """Fixture –¥–ª—è GroupMonitorService"""
        service = GroupMonitorService()
        return service
    
    @pytest.mark.asyncio
    async def test_start_monitoring(self, monitor_service, db):
        """–¢–µ—Å—Ç –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user = UserFactory.create(
            db,
            telegram_id=23000001,
            is_authenticated=True
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É
        group = GroupFactory.create(db)
        group.add_user(db, user, is_active=True, mentions_enabled=True)
        
        # Mock Telethon client
        mock_client = create_mock_telethon_client()
        mock_client.on = MagicMock()  # Event decorator
        
        with patch('group_monitor_service.shared_auth_manager') as mock_auth:
            mock_auth.get_user_client = AsyncMock(return_value=mock_client)
            
            result = await monitor_service.start_monitoring(user.telegram_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω
            assert result is True
            assert user.telegram_id in monitor_service.active_monitors
    
    @pytest.mark.asyncio
    async def test_stop_monitoring(self, monitor_service):
        """–¢–µ—Å—Ç –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        telegram_id = 23100001
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–µ–π–∫–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –≤ active_monitors
        mock_client = create_mock_telethon_client()
        monitor_service.active_monitors[telegram_id] = mock_client
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
        await monitor_service.stop_monitoring(telegram_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ disconnect –≤—ã–∑–≤–∞–Ω
        mock_client.disconnect.assert_called_once()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ª–æ–≤–∞—Ä—è
        assert telegram_id not in monitor_service.active_monitors
    
    @pytest.mark.asyncio
    async def test_process_mention(self, monitor_service, db):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user = UserFactory.create(
            db,
            telegram_id=23200001,
            username="testuser"
        )
        group = GroupFactory.create(db, group_title="Test Group")
        group.add_user(db, user, mentions_enabled=True)
        
        # Mock Telegram event —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º
        mock_event = MagicMock()
        mock_event.message = create_mock_telethon_message(
            text="@testuser —á—Ç–æ –¥—É–º–∞–µ—à—å –æ –Ω–æ–≤–æ–π —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏?",
            message_id=123
        )
        mock_event.chat_id = group.group_id
        
        # Mock context messages
        context_messages = [
            create_mock_telethon_message(text=f"Context {i}", message_id=120 + i)
            for i in range(5)
        ]
        
        # Mock –º–µ—Ç–æ–¥—ã
        with patch.object(monitor_service, '_get_context_messages', return_value=context_messages), \
             patch('group_monitor_service.group_digest_generator') as mock_digest_gen, \
             patch.object(monitor_service, '_notify_user'):
            
            mock_digest_gen.analyze_mention = AsyncMock(return_value={
                "reason": "–ó–∞–ø—Ä–æ—Å –º–Ω–µ–Ω–∏—è",
                "context": "–û–±—Å—É–∂–¥–µ–Ω–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π",
                "urgency": "medium"
            })
            
            await monitor_service._process_mention(user.telegram_id, mock_event)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ analyze_mention –≤—ã–∑–≤–∞–Ω
            mock_digest_gen.analyze_mention.assert_called_once()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å –≤ –ë–î
            from models import GroupMention
            mention = db.query(GroupMention).filter(
                GroupMention.user_id == user.id
            ).first()
            
            # –ú–æ–∂–µ—Ç –±—ã—Ç—å None –µ—Å–ª–∏ –ë–î –Ω–µ –±—ã–ª–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ –≤ _process_mention
            # –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è unit —Ç–µ—Å—Ç–∞
    
    @pytest.mark.asyncio
    async def test_get_context_messages(self, monitor_service):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤–æ–∫—Ä—É–≥ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
        mock_client = create_mock_telethon_client()
        
        # Mock get_messages –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        context_msgs = [
            create_mock_telethon_message(text=f"Msg {i}", message_id=i)
            for i in range(100, 111)  # 11 —Å–æ–æ–±—â–µ–Ω–∏–π
        ]
        
        mock_client.get_messages = AsyncMock(return_value=context_msgs)
        
        result = await monitor_service._get_context_messages(
            client=mock_client,
            chat_id=-1001234567890,
            message_id=105,  # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            context_size=5
        )
        
        # –î–æ–ª–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å 11 —Å–æ–æ–±—â–µ–Ω–∏–π (5 –¥–æ + —Å–∞–º–æ —Å–æ–æ–±—â–µ–Ω–∏–µ + 5 –ø–æ—Å–ª–µ)
        assert len(result) == 11
    
    @pytest.mark.asyncio
    async def test_notify_user(self, monitor_service):
        """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        telegram_id = 23400001
        
        analysis = {
            "reason": "–í–∞—Å —É–ø–æ–º—è–Ω—É–ª–∏ –≤ –æ–±—Å—É–∂–¥–µ–Ω–∏–∏",
            "context": "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å",
            "urgency": "high"
        }
        
        mock_event = MagicMock()
        mock_event.message = MagicMock()
        mock_event.message.id = 123
        
        # Mock bot –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        with patch('group_monitor_service.Application') as mock_app:
            mock_bot = MagicMock()
            mock_bot.bot.send_message = AsyncMock()
            mock_app.builder.return_value.token.return_value.build.return_value = mock_bot
            
            # Mock group_digest_generator.format_mention_for_telegram
            with patch('group_monitor_service.group_digest_generator') as mock_gen:
                mock_gen.format_mention_for_telegram = MagicMock(
                    return_value="üì¢ Formatted mention notification"
                )
                
                await monitor_service._notify_user(
                    telegram_id,
                    analysis,
                    "Test Group",
                    mock_event
                )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º formatting –≤—ã–∑–≤–∞–Ω
                mock_gen.format_mention_for_telegram.assert_called_once()
    
    @pytest.mark.asyncio
    async def test_start_all_monitors(self, monitor_service, db):
        """–¢–µ—Å—Ç –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≥—Ä—É–ø–ø–∞–º–∏"""
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≥—Ä—É–ø–ø–∞–º–∏
        user1 = UserFactory.create(db, telegram_id=23500001, is_authenticated=True)
        user2 = UserFactory.create(db, telegram_id=23500002, is_authenticated=True)
        
        group = GroupFactory.create(db)
        group.add_user(db, user1, mentions_enabled=True)
        group.add_user(db, user2, mentions_enabled=True)
        
        # Mock start_monitoring
        with patch.object(monitor_service, 'start_monitoring', return_value=True):
            count = await monitor_service.start_all_monitors()
            
            # –î–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è –æ–±–æ–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            assert count == 2
            assert monitor_service.start_monitoring.call_count == 2
    
    def test_get_status(self, monitor_service):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–Ω–∏—Ç–æ—Ä–æ–≤
        monitor_service.active_monitors[23600001] = MagicMock()
        monitor_service.active_monitors[23600002] = MagicMock()
        
        status = monitor_service.get_status()
        
        assert status['active_monitors'] == 2
        assert 23600001 in status['monitored_users']
        assert 23600002 in status['monitored_users']

