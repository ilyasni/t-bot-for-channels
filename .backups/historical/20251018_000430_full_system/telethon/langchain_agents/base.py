"""
–ë–∞–∑–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã –¥–ª—è LangChain –∞–≥–µ–Ω—Ç–æ–≤

–û—Å–Ω–æ–≤–∞ –¥–ª—è –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π LCEL, –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ observability.
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç Pydantic structured output —Å retry logic.
"""

import logging
import asyncio
from abc import ABC, abstractmethod
from typing import Dict, Any, Optional, List, Type
from datetime import datetime, timezone

from langchain_core.runnables import Runnable
from langchain_core.prompts import ChatPromptTemplate
from langchain_core.output_parsers import PydanticOutputParser, StrOutputParser
from langchain_core.messages import HumanMessage, SystemMessage
from pydantic import BaseModel

from .config import config
from .observability import get_langfuse_config, log_agent_metrics


logger = logging.getLogger(__name__)


class BaseAgent(Runnable, ABC):
    """
    –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö LangChain –∞–≥–µ–Ω—Ç–æ–≤ —Å Pydantic structured output
    
    –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç:
    - LCEL chain composition —Å format instructions
    - Pydantic structured output —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
    - Retry logic –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö –ø–∞—Ä—Å–∏–Ω–≥–∞
    - Async execution —Å timeout
    - Structured logging
    - Error handling —Å fallback
    - Langfuse integration (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    """
    
    def __init__(
        self, 
        llm, 
        system_prompt: str,
        agent_name: str,
        output_model: Type[BaseModel],
        timeout: float = 30.0
    ):
        self.llm = llm
        self.system_prompt = system_prompt
        self.agent_name = agent_name
        self.timeout = timeout
        self.output_model = output_model
        
        # Structured output parser
        self.output_parser = PydanticOutputParser(pydantic_object=output_model)
        
        # LCEL chain —Å format instructions –∏ retry logic
        self.chain = self._build_chain()
        
        logger.info(f"ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∞–≥–µ–Ω—Ç: {self.agent_name}")
    
    def _build_chain(self) -> Runnable:
        """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å LCEL chain —Å format instructions"""
        prompt_template = ChatPromptTemplate.from_messages([
            ("system", self.system_prompt + "\n\n{format_instructions}"),
            ("human", "{user_message}")
        ])
        
        # –ë–∞–∑–æ–≤—ã–π chain
        return (
            prompt_template.partial(
                format_instructions=self.output_parser.get_format_instructions()
            )
            | self.llm
            | self.output_parser
        )
    
    @abstractmethod
    async def _process_input(self, input_data: Dict[str, Any]) -> str:
        """
        –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ user message
        
        Args:
            input_data: –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–≥–µ–Ω—Ç–∞
            
        Returns:
            –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ user message –¥–ª—è LLM
        """
        pass
    
    @abstractmethod
    async def _process_output(self, output: BaseModel, input_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ LLM (Pydantic –º–æ–¥–µ–ª—å)
        
        Args:
            output: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç LLM (Pydantic –º–æ–¥–µ–ª—å)
            input_data: –ò—Å—Ö–æ–¥–Ω—ã–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            
        Returns:
            –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–≥–µ–Ω—Ç–∞
        """
        pass
    
    async def ainvoke(self, input_data: Dict[str, Any], **kwargs) -> Dict[str, Any]:
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ –∞–≥–µ–Ω—Ç–∞ —Å –ø–æ–ª–Ω—ã–º pipeline
        
        Args:
            input_data: –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (callbacks, config)
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–∞
        """
        start_time = datetime.now(timezone.utc)
        
        try:
            logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–∞ {self.agent_name}")
            logger.debug(f"   –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {input_data}")
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ user_id –¥–ª—è observability
            user_id = input_data.get("user_id")
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ Langfuse –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            langfuse_config = get_langfuse_config(self.agent_name, user_id)
            if langfuse_config:
                kwargs.update(langfuse_config)
            
            # 1. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ user message
            user_message = await self._process_input(input_data)
            
            # 2. –í—ã–∑–æ–≤ LLM —Å timeout
            try:
                result = await asyncio.wait_for(
                    self.chain.ainvoke({"user_message": user_message}, **kwargs),
                    timeout=self.timeout
                )
            except asyncio.TimeoutError:
                logger.error(f"‚è∞ Timeout –∞–≥–µ–Ω—Ç–∞ {self.agent_name} ({self.timeout}s)")
                raise TimeoutError(f"Agent {self.agent_name} timeout after {self.timeout}s")
            
            # 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            processed_result = await self._process_output(result, input_data)
            
            # 4. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏ –º–µ—Ç—Ä–∏–∫
            end_time = datetime.now(timezone.utc)
            duration = (end_time - start_time).total_seconds()
            logger.info(f"‚úÖ –ê–≥–µ–Ω—Ç {self.agent_name} –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {duration:.2f}s")
            logger.debug(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {processed_result}")
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –≤ Langfuse
            log_agent_metrics(
                agent_name=self.agent_name,
                start_time=start_time,
                end_time=end_time,
                success=True,
                user_id=user_id,
                result=processed_result
            )
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏ Pydantic –æ–±—ä–µ–∫—Ç, –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            return {
                "pydantic_result": result,
                "processed_result": processed_result
            }
            
        except Exception as e:
            end_time = datetime.now(timezone.utc)
            duration = (end_time - start_time).total_seconds()
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≥–µ–Ω—Ç–∞ {self.agent_name} –∑–∞ {duration:.2f}s: {e}")
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –≤ Langfuse
            user_id = input_data.get("user_id")
            log_agent_metrics(
                agent_name=self.agent_name,
                start_time=start_time,
                end_time=end_time,
                success=False,
                user_id=user_id,
                error=e
            )
            
            # Fallback result
            return await self._handle_error(e, input_data)
    
    async def _handle_error(self, error: Exception, input_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å fallback —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        
        Args:
            error: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ
            input_data: –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            
        Returns:
            Fallback —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        """
        logger.warning(f"üîÑ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ fallback –¥–ª—è –∞–≥–µ–Ω—Ç–∞ {self.agent_name}")
        
        # –ë–∞–∑–æ–≤—ã–π fallback - –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        # –ö–∞–∂–¥—ã–π –∞–≥–µ–Ω—Ç –º–æ–∂–µ—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —ç—Ç–æ—Ç –º–µ—Ç–æ–¥
        return {"error": str(error), "fallback": True}
    
    def invoke(self, input_data: Dict[str, Any], **kwargs) -> Dict[str, Any]:
        """
        –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π wrapper –¥–ª—è ainvoke
        
        Args:
            input_data: –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–∞
        """
        return asyncio.run(self.ainvoke(input_data, **kwargs))


# HeuristicAgent —É–¥–∞–ª–µ–Ω - –≤—Å–µ –∞–≥–µ–Ω—Ç—ã —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É—é—Ç LLM