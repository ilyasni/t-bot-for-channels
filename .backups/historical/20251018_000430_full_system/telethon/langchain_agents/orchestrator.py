"""
Enhanced Digest Orchestrator - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –∞–≥–µ–Ω—Ç–æ–≤ —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º

–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è 9-–∞–≥–µ–Ω—Ç–Ω–æ–π sequential pipeline.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç LCEL –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤.

–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:
1. Dialogue Assessor (—ç–≤—Ä–∏—Å—Ç–∏–∫–∏) ‚Üí detail_level, dialogue_type
2. Topic Extractor (GigaChat) ‚Üí topics —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏
3. Emotion Analyzer (GigaChat-Pro) ‚Üí overall_tone, atmosphere
4. Speaker Analyzer (GigaChat-Pro) ‚Üí —Ä–æ–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
5. Context Summarizer (GigaChat-Pro) ‚Üí –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–µ —Ä–µ–∑—é–º–µ
6. Key Moments (GigaChat-Pro, conditional) ‚Üí —Ä–µ—à–µ–Ω–∏—è, –≤–æ–ø—Ä–æ—Å—ã
7. Timeline Builder (GigaChat-Pro, conditional) ‚Üí —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—è
8. Context Links (GigaChat, conditional) ‚Üí –∞–Ω–∞–ª–∏–∑ —Å—Å—ã–ª–æ–∫
9. Supervisor Synthesizer (GigaChat-Pro) ‚Üí —Ñ–∏–Ω–∞–ª—å–Ω—ã–π HTML –¥–∞–π–¥–∂–µ—Å—Ç
"""

import logging
import asyncio
from typing import Dict, Any, List, Optional
from datetime import datetime, timezone

from langchain_core.runnables import RunnableParallel, RunnableSequence

from .assessor import DialogueAssessorAgent
from .topic_extractor import TopicExtractorAgent
from .emotion_analyzer import EmotionAnalyzerAgent
from .speaker_analyzer import SpeakerAnalyzerAgent
from .summarizer import ContextSummarizerAgent
from .key_moments import KeyMomentsAgent
from .timeline import TimelineBuilderAgent
from .context_links import ContextLinksAgent
from .supervisor import SupervisorSynthesizerAgent
from .config import config
from .schemas import AgentStatus
from .observability import log_orchestrator_metrics


logger = logging.getLogger(__name__)


class DigestOrchestrator:
    """
    –û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –∞–≥–µ–Ω—Ç–æ–≤ LangChain
    
    –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç:
    - Sequential –∏ parallel execution –∞–≥–µ–Ω—Ç–æ–≤
    - Error handling —Å fallback
    - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–∂–¥–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
    - –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    - Langfuse integration (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    """
    
    def __init__(self):
        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Enhanced Digest Orchestrator")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤
        self.assessor = DialogueAssessorAgent()
        self.topic_extractor = TopicExtractorAgent()
        self.emotion_analyzer = EmotionAnalyzerAgent()
        self.speaker_analyzer = SpeakerAnalyzerAgent()
        self.summarizer = ContextSummarizerAgent()
        self.key_moments = KeyMomentsAgent()
        self.timeline = TimelineBuilderAgent()
        self.context_links = ContextLinksAgent()
        self.supervisor = SupervisorSynthesizerAgent()
        
        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∞ –∞–≥–µ–Ω—Ç–æ–≤
        self.agents_status: List[AgentStatus] = []
        
        logger.info("‚úÖ –í—Å–µ –∞–≥–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
    
    def _record_agent_status(self, agent_name: str, status: str, execution_time: float, 
                           error_message: Optional[str] = None, output_summary: Optional[str] = None):
        """–ó–∞–ø–∏—Å–∞—Ç—å —Å—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞"""
        agent_status = AgentStatus(
            agent_name=agent_name,
            status=status,
            execution_time=execution_time,
            error_message=error_message,
            output_summary=output_summary
        )
        self.agents_status.append(agent_status)
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        if status == "success":
            logger.info(f"‚úÖ {agent_name}: {output_summary} ({execution_time:.2f}s)")
        elif status == "error":
            logger.error(f"‚ùå {agent_name}: {error_message} ({execution_time:.2f}s)")
        elif status == "fallback":
            logger.warning(f"üîÑ {agent_name}: fallback used - {error_message} ({execution_time:.2f}s)")
    
    def _format_messages_for_analysis(self, messages: List[Any]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∞–≥–µ–Ω—Ç–∞–º–∏

        Args:
            messages: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π Telegram

        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞
        """
        formatted_lines = []

        for i, msg in enumerate(messages, 1):
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è
            if hasattr(msg, 'text') and msg.text:
                text = msg.text.strip()
            else:
                text = "[—Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞]"

            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ username
            username = "unknown"
            if hasattr(msg, 'sender') and msg.sender:
                if hasattr(msg.sender, 'username') and msg.sender.username:
                    username = msg.sender.username
                elif hasattr(msg.sender, 'first_name') and msg.sender.first_name:
                    username = msg.sender.first_name
                elif hasattr(msg.sender, 'id'):
                    username = f"user_{msg.sender.id}"

            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            timestamp = ""
            if hasattr(msg, 'date') and msg.date:
                timestamp = msg.date.strftime("%H:%M")

            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏
            if timestamp:
                line = f"[{i}] {username} ({timestamp}): {text}"
            else:
                line = f"[{i}] {username}: {text}"

            formatted_lines.append(line)

        logger.debug(f"–û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(formatted_lines)} —Å–æ–æ–±—â–µ–Ω–∏–π")
        return "\n".join(formatted_lines)

    async def _execute_agent_with_monitoring(self, agent, agent_name: str, input_data: Dict[str, Any]) -> Optional[Any]:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∞–≥–µ–Ω—Ç–∞ —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º"""
        start_time = asyncio.get_event_loop().time()
        
        try:
            # –ê–≥–µ–Ω—Ç —Ç–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å pydantic_result –∏ processed_result
            agent_output = await agent.ainvoke(input_data)
            pydantic_result = agent_output["pydantic_result"]
            processed_result = agent_output["processed_result"]

            execution_time = asyncio.get_event_loop().time() - start_time
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            output_summary = self._create_output_summary(agent_name, processed_result)
            
            self._record_agent_status(agent_name, "success", execution_time, output_summary=output_summary)
            return pydantic_result # –í–æ–∑–≤—Ä–∞—â–∞–µ–º Pydantic –æ–±—ä–µ–∫—Ç –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            
        except Exception as e:
            execution_time = asyncio.get_event_loop().time() - start_time
            error_msg = str(e)
            
            self._record_agent_status(agent_name, "error", execution_time, error_message=error_msg)
            logger.error(f"‚ùå –ê–≥–µ–Ω—Ç {agent_name} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {error_msg}")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∫–æ–¥–µ
            return None
    
    def _extract_agent_data(self, result: Any) -> tuple[Any, Any]:
        """–ò–∑–≤–ª–µ—á—å pydantic_result –∏ processed_result –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–≥–µ–Ω—Ç–∞"""
        if result is None:
            return None, None
            
        if isinstance(result, dict):
            if 'pydantic_result' in result and 'processed_result' in result:
                return result['pydantic_result'], result['processed_result']
            else:
                return None, result
        
        return result, None

    def _create_output_summary(self, agent_name: str, result: Any) -> str:
        """–°–æ–∑–¥–∞—Ç—å –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–≥–µ–Ω—Ç–∞"""
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            pydantic_result, processed_result = self._extract_agent_data(result)
            
            if agent_name == "dialogue_assessor":
                # –î–ª—è dialogue_assessor –∏—Å–ø–æ–ª—å–∑—É–µ–º processed_result (—ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–≥–µ–Ω—Ç)
                if processed_result and isinstance(processed_result, dict):
                    detail_level = processed_result.get('detail_level', 'unknown')
                    dialogue_type = processed_result.get('dialogue_type', 'unknown')
                elif pydantic_result:
                    detail_level = getattr(pydantic_result, 'detail_level', 'unknown')
                    dialogue_type = getattr(pydantic_result, 'dialogue_type', 'unknown')
                else:
                    detail_level = dialogue_type = 'unknown'
                return f"detail_level={detail_level}, dialogue_type={dialogue_type}"
            elif agent_name == "topic_extractor":
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º pydantic_result –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Ç–µ–º
                if pydantic_result and hasattr(pydantic_result, 'topics'):
                    topics_count = len(pydantic_result.topics)
                elif processed_result and isinstance(processed_result, dict):
                    topics_count = len(processed_result.get('topics', []))
                else:
                    topics_count = 0
                return f"–∏–∑–≤–ª–µ—á–µ–Ω–æ {topics_count} —Ç–µ–º"
            elif agent_name == "emotion_analyzer":
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º pydantic_result –¥–ª—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                if pydantic_result and hasattr(pydantic_result, 'overall_tone'):
                    tone = pydantic_result.overall_tone
                    atmosphere = pydantic_result.atmosphere
                elif processed_result and isinstance(processed_result, dict):
                    tone = processed_result.get('overall_tone', 'unknown')
                    atmosphere = processed_result.get('atmosphere', 'unknown')
                else:
                    tone = atmosphere = 'unknown'
                return f"—Ç–æ–Ω={tone}, –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞={atmosphere}"
            elif agent_name == "speaker_analyzer":
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º pydantic_result –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                if pydantic_result and hasattr(pydantic_result, 'speakers'):
                    speakers_count = len(pydantic_result.speakers)
                elif processed_result and isinstance(processed_result, dict):
                    speakers_count = len(processed_result.get('speakers', []))
                else:
                    speakers_count = 0
                return f"–ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {speakers_count} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"
            elif agent_name == "context_summarizer":
                if isinstance(result, dict):
                    summary = result.get('summary', {})
                    if isinstance(summary, dict):
                        points_count = len(summary.get('main_points', []))
                    else:
                        points_count = len(getattr(summary, 'main_points', []))
                else:
                    summary = getattr(result, 'summary', None)
                    if summary:
                        points_count = len(getattr(summary, 'main_points', []))
                    else:
                        points_count = 0
                return f"—Å–æ–∑–¥–∞–Ω–æ {points_count} –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤"
            elif agent_name == "key_moments":
                if isinstance(result, dict):
                    decisions_count = len(result.get('key_decisions', []))
                    questions_count = len(result.get('critical_questions', []))
                else:
                    decisions_count = len(getattr(result, 'key_decisions', []))
                    questions_count = len(getattr(result, 'critical_questions', []))
                return f"{decisions_count} —Ä–µ—à–µ–Ω–∏–π, {questions_count} –≤–æ–ø—Ä–æ—Å–æ–≤"
            elif agent_name == "timeline_builder":
                if isinstance(result, dict):
                    events_count = len(result.get('timeline_events', []))
                else:
                    events_count = len(getattr(result, 'timeline_events', []))
                return f"—Å–æ–∑–¥–∞–Ω–æ {events_count} —Å–æ–±—ã—Ç–∏–π"
            elif agent_name == "context_links":
                if isinstance(result, dict):
                    external_count = len(result.get('external_links', []))
                    telegram_count = len(result.get('telegram_links', []))
                else:
                    external_count = len(getattr(result, 'external_links', []))
                    telegram_count = len(getattr(result, 'telegram_links', []))
                return f"{external_count} –≤–Ω–µ—à–Ω–∏—Ö, {telegram_count} Telegram —Å—Å—ã–ª–æ–∫"
            elif agent_name == "supervisor_synthesizer":
                if isinstance(result, dict):
                    html_length = len(result.get('html_digest', ''))
                else:
                    html_length = len(getattr(result, 'html_digest', ''))
                return f"—Å–æ–∑–¥–∞–Ω –¥–∞–π–¥–∂–µ—Å—Ç {html_length} —Å–∏–º–≤–æ–ª–æ–≤ HTML"
            else:
                return "–≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ"
        except Exception as e:
            return f"—Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω (–æ—à–∏–±–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è: {str(e)})"
    
    async def generate_digest(
        self, 
        messages: List[Any], 
        hours: int = 24,
        user_id: Optional[int] = None,
        group_id: Optional[int] = None
    ) -> Dict[str, Any]:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞ –≥—Ä—É–ø–ø—ã —á–µ—Ä–µ–∑ LangChain –∞–≥–µ–Ω—Ç–æ–≤
        
        Args:
            messages: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π Telegram
            hours: –ü–µ—Ä–∏–æ–¥ –≤ —á–∞—Å–∞—Ö
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            group_id: ID –≥—Ä—É–ø–ø—ã
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞
        """
        start_time = asyncio.get_event_loop().time()
        
        logger.info(f"üéØ –ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã {group_id}")
        logger.info(f"   –°–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}")
        logger.info(f"   –ß–∞—Å–æ–≤: {hours}")
        logger.info(f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}")
        
        # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è –Ω–æ–≤–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞
        self.agents_status.clear()
        
        try:
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
            formatted_messages = self._format_messages_for_analysis(messages)
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            input_data = {
                "messages": formatted_messages,
                "hours": hours,
                "user_id": user_id,
                "group_id": group_id
            }
            
            # Phase 1: Dialogue Assessor (LLM-based –∞–Ω–∞–ª–∏–∑)
            logger.info("üìä Phase 1: Dialogue Assessor")
            assessment = await self._execute_agent_with_monitoring(
                self.assessor, "dialogue_assessor", input_data
            )
            if assessment:
                input_data["assessment"] = assessment
                # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π
                if isinstance(assessment, dict):
                    detail_level = assessment.get('detail_level', 'standard')
                    dialogue_type = assessment.get('dialogue_type', 'discussion')
                else:
                    detail_level = getattr(assessment, 'detail_level', 'standard')
                    dialogue_type = getattr(assessment, 'dialogue_type', 'discussion')
                logger.info(f"   –£—Ä–æ–≤–µ–Ω—å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏: {detail_level}")
                logger.info(f"   –¢–∏–ø –¥–∏–∞–ª–æ–≥–∞: {dialogue_type}")
            else:
                # Fallback –∑–Ω–∞—á–µ–Ω–∏—è
                assessment = {
                    'detail_level': 'standard',
                    'dialogue_type': 'discussion'
                }
                input_data["assessment"] = assessment
                logger.warning(f"   Fallback: detail_level=standard, dialogue_type=discussion")
            
            # Phase 2-3: Topics + Emotions (PARALLEL execution)
            logger.info("üîÑ Phase 2-3: Topics + Emotions (Parallel)")
            
            # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ Topics –∏ Emotions
            topics_task = asyncio.create_task(
                self._execute_agent_with_monitoring(self.topic_extractor, "topic_extractor", input_data)
            )
            emotions_task = asyncio.create_task(
                self._execute_agent_with_monitoring(self.emotion_analyzer, "emotion_analyzer", input_data)
            )
            
            topics, emotions = await asyncio.gather(topics_task, emotions_task)
            
            if topics:
                pydantic_topics, processed_topics = self._extract_agent_data(topics)
                input_data["topics"] = pydantic_topics if pydantic_topics else processed_topics
                topics_count = len(pydantic_topics.topics) if pydantic_topics and hasattr(pydantic_topics, 'topics') else 0
                logger.info(f"   –ò–∑–≤–ª–µ—á–µ–Ω–æ —Ç–µ–º: {topics_count}")
            else:
                logger.warning("   Topics: fallback (–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)")
                
            if emotions:
                pydantic_emotions, processed_emotions = self._extract_agent_data(emotions)
                input_data["emotions"] = pydantic_emotions if pydantic_emotions else processed_emotions
                tone = pydantic_emotions.overall_tone if pydantic_emotions and hasattr(pydantic_emotions, 'overall_tone') else 'unknown'
                logger.info(f"   –¢–æ–Ω: {tone}")
            else:
                logger.warning("   Emotions: fallback (–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)")
            
            # Phase 4: Speaker Analyzer
            logger.info("üë• Phase 4: Speaker Analyzer")
            speakers = await self._execute_agent_with_monitoring(
                self.speaker_analyzer, "speaker_analyzer", input_data
            )
            
            if speakers:
                pydantic_speakers, processed_speakers = self._extract_agent_data(speakers)
                input_data["speakers"] = pydantic_speakers if pydantic_speakers else processed_speakers
                speakers_count = len(pydantic_speakers.speakers) if pydantic_speakers and hasattr(pydantic_speakers, 'speakers') else 0
                logger.info(f"   –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {speakers_count}")
            else:
                logger.warning("   Speakers: fallback (–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)")
            
            # Phase 5: Context Summarizer
            logger.info("üìù Phase 5: Context Summarizer")
            summary = await self._execute_agent_with_monitoring(
                self.summarizer, "context_summarizer", input_data
            )
            
            if summary:
                pydantic_summary, processed_summary = self._extract_agent_data(summary)
                input_data["summary"] = pydantic_summary if pydantic_summary else processed_summary
                points_count = len(pydantic_summary.summary.main_points) if pydantic_summary and hasattr(pydantic_summary, 'summary') else 0
                logger.info(f"   –û—Å–Ω–æ–≤–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤: {points_count}")
            else:
                logger.warning("   Summary: fallback (–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)")
            
            # Phase 6: Key Moments (conditional)
            detail_level = assessment.get('detail_level', 'standard') if isinstance(assessment, dict) else getattr(assessment, 'detail_level', 'standard')
            if detail_level in ["detailed", "comprehensive"]:
                logger.info("üîë Phase 6: Key Moments")
                key_moments = await self._execute_agent_with_monitoring(
                    self.key_moments, "key_moments", input_data
                )
                
                if key_moments:
                    pydantic_key_moments, processed_key_moments = self._extract_agent_data(key_moments)
                    input_data["key_moments"] = pydantic_key_moments if pydantic_key_moments else processed_key_moments
                    decisions_count = len(pydantic_key_moments.key_decisions) if pydantic_key_moments and hasattr(pydantic_key_moments, 'key_decisions') else 0
                    questions_count = len(pydantic_key_moments.critical_questions) if pydantic_key_moments and hasattr(pydantic_key_moments, 'critical_questions') else 0
                    logger.info(f"   –†–µ—à–µ–Ω–∏–π: {decisions_count}, –í–æ–ø—Ä–æ—Å–æ–≤: {questions_count}")
                else:
                    logger.warning("   Key Moments: fallback (–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)")
            else:
                logger.info("‚è≠Ô∏è Phase 6: Key Moments (–ø—Ä–æ–ø—É—â–µ–Ω - —É—Ä–æ–≤–µ–Ω—å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∏–π)")
            
            # Phase 7: Timeline Builder (conditional)
            if detail_level in ["detailed", "comprehensive"]:
                logger.info("‚è∞ Phase 7: Timeline Builder")
                timeline = await self._execute_agent_with_monitoring(
                    self.timeline, "timeline_builder", input_data
                )
                
                if timeline:
                    pydantic_timeline, processed_timeline = self._extract_agent_data(timeline)
                    input_data["timeline"] = pydantic_timeline if pydantic_timeline else processed_timeline
                    events_count = len(pydantic_timeline.timeline_events) if pydantic_timeline and hasattr(pydantic_timeline, 'timeline_events') else 0
                    logger.info(f"   –°–æ–±—ã—Ç–∏–π: {events_count}")
                else:
                    logger.warning("   Timeline: fallback (–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)")
            else:
                logger.info("‚è≠Ô∏è Phase 7: Timeline Builder (–ø—Ä–æ–ø—É—â–µ–Ω - —É—Ä–æ–≤–µ–Ω—å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∏–π)")
            
            # Phase 8: Context Links (always)
            logger.info("üîó Phase 8: Context Links")
            context_links = await self._execute_agent_with_monitoring(
                self.context_links, "context_links", input_data
            )
            
            if context_links:
                pydantic_context_links, processed_context_links = self._extract_agent_data(context_links)
                input_data["context_links"] = pydantic_context_links if pydantic_context_links else processed_context_links
                external_count = len(pydantic_context_links.external_links) if pydantic_context_links and hasattr(pydantic_context_links, 'external_links') else 0
                telegram_count = len(pydantic_context_links.telegram_links) if pydantic_context_links and hasattr(pydantic_context_links, 'telegram_links') else 0
                logger.info(f"   –í–Ω–µ—à–Ω–∏—Ö —Å—Å—ã–ª–æ–∫: {external_count}, Telegram —Å—Å—ã–ª–æ–∫: {telegram_count}")
            else:
                logger.warning("   Context Links: fallback (–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)")
            
            # Phase 9: Supervisor Synthesizer (—Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∞–≥–µ–Ω—Ç)
            logger.info("üé≠ Phase 9: Supervisor Synthesizer")
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–æ–≤ –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            input_data["agents_status"] = self.agents_status
            
            final_digest = await self._execute_agent_with_monitoring(
                self.supervisor, "supervisor_synthesizer", input_data
            )
            
            if final_digest:
                # final_digest —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è Pydantic –æ–±—ä–µ–∫—Ç–æ–º (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∏–∑ _execute_agent_with_monitoring)
                final_result = final_digest
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–æ–≤ –≤ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                if isinstance(final_result, dict):
                    if 'metadata' in final_result and final_result['metadata']:
                        final_result['metadata']['agents_status'] = self.agents_status
                elif hasattr(final_result, 'metadata') and final_result.metadata:
                    final_result.metadata.agents_status = self.agents_status
                
                total_time = asyncio.get_event_loop().time() - start_time
                html_length = len(final_result.get('html_digest', '')) if isinstance(final_result, dict) else len(getattr(final_result, 'html_digest', ''))
                
                logger.info(f"‚úÖ –î–∞–π–¥–∂–µ—Å—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∑–∞ {total_time:.2f}s")
                logger.info(f"   –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {html_length} —Å–∏–º–≤–æ–ª–æ–≤")
                
                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø–æ –∞–≥–µ–Ω—Ç–∞–º
                self._log_agents_summary()
                
                return {
                    "success": True,
                    "digest": final_result,
                    "agents_status": self.agents_status,
                    "execution_time": total_time
                }
            else:
                raise Exception("Supervisor Synthesizer failed to generate digest")
                
        except Exception as e:
            total_time = asyncio.get_event_loop().time() - start_time
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {str(e)}")
            
            return {
                "success": False,
                "error": str(e),
                "agents_status": self.agents_status,
                "execution_time": total_time
            }
    
    def _log_agents_summary(self):
        """–õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–¥–∫—É –ø–æ —Å—Ç–∞—Ç—É—Å—É –∞–≥–µ–Ω—Ç–æ–≤"""
        logger.info("üìä –°–≤–æ–¥–∫–∞ –ø–æ –∞–≥–µ–Ω—Ç–∞–º:")
        
        success_count = sum(1 for status in self.agents_status if status.status == "success")
        error_count = sum(1 for status in self.agents_status if status.status == "error")
        fallback_count = sum(1 for status in self.agents_status if status.status == "fallback")
        
        logger.info(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}")
        logger.info(f"   ‚ùå –û—à–∏–±–∫–∏: {error_count}")
        logger.info(f"   üîÑ Fallback: {fallback_count}")
        
        # –î–µ—Ç–∞–ª–∏ –ø–æ –∞–≥–µ–Ω—Ç–∞–º —Å –æ—à–∏–±–∫–∞–º–∏
        failed_agents = [status for status in self.agents_status if status.status in ["error", "fallback"]]
        if failed_agents:
            logger.warning("   –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã:")
            for agent_status in failed_agents:
                logger.warning(f"     - {agent_status.agent_name}: {agent_status.error_message}")
    
    def get_agents_status(self) -> List[AgentStatus]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤"""
        return self.agents_status.copy()
