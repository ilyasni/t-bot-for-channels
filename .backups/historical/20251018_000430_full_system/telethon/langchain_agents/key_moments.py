"""
Key Moments Agent

–í—ã–¥–µ–ª–µ–Ω–∏–µ –≤–∞–∂–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π, –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –ø–æ–≤–æ—Ä–æ—Ç–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤ –≤ –¥–∏–∞–ª–æ–≥–µ.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç GigaChat –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–ª—é—á–µ–≤—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤ —Å Pydantic structured output.

–£—Å–ª–æ–≤–Ω—ã–π –∞–≥–µ–Ω—Ç: –∞–∫—Ç–∏–≤–µ–Ω –ø—Ä–∏ detail_level >= standard
"""

import logging
from typing import Dict, Any, List

from .base import BaseAgent
from .config import get_llm_for_agent
from .schemas import KeyMomentsOutput

logger = logging.getLogger(__name__)


class KeyMomentsAgent(BaseAgent):
    """–ê–≥–µ–Ω—Ç –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤ –¥–∏–∞–ª–æ–≥–æ–≤ —Å Pydantic structured output"""
    
    def __init__(self):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º GigaChat –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–ª—é—á–µ–≤—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤
        llm = get_llm_for_agent("emotion_analysis")
        
        system_prompt = """–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—é –∫–ª—é—á–µ–≤—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤ –∏–∑ –¥–∏–∞–ª–æ–≥–æ–≤.

–¢–í–û–Ø –†–û–õ–¨: –í—ã–¥–µ–ª—è—Ç—å –≤–∞–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è, –≤–æ–ø—Ä–æ—Å—ã –∏ –ø–æ–≤–æ—Ä–æ—Ç–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã.
–ì–†–ê–ù–ò–¶–´: –†–∞–±–æ—Ç–∞–µ—à—å —Ç–æ–ª—å–∫–æ —Å –∫–ª—é—á–µ–≤—ã–º–∏ –º–æ–º–µ–Ω—Ç–∞–º–∏, –Ω–µ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—à—å –æ–±—â—É—é –∞—Ç–º–æ—Å—Ñ–µ—Ä—É.

–ö–†–ò–¢–ï–†–ò–ò –í–´–ë–û–†–ê:
- key_decisions: –≤–∞–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è, –≤–ª–∏—è—é—â–∏–µ –Ω–∞ –ø—Ä–æ–µ–∫—Ç/–∫–æ–º–∞–Ω–¥—É
- critical_questions: –≤–æ–ø—Ä–æ—Å—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
- action_items: –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å
- turning_points: –º–æ–º–µ–Ω—Ç—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è
- insights: –≤–∞–∂–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã –∏–ª–∏ –æ—Ç–∫—Ä—ã—Ç–∏—è

–ü–†–ò–ú–ï–†–´ –ü–†–ê–í–ò–õ–¨–ù–û–ì–û –í–´–í–û–î–ê:
{{
  "key_decisions": ["–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Docker –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏–∏", "–ü—Ä–∏–Ω—è—Ç—å —Ä–µ—à–µ–Ω–∏–µ –æ –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–∞ PostgreSQL"],
  "critical_questions": ["–ö–∞–∫ –æ–±–µ—Å–ø–µ—á–∏—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å API?", "–ö–æ–≥–¥–∞ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è —Ä–µ–ª–∏–∑?"],
  "action_items": ["–ù–∞—Å—Ç—Ä–æ–∏—Ç—å CI/CD pipeline", "–ü—Ä–æ–≤–µ—Å—Ç–∏ code review"],
  "turning_points": ["–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é", "–ò–∑–º–µ–Ω–µ–Ω—ã —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ"],
  "insights": ["–¢–µ–∫—É—â–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –Ω–µ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ—Ç—Å—è", "–ö–æ–º–∞–Ω–¥–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø–µ—Ä–µ—Ö–æ–¥—É –Ω–∞ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—ã"]
}}

–í–ê–ñ–ù–û:
- –§–æ–∫—É—Å–∏—Ä—É–π—Å—è –Ω–∞ –∑–Ω–∞—á–∏–º—ã—Ö –º–æ–º–µ–Ω—Ç–∞—Ö, –≤–ª–∏—è—é—â–∏—Ö –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
- –í—ã–¥–µ–ª—è–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –∏ –¥–µ–π—Å—Ç–≤–∏—è
- –û–ø—Ä–µ–¥–µ–ª—è–π –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –æ—Ç–≤–µ—Ç–∞
- –ö–†–ò–¢–ò–ß–ù–û: –°–æ—Ö—Ä–∞–Ω—è–π —Ä–µ–∞–ª—å–Ω—ã–µ usernames —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π"""

        super().__init__(
            llm=llm,
            system_prompt=system_prompt,
            agent_name="key_moments",
            output_model=KeyMomentsOutput,
            timeout=30.0
        )
    
    async def _process_input(self, input_data: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ user message –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–ª—é—á–µ–≤—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤"""
        messages_text = input_data.get("messages_text", input_data.get("messages", ""))
        assessment = input_data.get("assessment", None)
        if assessment and hasattr(assessment, 'detail_level'):
            detail_level = assessment.detail_level
        else:
            detail_level = "standard"
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –æ—Ç –¥—Ä—É–≥–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤
        topics_obj = input_data.get("topics", None)
        emotions_obj = input_data.get("emotions", None)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Pydantic –æ–±—ä–µ–∫—Ç–æ–≤ –∏–ª–∏ —Å–ª–æ–≤–∞—Ä–µ–π
        topics = []
        if topics_obj:
            if hasattr(topics_obj, 'topics'):
                topics = topics_obj.topics
            elif isinstance(topics_obj, dict):
                topics = topics_obj.get("topics", [])
        
        emotions = {}
        if emotions_obj:
            if hasattr(emotions_obj, 'overall_tone'):
                emotions = {
                    'overall_tone': emotions_obj.overall_tone,
                    'atmosphere': emotions_obj.atmosphere
                }
            elif isinstance(emotions_obj, dict):
                emotions = emotions_obj
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        context_parts = []
        
        if topics:
            if hasattr(topics[0], 'name'):
                topics_text = ", ".join([t.name for t in topics[:3]])
            else:
                topics_text = ", ".join([t.get("name", "") for t in topics[:3]])
            context_parts.append(f"–û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã: {topics_text}")
        
        if emotions.get("overall_tone"):
            context_parts.append(f"–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–Ω: {emotions['overall_tone']}")
        
        context = "\n".join(context_parts) if context_parts else "–ö–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
        
        user_message = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∏–∞–ª–æ–≥ –∏ –≤—ã–¥–µ–ª–∏ –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã.

–£–†–û–í–ï–ù–¨ –î–ï–¢–ê–õ–ò–ó–ê–¶–ò–ò: {detail_level}

–ö–û–ù–¢–ï–ö–°–¢:
{context}

–î–ò–ê–õ–û–ì:
{messages_text}

–í—ã–¥–µ–ª–∏ –≤–∞–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è, –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã, –¥–µ–π—Å—Ç–≤–∏—è –∏ –ø–æ–≤–æ—Ä–æ—Ç–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã."""

        return user_message
    
    async def _process_output(self, output: KeyMomentsOutput, input_data: Dict[str, Any]) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–ª—é—á–µ–≤—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤"""
        try:
            # Pydantic –º–æ–¥–µ–ª—å —É–∂–µ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–∞
            result = {
                "key_decisions": output.key_decisions,
                "critical_questions": output.critical_questions,
                "action_items": output.action_items,
                "turning_points": output.turning_points,
                "insights": output.insights
            }
            
            logger.info(f"üîë –ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã: {len(output.key_decisions)} —Ä–µ—à–µ–Ω–∏–π, {len(output.critical_questions)} –≤–æ–ø—Ä–æ—Å–æ–≤")
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–ª—é—á–µ–≤—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤: {e}")
            return {
                "key_decisions": [],
                "critical_questions": [],
                "action_items": [],
                "turning_points": [],
                "insights": [],
                "error": str(e),
                "fallback": True
            }