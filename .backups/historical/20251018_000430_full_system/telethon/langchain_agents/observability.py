"""
Observability –¥–ª—è LangChain –∞–≥–µ–Ω—Ç–æ–≤

–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Langfuse –¥–ª—è —Ç—Ä–µ–π—Å–∏–Ω–≥–∞ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–æ–≤.
"""

import logging
import os
from typing import Dict, Any, Optional, List
from datetime import datetime, timezone

from .config import config


logger = logging.getLogger(__name__)


class LangfuseObserver:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Langfuse –¥–ª—è observability
    
    –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç:
    - –¢—Ä–µ–π—Å–∏–Ω–≥ –≤—ã–∑–æ–≤–æ–≤ –∞–≥–µ–Ω—Ç–æ–≤
    - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    - –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
    - –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    """
    
    def __init__(self):
        self.enabled = self._check_langfuse_availability()
        self.callback_handler = None
        
        if self.enabled:
            try:
                from langfuse.callback import CallbackHandler as LangfuseCallback
                self.callback_handler = LangfuseCallback(
                    public_key=config.LANGFUSE_PUBLIC_KEY,
                    secret_key=config.LANGFUSE_SECRET_KEY,
                    host=config.LANGFUSE_HOST
                )
                logger.info("‚úÖ Langfuse observer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            except ImportError as e:
                logger.warning(f"‚ö†Ô∏è Langfuse –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
                self.enabled = False
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Langfuse: {e}")
                self.enabled = False
        else:
            logger.info("‚ÑπÔ∏è Langfuse observer –æ—Ç–∫–ª—é—á–µ–Ω")
    
    def _check_langfuse_availability(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Langfuse"""
        return (
            bool(config.LANGFUSE_PUBLIC_KEY) and 
            bool(config.LANGFUSE_SECRET_KEY) and
            bool(config.LANGFUSE_HOST)
        )
    
    def get_callback_config(self, agent_name: str, user_id: Optional[int] = None) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ callback –¥–ª—è LangChain
        
        Args:
            agent_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            Dict —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π callbacks
        """
        if not self.enabled or not self.callback_handler:
            return {}
        
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ callback handler –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤—ã–∑–æ–≤–∞
            from langfuse.callback import CallbackHandler as LangfuseCallback
            
            callback_handler = LangfuseCallback(
                public_key=config.LANGFUSE_PUBLIC_KEY,
                secret_key=config.LANGFUSE_SECRET_KEY,
                host=config.LANGFUSE_HOST,
                session_id=f"telegram_bot_{user_id}" if user_id else "telegram_bot",
                user_id=str(user_id) if user_id else None,
                tags=[agent_name, "telegram_bot", "group_digest"]
            )
            
            return {
                "callbacks": [callback_handler],
                "metadata": {
                    "agent_name": agent_name,
                    "user_id": user_id,
                    "timestamp": datetime.now(timezone.utc).isoformat()
                }
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Langfuse callback: {e}")
            return {}
    
    def log_agent_start(self, agent_name: str, input_data: Dict[str, Any], user_id: Optional[int] = None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–∞"""
        if not self.enabled:
            return
        
        logger.info(f"üîç Langfuse: –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–∞ {agent_name}")
        logger.debug(f"   User ID: {user_id}")
        logger.debug(f"   Input keys: {list(input_data.keys())}")
    
    def log_agent_completion(
        self, 
        agent_name: str, 
        result: Dict[str, Any], 
        duration: float,
        user_id: Optional[int] = None
    ):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–∞"""
        if not self.enabled:
            return
        
        logger.info(f"‚úÖ Langfuse: –ê–≥–µ–Ω—Ç {agent_name} –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {duration:.2f}s")
        logger.debug(f"   User ID: {user_id}")
        logger.debug(f"   Result keys: {list(result.keys())}")
    
    def log_agent_error(
        self, 
        agent_name: str, 
        error: Exception, 
        duration: float,
        user_id: Optional[int] = None
    ):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –∞–≥–µ–Ω—Ç–∞"""
        if not self.enabled:
            return
        
        logger.error(f"‚ùå Langfuse: –û—à–∏–±–∫–∞ –∞–≥–µ–Ω—Ç–∞ {agent_name} –∑–∞ {duration:.2f}s: {error}")
        logger.debug(f"   User ID: {user_id}")
    
    def log_orchestrator_start(self, user_id: int, group_id: int, message_count: int):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        if not self.enabled:
            return
        
        logger.info(f"üéØ Langfuse: –ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞")
        logger.info(f"   User ID: {user_id}")
        logger.info(f"   Group ID: {group_id}")
        logger.info(f"   Messages: {message_count}")
    
    def log_orchestrator_completion(
        self, 
        result: Dict[str, Any], 
        duration: float,
        user_id: int,
        group_id: int
    ):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        if not self.enabled:
            return
        
        agents_executed = result.get("agent_statistics", {}).get("agents_executed", 0)
        detail_level = result.get("agent_statistics", {}).get("detail_level", "unknown")
        
        logger.info(f"üéâ Langfuse: –î–∞–π–¥–∂–µ—Å—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∑–∞ {duration:.2f}s")
        logger.info(f"   User ID: {user_id}")
        logger.info(f"   Group ID: {group_id}")
        logger.info(f"   Agents executed: {agents_executed}")
        logger.info(f"   Detail level: {detail_level}")
    
    def log_orchestrator_error(
        self, 
        error: Exception, 
        duration: float,
        user_id: int,
        group_id: int
    ):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        if not self.enabled:
            return
        
        logger.error(f"üí• Langfuse: –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –∑–∞ {duration:.2f}s: {error}")
        logger.error(f"   User ID: {user_id}")
        logger.error(f"   Group ID: {group_id}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä observer
langfuse_observer = LangfuseObserver()


def get_langfuse_config(agent_name: str, user_id: Optional[int] = None) -> Dict[str, Any]:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Langfuse –¥–ª—è –∞–≥–µ–Ω—Ç–∞
    
    Args:
        agent_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        Dict —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
    """
    return langfuse_observer.get_callback_config(agent_name, user_id)


def log_agent_metrics(
    agent_name: str,
    start_time: datetime,
    end_time: datetime,
    success: bool,
    user_id: Optional[int] = None,
    error: Optional[Exception] = None,
    result: Optional[Dict[str, Any]] = None
):
    """
    –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –∞–≥–µ–Ω—Ç–∞
    
    Args:
        agent_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞
        start_time: –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
        end_time: –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        success: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        error: –û—à–∏–±–∫–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        result: –†–µ–∑—É–ª—å—Ç–∞—Ç (–µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ)
    """
    duration = (end_time - start_time).total_seconds()
    
    if success and result:
        langfuse_observer.log_agent_completion(agent_name, result, duration, user_id)
    else:
        langfuse_observer.log_agent_error(agent_name, error or Exception("Unknown error"), duration, user_id)


def log_orchestrator_metrics(
    start_time: datetime,
    end_time: datetime,
    success: bool,
    user_id: int,
    group_id: int,
    error: Optional[Exception] = None,
    result: Optional[Dict[str, Any]] = None
):
    """
    –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    
    Args:
        start_time: –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
        end_time: –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        success: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        group_id: ID –≥—Ä—É–ø–ø—ã
        error: –û—à–∏–±–∫–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        result: –†–µ–∑—É–ª—å—Ç–∞—Ç (–µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ)
    """
    duration = (end_time - start_time).total_seconds()
    
    if success and result:
        langfuse_observer.log_orchestrator_completion(result, duration, user_id, group_id)
    else:
        langfuse_observer.log_orchestrator_error(error or Exception("Unknown error"), duration, user_id, group_id)
