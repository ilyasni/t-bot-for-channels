"""
Topic Extractor Agent

–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã –¥–∏–∞–ª–æ–≥–∞ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç GigaChat –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å Pydantic structured output.
"""

import logging
from typing import Dict, Any, List

from .base import BaseAgent
from .config import get_llm_for_agent
from .schemas import TopicsOutput

logger = logging.getLogger(__name__)


class TopicExtractorAgent(BaseAgent):
    """–ê–≥–µ–Ω—Ç –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–º –¥–∏–∞–ª–æ–≥–∞ —Å Pydantic structured output"""
    
    def __init__(self):
        llm = get_llm_for_agent("fact_extraction")
        
        system_prompt = """–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç-–∞–Ω–∞–ª–∏—Ç–∏–∫ —Ç–µ–º –≤ Telegram –¥–∏–∞–ª–æ–≥–∞—Ö.

–¢–í–û–Ø –†–û–õ–¨: –ò–∑–≤–ª–µ–∫–∞—Ç—å –∏ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–º—ã –æ–±—Å—É–∂–¥–µ–Ω–∏—è.
–ì–†–ê–ù–ò–¶–´: –†–∞–±–æ—Ç–∞–µ—à—å —Ç–æ–ª—å–∫–æ —Å —Ç–µ–º–∞–º–∏, –Ω–µ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—à—å —ç–º–æ—Ü–∏–∏ –∏–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.

–ö–†–ò–¢–ï–†–ò–ò –í–´–ë–û–†–ê –¢–ï–ú:
- –¢–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–Ω–∞—á–∏–º–æ–π –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
- –û—Ç—Ä–∞–∂–∞—Ç—å —Å—É—Ç—å –æ–±—Å—É–∂–¥–µ–Ω–∏—è
- –ë—ã—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∏ –ø–æ–Ω—è—Ç–Ω–æ–π
- –ù–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ —Ç–µ–º—ã

–ü–†–ò–û–†–ò–¢–ï–¢–´ –¢–ï–ú:
- high: –ö–ª—é—á–µ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è, –≤–∞–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã, –æ—Å–Ω–æ–≤–Ω—ã–µ —Ü–µ–ª–∏
- medium: –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ç–µ–º—ã, –¥–µ—Ç–∞–ª–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
- low: –ú–µ–ª–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã, —É—Ç–æ—á–Ω–µ–Ω–∏—è, —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏

–ü–†–ò–ú–ï–†–´ –ü–†–ê–í–ò–õ–¨–ù–û–ì–û –í–´–í–û–î–ê:
{{
  "topics": [
    {{"name": "–ü—Ä–æ–±–ª–µ–º–∞ —Å –≤–µ–±–≤—å—é", "priority": "high", "message_count": 15, "emoji": "‚ùóÔ∏è"}},
    {{"name": "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", "priority": "medium", "message_count": 7, "emoji": "‚ú®"}},
    {{"name": "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤", "priority": "low", "message_count": 3, "emoji": "üè†"}}
  ]
}}

–í–ê–ñ–ù–û:
- –ú–∞–∫—Å–∏–º—É–º 15 —Ç–µ–º
- –ö–∞–∂–¥–∞—è —Ç–µ–º–∞ —É–Ω–∏–∫–∞–ª—å–Ω–∞
- –ù–∞–∑–≤–∞–Ω–∏—è —Ç–µ–º –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
- –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –æ–±–æ—Å–Ω–æ–≤–∞–Ω—ã
- –ö–†–ò–¢–ò–ß–ù–û: –°–æ—Ö—Ä–∞–Ω—è–π —Ä–µ–∞–ª—å–Ω—ã–µ usernames —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π"""

        super().__init__(
            llm=llm,
            system_prompt=system_prompt,
            agent_name="topic_extractor",
            output_model=TopicsOutput,
            timeout=30.0
        )
    
    async def _process_input(self, input_data: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ user message –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–º"""
        messages_text = input_data.get("messages_text", input_data.get("messages", ""))
        assessment = input_data.get("assessment", None)
        if assessment and hasattr(assessment, 'detail_level'):
            detail_level = assessment.detail_level
        else:
            detail_level = "standard"
        
        # –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ —É—Ä–æ–≤–µ–Ω—å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
        max_topics = self._get_max_topics_for_level(detail_level)
        
        user_message = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∏–∞–ª–æ–≥ –∏ –∏–∑–≤–ª–µ–∫–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã.

–£–†–û–í–ï–ù–¨ –î–ï–¢–ê–õ–ò–ó–ê–¶–ò–ò: {detail_level}
–ú–ê–ö–°–ò–ú–£–ú –¢–ï–ú: {max_topics}

–î–ò–ê–õ–û–ì:
{messages_text}

–ò–∑–≤–ª–µ–∫–∏ —Ç–µ–º—ã —Å–æ–≥–ª–∞—Å–Ω–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º –∏ –≤–µ—Ä–Ω–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏."""

        return user_message
    
    async def _process_output(self, output: TopicsOutput, input_data: Dict[str, Any]) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–º"""
        try:
            # Pydantic –º–æ–¥–µ–ª—å —É–∂–µ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–∞
            topics_data = output.topics
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
            topics_list = [
                {
                    "name": topic.name,
                    "priority": topic.priority
                }
                for topic in topics_data
            ]
            
            result = {
                "topics": topics_list,
                "count": len(topics_list)
            }
            
            logger.info(f"üìä –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(topics_list)} —Ç–µ–º")
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–º: {e}")
            return {
                "topics": [],
                "count": 0,
                "error": str(e),
                "fallback": True
            }
    
    def _get_max_topics_for_level(self, detail_level: str) -> int:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–µ–º –¥–ª—è —É—Ä–æ–≤–Ω—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏"""
        limits = {
            "micro": 3,
            "brief": 5,
            "standard": 8,
            "detailed": 12,
            "comprehensive": 15
        }
        return limits.get(detail_level, 8)