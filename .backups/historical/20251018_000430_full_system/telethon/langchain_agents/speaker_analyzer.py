"""
Speaker Analyzer Agent

–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–æ–ª–µ–π, –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –≤–∫–ª–∞–¥–∞ –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –¥–∏–∞–ª–æ–≥.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç GigaChat –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å Pydantic structured output.

–í–ê–ñ–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ usernames, –Ω–µ –∑–∞–º–µ–Ω—è–µ—Ç –Ω–∞ user1, user2!
"""

import logging
from typing import Dict, Any, List
from collections import Counter

from .base import BaseAgent
from .config import get_llm_for_agent
from .schemas import SpeakersOutput

logger = logging.getLogger(__name__)


class SpeakerAnalyzerAgent(BaseAgent):
    """–ê–≥–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–æ–ª–µ–π —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–∏–∞–ª–æ–≥–æ–≤ —Å Pydantic structured output"""
    
    def __init__(self):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º GigaChat –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–æ–ª–µ–π (—Ç–≤–æ—Ä—á–µ—Å–∫–∏–π –ø–æ–¥—Ö–æ–¥)
        llm = get_llm_for_agent("emotion_analysis")
        
        system_prompt = """–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É —Ä–æ–ª–µ–π —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –¥–∏–∞–ª–æ–≥–∞—Ö.

–¢–í–û–Ø –†–û–õ–¨: –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–æ–ª–∏ –∏ –≤–∫–ª–∞–¥ –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞.
–ì–†–ê–ù–ò–¶–´: –†–∞–±–æ—Ç–∞–µ—à—å —Ç–æ–ª—å–∫–æ —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏, –Ω–µ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—à—å —Ç–µ–º—ã –∏–ª–∏ —ç–º–æ—Ü–∏–∏.

–ö–†–ò–¢–ò–ß–ù–û: –°–æ—Ö—Ä–∞–Ω—è–π —Ä–µ–∞–ª—å–Ω—ã–µ usernames —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π!
–ù–ï –∑–∞–º–µ–Ω—è–π –Ω–∞ user1, user2, unknown –∏–ª–∏ –¥—Ä—É–≥–∏–µ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –∏–º–µ–Ω–∞.

–ö–†–ò–¢–ï–†–ò–ò –ê–ù–ê–õ–ò–ó–ê:
- role: —Ä–æ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –¥–∏–∞–ª–æ–≥–µ
- activity_level: —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
- contribution_types: —Ç–∏–ø—ã –≤–∫–ª–∞–¥–∞
- key_contributions: –∫–ª—é—á–µ–≤—ã–µ –≤–∫–ª–∞–¥—ã

–ü–†–ò–ú–ï–†–´ –ü–†–ê–í–ò–õ–¨–ù–û–ì–û –í–´–í–û–î–ê:
{{
  "speakers": [
    {{
      "username": "boyversus",
      "role": "–∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä",
      "activity_level": "high",
      "message_count": 15,
      "contribution_types": ["suggestion", "decision"],
      "key_contributions": ["–ü—Ä–µ–¥–ª–æ–∂–∏–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Docker", "–ü—Ä–∏–Ω—è–ª —Ä–µ—à–µ–Ω–∏–µ –æ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ"],
      "detailed_role": "–∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä, –æ–±—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Å—É–∂–¥–µ–Ω–∏—è"
    }},
    {{
      "username": "KseniaKrasnobaeva",
      "role": "—ç–∫—Å–ø–µ—Ä—Ç",
      "activity_level": "medium",
      "message_count": 8,
      "contribution_types": ["answer", "support"],
      "key_contributions": ["–î–∞–ª–∞ —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ–µ –º–Ω–µ–Ω–∏–µ", "–ü–æ–¥–¥–µ—Ä–∂–∞–ª–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"],
      "detailed_role": "—ç–∫—Å–ø–µ—Ä—Ç, –æ–±—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Å—É–∂–¥–µ–Ω–∏—è, –ø–æ–¥–¥–µ—Ä–∂–∞–ª–∞ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—É"
    }}
  ],
  "group_dynamics": {{
    "dominant_speaker": "boyversus",
    "most_helpful": "KseniaKrasnobaeva",
    "most_questions": "boyversus",
    "collaboration_level": "high"
  }}
}}

–û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –†–û–õ–ï–ô:
- leader: –≤–µ–¥–µ—Ç –æ–±—Å—É–∂–¥–µ–Ω–∏–µ, –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ä–µ—à–µ–Ω–∏—è
- supporter: –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∏–¥–µ–∏, –ø–æ–º–æ–≥–∞–µ—Ç –¥—Ä—É–≥–∏–º
- questioner: –∑–∞–¥–∞–µ—Ç –≤–æ–ø—Ä–æ—Å—ã, —É—Ç–æ—á–Ω—è–µ—Ç –¥–µ—Ç–∞–ª–∏
- contributor: –≤–Ω–æ—Å–∏—Ç –∏–¥–µ–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
- observer: –º–∏–Ω–∏–º–∞–ª—å–Ω–æ —É—á–∞—Å—Ç–≤—É–µ—Ç, –Ω–∞–±–ª—é–¥–∞–µ—Ç

–í–ê–ñ–ù–û:
- –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ usernames –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π
- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –≤–∫–ª–∞–¥ –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
- –û–ø—Ä–µ–¥–µ–ª—è–π –¥–∏–Ω–∞–º–∏–∫—É –≥—Ä—É–ø–ø—ã –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
- –°–æ—Ö—Ä–∞–Ω—è–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –≤–∫–ª–∞–¥–æ–≤"""

        super().__init__(
            llm=llm,
            system_prompt=system_prompt,
            agent_name="speaker_analyzer",
            output_model=SpeakersOutput,
            timeout=30.0
        )
    
    async def _process_input(self, input_data: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ user message –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
        # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∞–∫ messages_text, —Ç–∞–∫ –∏ messages
        messages_text = input_data.get("messages_text", input_data.get("messages", ""))
        assessment = input_data.get("assessment", None)
        if assessment and hasattr(assessment, 'detail_level'):
            detail_level = assessment.detail_level
        else:
            detail_level = "standard"
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö usernames –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        usernames = self._extract_real_usernames(messages_text)
        usernames_context = ", ".join(usernames) if usernames else "–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã"
        
        user_message = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ä–æ–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –¥–∏–∞–ª–æ–≥–µ.

–£–†–û–í–ï–ù–¨ –î–ï–¢–ê–õ–ò–ó–ê–¶–ò–ò: {detail_level}
–£–ß–ê–°–¢–ù–ò–ö–ò: {usernames_context}

–î–ò–ê–õ–û–ì:
{messages_text}

–û–ø—Ä–µ–¥–µ–ª–∏ —Ä–æ–ª–∏, –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –≤–∫–ª–∞–¥ –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞. –ö–†–ò–¢–ò–ß–ù–û: –∏—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ usernames –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π!"""

        return user_message
    
    async def _process_output(self, output: SpeakersOutput, input_data: Dict[str, Any]) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
        try:
            # Pydantic –º–æ–¥–µ–ª—å —É–∂–µ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–∞
            speakers_list = []
            for speaker in output.speakers:
                speakers_list.append({
                    "username": speaker.username,
                    "role": speaker.role,
                    "activity_level": speaker.activity_level,
                    "message_count": speaker.message_count,
                    "contribution_types": speaker.contribution_types,
                    "key_contributions": speaker.key_contributions
                })
            
            result = {
                "speakers": speakers_list,
                "group_dynamics": {
                    "dominant_speaker": output.group_dynamics.dominant_speaker,
                    "most_helpful": output.group_dynamics.most_helpful,
                    "most_questions": output.group_dynamics.most_questions,
                    "collaboration_level": output.group_dynamics.collaboration_level
                },
                "participants_count": len(speakers_list)
            }
            
            logger.info(f"üë• –ê–Ω–∞–ª–∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(speakers_list)} —á–µ–ª–æ–≤–µ–∫")
            logger.debug(f"   Usernames: {[s['username'] for s in speakers_list]}")
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {e}")
            return {
                "speakers": [],
                "group_dynamics": {
                    "dominant_speaker": "",
                    "most_helpful": "",
                    "most_questions": "",
                    "collaboration_level": "low"
                },
                "participants_count": 0,
                "error": str(e),
                "fallback": True
            }
    
    def _extract_real_usernames(self, messages_text: str) -> List[str]:
        """
        –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö usernames –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        
        Args:
            messages_text: –¢–µ–∫—Å—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ "[ID] username (timestamp): message"
            
        Returns:
            –°–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö usernames
        """
        usernames = set()
        lines = messages_text.split('\n')
        
        for line in lines:
            line = line.strip()
            if not line:
                continue
            
            # –ü–∞—Ä—Å–∏–Ω–≥ —Ñ–æ—Ä–º–∞—Ç–∞ "[ID] username (timestamp): message"
            if ']: ' in line:
                try:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∞—Å—Ç—å –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ ']' –∏ –¥–æ '('
                    after_bracket = line.split(']', 1)[1]
                    if '(' in after_bracket:
                        username_part = after_bracket.split('(', 1)[0].strip()
                        if username_part:
                            usernames.add(username_part)
                except (IndexError, ValueError):
                    continue
        
        return list(usernames)