"""
Context Links Agent

–ê–Ω–∞–ª–∏–∑ —Å—Å—ã–ª–æ–∫, —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏ –≤–Ω–µ—à–Ω–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –≤ –¥–∏–∞–ª–æ–≥–∞—Ö.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç GigaChat –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Å—ã–ª–æ–∫ —Å Pydantic structured output.

–£—Å–ª–æ–≤–Ω—ã–π –∞–≥–µ–Ω—Ç: –∞–∫—Ç–∏–≤–µ–Ω –ø—Ä–∏ detail_level == comprehensive OR has_links == true
"""

import logging
from typing import Dict, Any, List
import re

from .base import BaseAgent
from .config import get_llm_for_agent
from .schemas import ContextLinksOutput

logger = logging.getLogger(__name__)


class ContextLinksAgent(BaseAgent):
    """–ê–≥–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Å—ã–ª–æ–∫ –∏ –≤–Ω–µ—à–Ω–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ —Å Pydantic structured output"""
    
    def __init__(self):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º GigaChat –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Å—ã–ª–æ–∫
        llm = get_llm_for_agent("fact_extraction")
        
        system_prompt = """–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É —Å—Å—ã–ª–æ–∫ –∏ –≤–Ω–µ—à–Ω–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –≤ –¥–∏–∞–ª–æ–≥–∞—Ö.

–¢–í–û–Ø –†–û–õ–¨: –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫–∏, —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –≤–Ω–µ—à–Ω–∏–µ —Ä–µ—Å—É—Ä—Å—ã.
–ì–†–ê–ù–ò–¶–´: –†–∞–±–æ—Ç–∞–µ—à—å —Ç–æ–ª—å–∫–æ —Å —Å—Å—ã–ª–∫–∞–º–∏ –∏ —Ä–µ—Å—É—Ä—Å–∞–º–∏, –Ω–µ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—à—å —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞.

–ö–†–ò–¢–ï–†–ò–ò –ê–ù–ê–õ–ò–ó–ê:
- external_links: –≤–Ω–µ—à–Ω–∏–µ HTTP/HTTPS —Å—Å—ã–ª–∫–∏
- telegram_links: —Å—Å—ã–ª–∫–∏ –Ω–∞ Telegram –∫–∞–Ω–∞–ª—ã/–≥—Ä—É–ø–ø—ã
- mentions: —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (@username) –∏ –∫–∞–Ω–∞–ª–æ–≤

–ü–†–ò–ú–ï–†–´ –ü–†–ê–í–ò–õ–¨–ù–û–ì–û –í–´–í–û–î–ê:
{{
  "external_links": [
    {{
      "url": "https://docs.docker.com/",
      "title": "Docker Documentation",
      "link_type": "external",
      "relevance": "high"
    }}
  ],
  "telegram_links": [
    {{
      "url": "https://t.me/tech_channel",
      "title": "Tech Channel",
      "link_type": "telegram",
      "relevance": "medium"
    }}
  ],
  "mentions": ["@john_doe", "@alice_smith", "#project"]
}}

–í–ê–ñ–ù–û:
- –ò–∑–≤–ª–µ–∫–∞–π –≤—Å–µ —Å—Å—ã–ª–∫–∏ –∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–∑ –¥–∏–∞–ª–æ–≥–∞
- –û–ø—Ä–µ–¥–µ–ª—è–π —Ç–∏–ø —Å—Å—ã–ª–∫–∏ (external, telegram, mention)
- –û—Ü–µ–Ω–∏–≤–∞–π —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
- –ì—Ä—É–ø–ø–∏—Ä—É–π –ø–æ —Ç–∏–ø–∞–º –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
- –ö–†–ò–¢–ò–ß–ù–û: –°–æ—Ö—Ä–∞–Ω—è–π —Ä–µ–∞–ª—å–Ω—ã–µ usernames —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π"""

        super().__init__(
            llm=llm,
            system_prompt=system_prompt,
            agent_name="context_links",
            output_model=ContextLinksOutput,
            timeout=30.0
        )
    
    async def _process_input(self, input_data: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ user message –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Å—ã–ª–æ–∫"""
        messages_text = input_data.get("messages_text", input_data.get("messages", ""))
        assessment = input_data.get("assessment", None)
        if assessment and hasattr(assessment, 'detail_level'):
            detail_level = assessment.detail_level
        else:
            detail_level = "comprehensive"
            
        if assessment and hasattr(assessment, 'has_links'):
            has_links = assessment.has_links
        else:
            has_links = False
        
        user_message = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å—Å—ã–ª–∫–∏ –∏ —Ä–µ—Å—É—Ä—Å—ã –≤ –¥–∏–∞–ª–æ–≥–µ.

–£–†–û–í–ï–ù–¨ –î–ï–¢–ê–õ–ò–ó–ê–¶–ò–ò: {detail_level}
–ù–ê–õ–ò–ß–ò–ï –°–°–´–õ–û–ö: {has_links}

–î–ò–ê–õ–û–ì:
{messages_text}

–ò–∑–≤–ª–µ–∫–∏ –≤—Å–µ —Å—Å—ã–ª–∫–∏, —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –≤–Ω–µ—à–Ω–∏–µ —Ä–µ—Å—É—Ä—Å—ã, —Å–≥—Ä—É–ø–ø–∏—Ä—É–π –ø–æ —Ç–∏–ø–∞–º."""

        return user_message
    
    async def _process_output(self, output: ContextLinksOutput, input_data: Dict[str, Any]) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å—Å—ã–ª–æ–∫"""
        try:
            # Pydantic –º–æ–¥–µ–ª—å —É–∂–µ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–∞
            external_links = [
                {
                    "url": link.url,
                    "title": link.title,
                    "link_type": link.link_type,
                    "relevance": link.relevance
                }
                for link in output.external_links
            ]
            
            telegram_links = [
                {
                    "url": link.url,
                    "title": link.title,
                    "link_type": link.link_type,
                    "relevance": link.relevance
                }
                for link in output.telegram_links
            ]
            
            result = {
                "external_links": external_links,
                "telegram_links": telegram_links,
                "mentions": output.mentions
            }
            
            total_links = len(external_links) + len(telegram_links) + len(output.mentions)
            logger.info(f"üîó –°—Å—ã–ª–∫–∏: {total_links} –≤—Å–µ–≥–æ ({len(external_links)} –≤–Ω–µ—à–Ω–∏—Ö, {len(telegram_links)} Telegram)")
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å—Å—ã–ª–æ–∫: {e}")
            return {
                "external_links": [],
                "telegram_links": [],
                "mentions": [],
                "error": str(e),
                "fallback": True
            }