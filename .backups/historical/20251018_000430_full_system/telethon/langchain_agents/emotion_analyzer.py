"""
Emotion Analyzer Agent

–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Ç–æ–Ω–∞, –∞—Ç–º–æ—Å—Ñ–µ—Ä—ã –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –≤ –¥–∏–∞–ª–æ–≥–∞—Ö.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç GigaChat –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —ç–º–æ—Ü–∏–π —Å Pydantic structured output.
"""

import logging
from typing import Dict, Any, List

from .base import BaseAgent
from .config import get_llm_for_agent
from .schemas import EmotionsOutput

logger = logging.getLogger(__name__)


class EmotionAnalyzerAgent(BaseAgent):
    """–ê–≥–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –∞—Ç–º–æ—Å—Ñ–µ—Ä—ã –¥–∏–∞–ª–æ–≥–æ–≤ —Å Pydantic structured output"""
    
    def __init__(self):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º GigaChat –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —ç–º–æ—Ü–∏–π (–±–æ–ª–µ–µ —Ç–≤–æ—Ä—á–µ—Å–∫–∏–π –ø–æ–¥—Ö–æ–¥)
        llm = get_llm_for_agent("emotion_analysis")
        
        system_prompt = """–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –∞—Ç–º–æ—Å—Ñ–µ—Ä—ã –≤ –¥–∏–∞–ª–æ–≥–∞—Ö.

–¢–í–û–Ø –†–û–õ–¨: –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–Ω –∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –æ–±—â–µ–Ω–∏—è.
–ì–†–ê–ù–ò–¶–´: –†–∞–±–æ—Ç–∞–µ—à—å —Ç–æ–ª—å–∫–æ —Å —ç–º–æ—Ü–∏—è–º–∏, –Ω–µ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—à—å —Ç–µ–º—ã –∏–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.

–ö–†–ò–¢–ï–†–ò–ò –ê–ù–ê–õ–ò–ó–ê:
- overall_tone: –æ–±—â–∏–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–Ω –¥–∏–∞–ª–æ–≥–∞
- atmosphere: –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
- emotional_indicators: –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã
- intensity_level: —É—Ä–æ–≤–µ–Ω—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏

–ü–†–ò–ú–ï–†–´ –ü–†–ê–í–ò–õ–¨–ù–û–ì–û –í–´–í–û–î–ê:
{{
  "overall_tone": "neutral",
  "atmosphere": "casual",
  "emotional_indicators": ["–±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–æ", "–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ—Å—Ç—å"],
  "intensity_level": "medium",
  "intensity_score": 0.6,
  "key_emotions": ["–±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–æ", "–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"],
  "conflict_indicators": false,
  "support_indicators": true,
  "conflict_percentage": 20.0,
  "collaboration_percentage": 80.0,
  "stress_percentage": 40.0,
  "enthusiasm_percentage": 60.0
}}

–û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø:
- positive: –ø—Ä–µ–æ–±–ª–∞–¥–∞—é—Ç –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ —ç–º–æ—Ü–∏–∏, –ø–æ–¥–¥–µ—Ä–∂–∫–∞, –æ–¥–æ–±—Ä–µ–Ω–∏–µ
- neutral: –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Ç–æ–Ω, –¥–µ–ª–æ–≤–æ–µ –æ–±—â–µ–Ω–∏–µ
- negative: –ø—Ä–µ–æ–±–ª–∞–¥–∞—é—Ç –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —ç–º–æ—Ü–∏–∏, –∫—Ä–∏—Ç–∏–∫–∞, –Ω–µ–¥–æ–≤–æ–ª—å—Å—Ç–≤–æ
- mixed: —Å–æ—á–µ—Ç–∞–Ω–∏–µ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö –∏ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö —ç–º–æ—Ü–∏–π

–í–ê–ñ–ù–û:
- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é —Å–æ—Å—Ç–∞–≤–ª—è—é—â—É—é —Å–æ–æ–±—â–µ–Ω–∏–π
- –£—á–∏—Ç—ã–≤–∞–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ —Ç–æ–Ω –æ–±—â–µ–Ω–∏—è
- –û–ø—Ä–µ–¥–µ–ª—è–π –ø—Ä–∏–∑–Ω–∞–∫–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
- –ö–†–ò–¢–ò–ß–ù–û: –°–æ—Ö—Ä–∞–Ω—è–π —Ä–µ–∞–ª—å–Ω—ã–µ usernames —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π"""

        super().__init__(
            llm=llm,
            system_prompt=system_prompt,
            agent_name="emotion_analyzer",
            output_model=EmotionsOutput,
            timeout=30.0
        )
    
    async def _process_input(self, input_data: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ user message –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —ç–º–æ—Ü–∏–π"""
        messages_text = input_data.get("messages_text", input_data.get("messages", ""))
        assessment = input_data.get("assessment", None)
        if assessment and hasattr(assessment, 'detail_level'):
            detail_level = assessment.detail_level
        else:
            detail_level = "standard"
        
        user_message = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –¥–∏–∞–ª–æ–≥–∞.

–£–†–û–í–ï–ù–¨ –î–ï–¢–ê–õ–ò–ó–ê–¶–ò–ò: {detail_level}

–î–ò–ê–õ–û–ì:
{messages_text}

–û–ø—Ä–µ–¥–µ–ª–∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–Ω, –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –∏ –∫–ª—é—á–µ–≤—ã–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã."""

        return user_message
    
    async def _process_output(self, output: EmotionsOutput, input_data: Dict[str, Any]) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ —ç–º–æ—Ü–∏–π"""
        try:
            # Pydantic –º–æ–¥–µ–ª—å —É–∂–µ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–∞
            result = {
                "overall_tone": output.overall_tone,
                "atmosphere": output.atmosphere,
                "emotional_indicators": output.emotional_indicators,
                "intensity_level": output.intensity_level,
                "key_emotions": output.key_emotions,
                "conflict_indicators": output.conflict_indicators,
                "support_indicators": output.support_indicators
            }
            
            logger.info(f"üòä –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑: {output.overall_tone} —Ç–æ–Ω, {output.atmosphere} –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞")
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —ç–º–æ—Ü–∏–π: {e}")
            return {
                "overall_tone": "neutral",
                "atmosphere": "mixed",
                "emotional_indicators": [],
                "intensity_level": "low",
                "key_emotions": [],
                "conflict_indicators": False,
                "support_indicators": False,
                "error": str(e),
                "fallback": True
            }