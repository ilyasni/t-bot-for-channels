{
  "name": "Query Expander",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "expand-query",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "a1b2c3d4-e5f6-7g8h-9i0j-1k2l3m4n5o6p",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [250, 300],
      "webhookId": "expand-query"
    },
    {
      "parameters": {
        "jsCode": "const query = $input.first().json.query;\nconst userId = $input.first().json.user_id;\n\n// Проверяем длину запроса\nconst isShort = query.split(' ').length <= 2;\n\nif (!isShort) {\n  // Запрос уже развернут, возвращаем как есть\n  return {\n    original_query: query,\n    expanded_query: query,\n    was_expanded: false,\n    user_id: userId\n  };\n}\n\n// Создаем промпт для расширения короткого запроса\nconst prompt = `Ты — эксперт по формулировке поисковых запросов.\n\nПользователь ввел короткий запрос: \"${query}\"\n\nТвоя задача:\n1. Определи тему запроса\n2. Сформулируй ПОЛНЫЙ информационный вопрос на эту тему\n3. Вопрос должен быть конкретным и релевантным для поиска в Telegram постах\n\nПримеры:\n- \"банки\" → \"Что нового по банкам и депозитам?\"\n- \"крипта\" → \"Что нового в мире криптовалют?\"\n- \"нейросети\" → \"Какие новости и обновления по нейросетям?\"\n- \"AI\" → \"Что писали про искусственный интеллект и AI?\"\n\nВерни ТОЛЬКО расширенный вопрос без дополнительных пояснений.`;\n\nconst requestBody = {\n  model: \"GigaChat\",\n  messages: [\n    {\n      role: \"system\",\n      content: \"Ты — эксперт по формулировке поисковых запросов. Отвечай только самим вопросом.\"\n    },\n    {\n      role: \"user\",\n      content: prompt\n    }\n  ],\n  temperature: 0.3,\n  max_tokens: 100\n};\n\nreturn {\n  original_query: query,\n  user_id: userId,\n  request_body: requestBody\n};"
      },
      "id": "b2c3d4e5-f6g7-8h9i-0j1k-2l3m4n5o6p7q",
      "name": "Check & Prepare",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [450, 300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://gpt2giga-proxy:8090/v1/chat/completions",
        "authentication": "none",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "model",
              "value": "={{ $json.request_body.model }}"
            },
            {
              "name": "messages",
              "value": "={{ $json.request_body.messages }}"
            },
            {
              "name": "temperature",
              "value": "={{ $json.request_body.temperature }}"
            },
            {
              "name": "max_tokens",
              "value": "={{ $json.request_body.max_tokens }}"
            }
          ]
        },
        "options": {
          "timeout": 15000
        }
      },
      "id": "c3d4e5f6-g7h8-9i0j-1k2l-3m4n5o6p7q8r",
      "name": "GigaChat Expand",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [650, 300],
      "continueOnFail": true
    },
    {
      "parameters": {
        "jsCode": "const input = $input.first().json;\n\n// Проверяем был ли запрос уже развернут на предыдущем шаге\nif (input.was_expanded === false) {\n  return input;\n}\n\nconst originalQuery = input.original_query;\nconst userId = input.user_id;\n\n// Проверяем успешность вызова GigaChat\nlet expandedQuery = originalQuery;\nlet wasExpanded = false;\n\nif (input.choices && input.choices[0] && input.choices[0].message) {\n  const aiResponse = input.choices[0].message.content.trim();\n  \n  // Валидация: проверяем что ответ не пустой и отличается от оригинала\n  if (aiResponse && aiResponse.length > originalQuery.length) {\n    expandedQuery = aiResponse;\n    wasExpanded = true;\n  } else {\n    // Fallback: используем шаблоны для популярных тем\n    const templates = {\n      'банк': 'Что нового по банкам и депозитам?',\n      'крипт': 'Что нового в мире криптовалют и блокчейна?',\n      'ai': 'Что писали про искусственный интеллект и AI?',\n      'нейросет': 'Какие новости и обновления по нейросетям?',\n      'блокчейн': 'Что нового в блокчейн технологиях?',\n      'инвест': 'Какие новости по инвестициям и финансам?',\n      'техн': 'Что нового в технологиях?',\n      'программ': 'Что писали про программирование и разработку?'\n    };\n    \n    const lowerQuery = originalQuery.toLowerCase();\n    for (const [keyword, template] of Object.entries(templates)) {\n      if (lowerQuery.includes(keyword)) {\n        expandedQuery = template;\n        wasExpanded = true;\n        break;\n      }\n    }\n  }\n} else {\n  // GigaChat не ответил - используем fallback шаблоны\n  const templates = {\n    'банк': 'Что нового по банкам и депозитам?',\n    'крипт': 'Что нового в мире криптовалют и блокчейна?',\n    'ai': 'Что писали про искусственный интеллект и AI?',\n    'нейросет': 'Какие новости и обновления по нейросетям?'\n  };\n  \n  const lowerQuery = originalQuery.toLowerCase();\n  for (const [keyword, template] of Object.entries(templates)) {\n    if (lowerQuery.includes(keyword)) {\n      expandedQuery = template;\n      wasExpanded = true;\n      break;\n    }\n  }\n}\n\nreturn {\n  original_query: originalQuery,\n  expanded_query: expandedQuery,\n  was_expanded: wasExpanded,\n  user_id: userId\n};"
      },
      "id": "d4e5f6g7-h8i9-0j1k-2l3m-4n5o6p7q8r9s",
      "name": "Parse & Fallback",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [850, 300]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}"
      },
      "id": "e5f6g7h8-i9j0-1k2l-3m4n-5o6p7q8r9s0t",
      "name": "Respond to Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1050, 300]
    }
  ],
  "connections": {
    "Webhook": {
      "main": [[{"node": "Check & Prepare", "type": "main", "index": 0}]]
    },
    "Check & Prepare": {
      "main": [[{"node": "GigaChat Expand", "type": "main", "index": 0}]]
    },
    "GigaChat Expand": {
      "main": [[{"node": "Parse & Fallback", "type": "main", "index": 0}]]
    },
    "Parse & Fallback": {
      "main": [[{"node": "Respond to Webhook", "type": "main", "index": 0}]]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 1,
  "updatedAt": "2025-10-14T13:54:00.000Z",
  "versionId": "1"
}

