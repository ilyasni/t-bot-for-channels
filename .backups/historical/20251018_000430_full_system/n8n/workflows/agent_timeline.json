{
  "name": "Agent: Timeline Builder",
  "nodes": [
    {
      "parameters": {},
      "id": "execute-workflow-trigger",
      "name": "Execute Workflow Trigger",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1,
      "position": [
        250,
        300
      ]
    },
    {
      "parameters": {
        "jsCode": "// Prepare HTTP Request data for timeline building\nconst items = $input.all();\nconst data = items[0].json;\n\n// Get original messages from execution context\nconst executionData = $execution.customData.getAll();\nconst originalMessages = executionData.original_messages || data.messages || [];\n\nconst assessment = data.assessment || {};\nconst topics = data.topics || [];\nconst keyMoments = data.key_moments || [];\nconst emotions = data.emotions || {};\nconst messages = originalMessages;\n\n// Format messages with timestamps\nconst messagesWithTime = messages.map((m, i) => {\n  // Extract time from date string or use index\n  let timeStr = \"\";\n  if (m.date) {\n    const date = new Date(m.date);\n    timeStr = `${date.getHours().toString().padStart(2, '0')}:${date.getMinutes().toString().padStart(2, '0')}`;\n  } else {\n    timeStr = `msg${i+1}`;\n  }\n  return `[${timeStr}] ${m.username}: ${m.text}`;\n}).join('\\n');\n\n// Build system message\nconst systemMessage = \"–¢—ã - –∞–Ω–∞–ª–∏—Ç–∏–∫ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤. –°—Ç—Ä–æ–∏—à—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ª–∏–Ω–∏–∏ –æ–±—Å—É–∂–¥–µ–Ω–∏–π —Å —É—á–µ—Ç–æ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –¥–∏–Ω–∞–º–∏–∫–∏. –í–æ–∑–≤—Ä–∞—â–∞–π –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–π JSON: {\\\"timeline\\\": [...], \\\"emotional_progression\\\": \\\"...\\\"}. –ó–ê–ü–†–ï–©–ï–ù–û: markdown, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, –ø—Ä–∏–¥—É–º—ã–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö.\";\n\n// === BUILD USER MESSAGE ===\n\nconst userMessage = `–ü–æ—Å—Ç—Ä–æ–π —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é –ª–∏–Ω–∏—é –¥–∏—Å–∫—É—Å—Å–∏–∏ —Å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –¥–∏–Ω–∞–º–∏–∫–æ–π.\\n\\n–¢–ò–ü –î–ò–ê–õ–û–ì–ê: ${assessment.dialogue_type}\\n\\n=== –ö–û–ù–¢–ï–ö–°–¢ ===\\n\\n–¢–ï–ú–´:\\n${topics.map(t => `- ${t.name}`).join('\\n')}\\n\\n–ö–õ–Æ–ß–ï–í–´–ï –ú–û–ú–ï–ù–¢–´:\\n${keyMoments.map(km => `${km.type}: ${km.content}`).join('\\n')}\\n\\n–≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–´–ô –§–û–ù:\\n- –û–±—â–∏–π —Ç–æ–Ω: ${emotions.overall_tone || 'neutral'}\\n- –î–∏–Ω–∞–º–∏–∫–∞: ${emotions.emotional_arc || '—Å—Ç–∞–±–∏–ª—å–Ω–∞—è'}\\n\\n–°–û–û–ë–©–ï–ù–ò–Ø –° –í–†–ï–ú–ï–ù–ï–ú:\\n${messagesWithTime}\\n\\n=== –ó–ê–î–ê–ß–ê ===\\n\\n–°–æ–∑–¥–∞–π —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é –ª–∏–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞—é—â—É—é:\\n1. –ö–∞–∫ –Ω–∞—á–∞–ª—Å—è —Ä–∞–∑–≥–æ–≤–æ—Ä (–ø–µ—Ä–≤—ã–µ —Ç–µ–º—ã)\\n2. –ö–∞–∫ —Ä–∞–∑–≤–∏–≤–∞–ª–∏—Å—å —Ç–µ–º—ã –∏ –¥–∏—Å–∫—É—Å—Å–∏—è\\n3. –ö–æ–≥–¥–∞ –±—ã–ª–∏ –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã (—Ä–µ—à–µ–Ω–∏—è, –ø—Ä–æ–±–ª–µ–º—ã)\\n4. –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∏–∫–∏ (–∫–æ–≥–¥–∞ –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞ –º–µ–Ω—è–ª–∞—Å—å)\\n5. –ö–∞–∫ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –¥–∏–∞–ª–æ–≥\\n\\n–î–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–±—ã—Ç–∏—è —É–∫–∞–∂–∏:\\n- time: –≤—Ä–µ–º—è (HH:MM –∏–ª–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ)\\n- event: —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ (–∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ)\\n- participants: –∫—Ç–æ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª\\n- emotion: —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ–∫—Ä–∞—Å (calm/concern/tension/enthusiasm/relief)\\n- outcome: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É\\n\\n–§–û–†–ú–ê–¢:\\n{\\n  \"timeline\": [\\n    {\\n      \"time\": \"12:30\",\\n      \"event\": \"–ù–∞—á–∞–ª–æ –æ–±—Å—É–∂–¥–µ–Ω–∏—è –≤–∏—Ç—Ä–∏–Ω—ã\",\\n      \"participants\": [\"@–û–∫—Å–∞–Ω–∞\"],\\n      \"emotion\": \"calm\",\\n      \"outcome\": \"–ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤–æ–ø—Ä–æ—Å–∞–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞\"\\n    },\\n    {\\n      \"time\": \"12:45\",\\n      \"event\": \"–í—ã—è–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –≤–µ–±–≤—å—é\",\\n      \"participants\": [\"@–û–∫—Å–∞–Ω–∞\"],\\n      \"emotion\": \"concern\",\\n      \"outcome\": \"–ù–∞—á–∞–ª–æ –∞–Ω–∞–ª–∏–∑–∞ —Ä–∏—Å–∫–æ–≤\"\\n    }\\n  ],\\n  \"emotional_progression\": \"–°–ø–æ–∫–æ–π–Ω–æ–µ –Ω–∞—á–∞–ª–æ (0.3) ‚Üí –ü–∏–∫ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è (0.7) ‚Üí –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ (0.5)\"\\n}\\n\\n–í–ê–ñ–ù–û:\\n- –í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–π JSON\\n- 5-10 —Å–æ–±—ã—Ç–∏–π –º–∞–∫—Å–∏–º—É–º (—Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ)\\n- –§–æ–∫—É—Å –Ω–∞ –ø–µ—Ä–µ–ª–æ–º–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å–¥–≤–∏–≥–∏`;\n\n// Calculate max_tokens safely\nconst maxTokens = (assessment.token_budgets && assessment.token_budgets.timeline) ? assessment.token_budgets.timeline : 800;\n\nreturn [\n  {\n    json: {\n      system_message: systemMessage,\n      user_message: userMessage,\n      max_tokens: maxTokens,\n      message_count: messages.length\n    }\n  }\n];"
      },
      "id": "prepare-timeline-prompt",
      "name": "Prepare Timeline Prompt",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        450,
        300
      ]
    },
    {
      "parameters": {
        "url": "http://gpt2giga-proxy:8000/v1/chat/completions",
        "authentication": "none",
        "requestMethod": "POST",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyContentType": "json",
        "jsonBody": "={{ {\"model\": \"GigaChat-Pro\", \"messages\": [{\"role\": \"system\", \"content\": $json.system_message}, {\"role\": \"user\", \"content\": $json.user_message}], \"temperature\": 0.1, \"max_tokens\": $json.max_tokens, \"response_format\": {\"type\": \"json_object\"}} }}",
        "options": {}
      },
      "id": "gigachat-timeline",
      "name": "GigaChat: Build Timeline",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        650,
        300
      ]
    },
    {
      "parameters": {
        "jsCode": "// Parse GigaChat response from gpt2giga proxy\nconst response = $input.first().json.choices?.[0]?.message?.content || '{}';\n\nconsole.log('üì• GigaChat response received:', response.substring(0, 100));\n\nreturn [\n  {\n    json: {\n      raw_content: response\n    }\n  }\n];"
      },
      "id": "parse-timeline-response",
      "name": "Parse Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [850, 300]
    },
    {
      "parameters": {
        "workflowId": "utility_json_guardrail",
        "source": "database",
        "inputData": {
          "values": [
            {
              "json": {
                "raw_content": "={{ $json.response || choices[0].message.content }}",
                "data_type": "timeline",
                "original_messages": "={{ $execution.customData.getAll().original_messages }}"
              }
            }
          ]
        }
      },
      "id": "execute-guardrail",
      "name": "Execute Guardrail",
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1,
      "position": [
        850,
        300
      ]
    }
  ],
  "connections": {
    "Execute Workflow Trigger": {
      "main": [
        [
          {
            "node": "Prepare Timeline Prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Timeline Prompt": {
      "main": [
        [
          {
            "node": "GigaChat: Build Timeline",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GigaChat: Build Timeline": {
      "main": [
        [
          {
            "node": "Parse Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Response": {
      "main": [
        [
          {
            "node": "Execute Guardrail",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-10-14T19:15:00.000Z",
  "versionId": "1"
}