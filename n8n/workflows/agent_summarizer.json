{
  "name": "Agent: Context Summarizer",
  "nodes": [
    {
      "parameters": {},
      "id": "execute-workflow-trigger",
      "name": "Execute Workflow Trigger",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1,
      "position": [250, 300]
    },
    {
      "parameters": {
        "jsCode": "// Prepare HTTP Request data for context summarization with ALL previous context\nconst items = $input.all();\nconst data = items[0].json;\n\n// Get original messages from execution context\nconst executionData = $execution.customData.getAll();\nconst originalMessages = executionData.original_messages || data.messages || [];\nconst originalMessagesText = executionData.original_messages_text || data.messages_text || \"\";\n\nconst messagesText = originalMessagesText;\nconst hours = data.hours || 24;\nconst assessment = data.assessment || {};\nconst topics = data.topics || [];\nconst emotions = data.emotions || {};\nconst speakers = data.speakers || {};\nconst detailLevel = assessment.detail_level || \"standard\";\nconst dialogueType = assessment.dialogue_type || \"casual_chat\";\n\n// Adaptive summary lengths\nconst summarySpecs = {\n  micro: {tokens: 150, style: \"–æ–¥–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ\", length: \"~20 —Å–ª–æ–≤\"},\n  minimal: {tokens: 300, style: \"–æ–¥–∏–Ω –ø–∞—Ä–∞–≥—Ä–∞—Ñ\", length: \"2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è\"},\n  standard: {tokens: 600, style: \"2-3 –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞\", length: \"—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ\"},\n  detailed: {tokens: 1200, style: \"–º–Ω–æ–≥–æ—Å–µ–∫—Ü–∏–æ–Ω–Ω—ã–π –æ—Ç—á–µ—Ç\", length: \"3-4 –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞ —Å –¥–µ—Ç–∞–ª—è–º–∏\"},\n  comprehensive: {tokens: 2000, style: \"–ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç\", length: \"executive summary + –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑\"}\n};\nconst spec = summarySpecs[detailLevel] || summarySpecs.standard;\n\n// Build system message\nconst systemMessage = \"–¢—ã - –∞–Ω–∞–ª–∏—Ç–∏–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–∏–∞–ª–æ–≥–æ–≤. –°–æ–∑–¥–∞–µ—à—å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Ä–µ–∑—é–º–µ —Ä–∞–∑–Ω–æ–π –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞. –í–æ–∑–≤—Ä–∞—â–∞–π –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–π JSON: {\\\"summary\\\": \\\"...\\\"}. –ó–ê–ü–†–ï–©–ï–ù–û: markdown, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, –ø—Ä–∏–¥—É–º—ã–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö.\";\n\n// === BUILD USER MESSAGE ===\n\nconst userMessage = `–°–æ–∑–¥–∞–π ${spec.style} —Ä–µ–∑—é–º–µ –¥–∏–∞–ª–æ–≥–∞.\\n\\n–£–†–û–í–ï–ù–¨ –î–ï–¢–ê–õ–ò–ó–ê–¶–ò–ò: ${detailLevel}\\n–¢–ò–ü –î–ò–ê–õ–û–ì–ê: ${dialogueType}\\n–ü–ï–†–ò–û–î: ${hours} —á–∞—Å–æ–≤\\n\\n=== –ö–û–ù–¢–ï–ö–°–¢ –û–¢ –ê–ì–ï–ù–¢–û–í ===\\n\\n–¢–ï–ú–´:\\n${topics.map(t => `- ${t.name} (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${t.priority})`).join('\\n')}\\n\\n–≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó:\\n- –û–±—â–∏–π —Ç–æ–Ω: ${emotions.overall_tone || emotions.tone || 'neutral'}\\n- –ê—Ç–º–æ—Å—Ñ–µ—Ä–∞: ${emotions.atmosphere || '–æ–±—ã—á–Ω–∞—è'}\\n${emotions.emotional_arc ? `- –î–∏–Ω–∞–º–∏–∫–∞: ${emotions.emotional_arc}` : ''}\\n\\n–£–ß–ê–°–¢–ù–ò–ö–ò:\\n${Object.keys(speakers).map(s => {\n  const sp = speakers[s];\n  if (typeof sp === 'string') {\n    return `- @${s}: ${sp}`;\n  } else {\n    return `- @${s}: ${sp.role || '—É—á–∞—Å—Ç–Ω–∏–∫'} - ${sp.contributions || (sp.main_topics ? sp.main_topics.join(', ') : '') || ''}`;\n  }\n}).join('\\n')}\\n\\n–°–û–û–ë–©–ï–ù–ò–Ø:\\n${messagesText}\\n\\n=== –ó–ê–î–ê–ß–ê ===\\n\\n–°–æ–∑–¥–∞–π —Ä–µ–∑—é–º–µ –¥–ª–∏–Ω–æ–π ${spec.length}.\\n\\n${detailLevel === 'micro' ? `–§–û–†–ú–ê–¢: –û–¥–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å—É–º–º–∏—Ä—É—é—â–µ–µ —Å—É—Ç—å + —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–Ω.` : ''}\\n${detailLevel === 'minimal' ? `–§–û–†–ú–ê–¢: –û–¥–∏–Ω –ø–∞—Ä–∞–≥—Ä–∞—Ñ (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) —Å –æ–±—â–µ–π —Å—É—Ç—å—é –∏ —Ç–æ–Ω–æ–º.` : ''}\\n${detailLevel === 'standard' ? `–§–û–†–ú–ê–¢: 2-3 –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞:\\n1. –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã\\n2. –ö–ª—é—á–µ–≤—ã–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è –∏ —É—á–∞—Å—Ç–Ω–∏–∫–∏\\n3. –ò—Ç–æ–≥–∏ –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–Ω` : ''}\\n${detailLevel === 'detailed' ? `–§–û–†–ú–ê–¢: –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç:\\n1. Executive summary (1 –ø–∞—Ä–∞–≥—Ä–∞—Ñ)\\n2. –î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±—Å—É–∂–¥–µ–Ω–∏–π\\n3. –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞\\n4. –í—ã–≤–æ–¥—ã –∏ –¥–µ–π—Å—Ç–≤–∏—è` : ''}\\n${detailLevel === 'comprehensive' ? `–§–û–†–ú–ê–¢: –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç:\\n1. Executive summary\\n2. –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ —Ç–µ–º–∞–º\\n3. –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π arc\\n4. –°–≤—è–∑–∏ –∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã\\n5. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏` : ''}\\n\\n–£—á–∏—Ç—ã–≤–∞–π:\\n- –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –∞–Ω–∞–ª–∏–∑–∞\\n- –†–æ–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\\n- –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã —Ç–µ–º\\n\\n–§–û–†–ú–ê–¢ JSON:\\n{\"summary\": \"—Ç–µ–∫—Å—Ç —Ä–µ–∑—é–º–µ\"}\\n\\n–í–ê–ñ–ù–û: –í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–π JSON!`;\n\nreturn [\n  {\n    json: {\n      system_message: systemMessage,\n      user_message: userMessage,\n      max_tokens: spec.tokens,\n      detail_level: detailLevel\n    }\n  }\n];"
      },
      "id": "prepare-prompt",
      "name": "Prepare Summary Prompt",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [450, 300]
    },
    {
      "parameters": {
        "url": "http://gpt2giga-proxy:8000/v1/chat/completions",
        "authentication": "none",
        "requestMethod": "POST",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyContentType": "json",
        "jsonBody": "={{ {\"model\": \"GigaChat-Pro\", \"messages\": [{\"role\": \"system\", \"content\": $json.system_message}, {\"role\": \"user\", \"content\": $json.user_message}], \"temperature\": 0.1, \"max_tokens\": $json.max_tokens, \"response_format\": {\"type\": \"json_object\"}} }}",
        "options": {}
      },
      "id": "gigachat-call",
      "name": "GigaChat: Summarize Context",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [650, 300]
    },
    {
      "parameters": {
        "jsCode": "// Parse GigaChat response from gpt2giga proxy\nconst response = $input.first().json.choices?.[0]?.message?.content || '{}';\n\nconsole.log('üì• GigaChat response received:', response.substring(0, 100));\n\nreturn [\n  {\n    json: {\n      raw_content: response\n    }\n  }\n];"
      },
      "id": "parse-summary-response",
      "name": "Parse Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [850, 300]
    },
    {
      "parameters": {
        "workflowId": "utility_json_guardrail",
        "source": "database",
        "inputData": {
          "values": [
            {
              "json": {
                "raw_content": "={{ $json.response || choices[0].message.content }}",
                "data_type": "summary",
                "original_messages": "={{ $execution.customData.getAll().original_messages }}"
              }
            }
          ]
        }
      },
      "id": "execute-guardrail",
      "name": "Execute Guardrail",
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1,
      "position": [850, 300]
    }
  ],
  "connections": {
    "Execute Workflow Trigger": {
      "main": [
        [
          {
            "node": "Prepare Summary Prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Summary Prompt": {
      "main": [
        [
          {
            "node": "GigaChat: Summarize Context",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GigaChat: Summarize Context": {
      "main": [
        [
          {
            "node": "Parse Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Response": {
      "main": [
        [
          {
            "node": "Execute Guardrail",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-10-13T16:10:00.000Z",
  "versionId": "1"
}

