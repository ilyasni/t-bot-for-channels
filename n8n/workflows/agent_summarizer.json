{
  "name": "Agent: Context Summarizer",
  "nodes": [
    {
      "parameters": {},
      "id": "execute-workflow-trigger",
      "name": "Execute Workflow Trigger",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1,
      "position": [250, 300]
    },
    {
      "parameters": {
        "jsCode": "// Prepare ADAPTIVE prompt for context summarization with ALL previous context\nconst items = $input.all();\nconst data = items[0].json;\n\nconst messagesText = data.messages_text || \"\";\nconst hours = data.hours || 24;\nconst assessment = data.assessment || {};\nconst topics = data.topics || [];\nconst emotions = data.emotions || {};\nconst speakers = data.speakers || {};\nconst detailLevel = assessment.detail_level || \"standard\";\nconst dialogueType = assessment.dialogue_type || \"casual_chat\";\n\n// Adaptive summary lengths\nconst summarySpecs = {\n  micro: {tokens: 150, style: \"одно предложение\", length: \"~20 слов\"},\n  minimal: {tokens: 300, style: \"один параграф\", length: \"2-3 предложения\"},\n  standard: {tokens: 600, style: \"2-3 параграфа\", length: \"структурированное описание\"},\n  detailed: {tokens: 1200, style: \"многосекционный отчет\", length: \"3-4 параграфа с деталями\"},\n  comprehensive: {tokens: 2000, style: \"полный отчет\", length: \"executive summary + детальный анализ\"}\n};\nconst spec = summarySpecs[detailLevel] || summarySpecs.standard;\n\n// Build comprehensive prompt\nconst prompt = `Создай ${spec.style} резюме диалога.\\n\\nУРОВЕНЬ ДЕТАЛИЗАЦИИ: ${detailLevel}\\nТИП ДИАЛОГА: ${dialogueType}\\nПЕРИОД: ${hours} часов\\n\\n=== КОНТЕКСТ ОТ АГЕНТОВ ===\\n\\nТЕМЫ:\\n${topics.map(t => `- ${t.name} (приоритет: ${t.priority})`).join('\\n')}\\n\\nЭМОЦИОНАЛЬНЫЙ АНАЛИЗ:\\n- Общий тон: ${emotions.overall_tone || emotions.tone || 'neutral'}\\n- Атмосфера: ${emotions.atmosphere || 'обычная'}\\n${emotions.emotional_arc ? `- Динамика: ${emotions.emotional_arc}` : ''}\\n\\nУЧАСТНИКИ:\\n${Object.keys(speakers).map(s => {\n  const sp = speakers[s];\n  if (typeof sp === 'string') {\n    return `- @${s}: ${sp}`;\n  } else {\n    return `- @${s}: ${sp.role || 'участник'} - ${sp.contributions || (sp.main_topics ? sp.main_topics.join(', ') : '') || ''}`;\n  }\n}).join('\\n')}\\n\\nСООБЩЕНИЯ:\\n${messagesText}\\n\\n=== ЗАДАЧА ===\\n\\nСоздай резюме длиной ${spec.length}.\\n\\n${detailLevel === 'micro' ? `ФОРМАТ: Одно предложение суммирующее суть + эмоциональный тон.` : ''}\\n${detailLevel === 'minimal' ? `ФОРМАТ: Один параграф (2-3 предложения) с общей сутью и тоном.` : ''}\\n${detailLevel === 'standard' ? `ФОРМАТ: 2-3 параграфа:\\n1. Контекст и основные темы\\n2. Ключевые обсуждения и участники\\n3. Итоги и эмоциональный тон` : ''}\\n${detailLevel === 'detailed' ? `ФОРМАТ: Структурированный отчет:\\n1. Executive summary (1 параграф)\\n2. Детальное описание обсуждений\\n3. Эмоциональная динамика\\n4. Выводы и действия` : ''}\\n${detailLevel === 'comprehensive' ? `ФОРМАТ: Полный отчет:\\n1. Executive summary\\n2. Детальный анализ по темам\\n3. Эмоциональный arc\\n4. Связи и паттерны\\n5. Рекомендации` : ''}\\n\\nУчитывай:\\n- Эмоциональный контекст из анализа\\n- Роли участников\\n- Приоритеты тем\\n\\nФОРМАТ JSON:\\n{\"summary\": \"текст резюме\"}\\n\\nВАЖНО: Верни ТОЛЬКО валидный JSON!`;\n\nreturn [\n  {\n    json: {\n      prompt: prompt,\n      max_tokens: spec.tokens,\n      detail_level: detailLevel\n    }\n  }\n];"
      },
      "id": "prepare-prompt",
      "name": "Prepare Summary Prompt",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [450, 300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://gpt2giga-proxy:8090/v1/chat/completions",
        "authentication": "none",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ {\"model\": \"GigaChat\", \"messages\": [{\"role\": \"system\", \"content\": \"Ты - аналитик контекста диалогов. Создаешь адаптивные резюме разной детализации с учетом эмоционального контекста. Всегда возвращай валидный JSON.\"}, {\"role\": \"user\", \"content\": $json.prompt}], \"temperature\": 0.4, \"max_tokens\": $json.max_tokens} }}",
        "options": {
          "timeout": 60000
        }
      },
      "id": "gigachat-call",
      "name": "GigaChat: Summarize Context",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [650, 300]
    },
    {
      "parameters": {
        "jsCode": "// Parse GigaChat response and extract summary\nconst items = $input.all();\nconst response = items[0].json.choices?.[0]?.message?.content || '{}';\n\nlet summary = \"\";\n\ntry {\n  // Remove markdown code blocks if present\n  let cleanContent = response.trim();\n  if (cleanContent.startsWith('```')) {\n    const lines = cleanContent.split('\\n');\n    cleanContent = lines.slice(1, -1).join('\\n').trim();\n    if (cleanContent.startsWith('json')) {\n      cleanContent = cleanContent.slice(4).trim();\n    }\n  }\n  \n  // Parse JSON\n  const parsed = JSON.parse(cleanContent);\n  summary = parsed.summary || \"\";\n  \n} catch (e) {\n  console.error('Summary parse error:', e);\n  console.error('Response:', response.substring(0, 200));\n  \n  // Fallback: try to extract JSON from text\n  const jsonMatch = response.match(/\\{[\\s\\S]*?\\}/);\n  if (jsonMatch) {\n    try {\n      const parsed = JSON.parse(jsonMatch[0]);\n      summary = parsed.summary || \"\";\n    } catch (e2) {\n      console.error('Fallback parse failed:', e2);\n    }\n  }\n}\n\n// Fallback if empty\nif (!summary || summary.trim().length === 0) {\n  console.log('Summary empty, using fallback');\n  summary = \"Обсуждались различные темы\";\n}\n\n// Return summary\nreturn [\n  {\n    json: {\n      summary: summary\n    }\n  }\n];"
      },
      "id": "parse-response",
      "name": "Parse Summary",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [850, 300]
    }
  ],
  "connections": {
    "Execute Workflow Trigger": {
      "main": [
        [
          {
            "node": "Prepare Summary Prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Summary Prompt": {
      "main": [
        [
          {
            "node": "GigaChat: Summarize Context",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GigaChat: Summarize Context": {
      "main": [
        [
          {
            "node": "Parse Summary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-10-13T16:10:00.000Z",
  "versionId": "1"
}

