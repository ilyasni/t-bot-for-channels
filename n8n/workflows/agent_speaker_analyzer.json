{
  "name": "Agent: Speaker Analyzer",
  "nodes": [
    {
      "parameters": {},
      "id": "execute-workflow-trigger",
      "name": "Execute Workflow Trigger",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1,
      "position": [
        250,
        300
      ]
    },
    {
      "parameters": {
        "jsCode": "// Prepare ENHANCED prompt for speaker analysis with topics and emotions context\nconst items = $input.all();\nconst data = items[0].json;\n\nconst messagesText = data.messages_text || \"\";\nconst assessment = data.assessment || {};\nconst topics = data.topics || [];\nconst emotions = data.emotions || {};\nconst detailLevel = assessment.detail_level || \"standard\";\n\n// Build context-aware prompt\nlet prompt = \"\";\n\nif (detailLevel === \"micro\" || detailLevel === \"minimal\") {\n  prompt = `Проанализируй кто о чем говорил.\n\nСООБЩЕНИЯ:\n${messagesText}\n\nСоздай краткое резюме по каждому активному участнику (топ-3).\n\nВАЖНО: Используй ТОЧНЫЕ usernames (boyversus, KseniaKrasnobaeva). НЕ заменяй на User1.\n\nФОРМАТ:\n{\"speakers\": {\"username\": \"что обсуждал\"}}\n\nВерни ТОЛЬКО валидный JSON!`;\n  \n} else {\n  const topicsText = topics.map(t => `- ${t.name} (${t.priority})`).join('\\n');\n  const collabText = emotions.indicators ? `- Сотрудничество: ${emotions.indicators.collaboration || 0.5}\\n- Конфликт: ${emotions.indicators.conflict || 0.1}` : '';\n  const emotionalToneField = (detailLevel === 'detailed' || detailLevel === 'comprehensive') ? ',\\n      \"emotional_tone\": \"constructive\"' : '';\n  \n  prompt = `Проанализируй участников диалога с учетом тем и эмоционального контекста.\n\nУРОВЕНЬ: ${detailLevel}\n\n=== КОНТЕКСТ ===\n\nТЕМЫ ОБСУЖДЕНИЯ:\n${topicsText}\n\nЭМОЦИОНАЛЬНЫЙ ФОН:\n- Общий тон: ${emotions.overall_tone || 'neutral'}\n- Атмосфера: ${emotions.atmosphere || 'обычная'}\n${collabText}\n\nСООБЩЕНИЯ:\n${messagesText}\n\n=== ЗАДАЧА ===\n\nДля каждого активного участника (топ-5) определи:\n1. Роль в дискуссии: initiator | expert | critic | supporter | observer\n2. Основные темы которые обсуждал\n3. Позиция/мнение по темам (если выражал)\n4. Ключевые вклады в обсуждение\n${detailLevel === 'detailed' || detailLevel === 'comprehensive' ? '5. Эмоциональный окрас участия' : ''}\n\nВАЖНО: Используй ТОЧНЫЕ usernames (boyversus, KseniaKrasnobaeva). НЕ заменяй на User1 или участник1.\n\nФОРМАТ:\n{\n  \"speakers\": {\n    \"username\": {\n      \"role\": \"initiator\",\n      \"main_topics\": [темы из СПИСКА ТЕМА ОБСУЖДЕНИЯ выше],\n      \"contributions\": \"Краткое описание вклада\"${emotionalToneField}\n    }\n  }\n}\n\nВАЖНО: Верни ТОЛЬКО валидный JSON!`;\n}\n\n// Calculate max_tokens safely\nconst maxTokens = (assessment.token_budgets && assessment.token_budgets.speakers) ? assessment.token_budgets.speakers : 500;\n\nreturn [\n  {\n    json: {\n      prompt: prompt,\n      max_tokens: maxTokens,\n      detail_level: detailLevel\n    }\n  }\n];"
      },
      "id": "prepare-prompt",
      "name": "Prepare Speaker Prompt",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        450,
        300
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://gpt2giga-proxy:8090/v1/chat/completions",
        "authentication": "none",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ {\"model\": \"GigaChat\", \"messages\": [{\"role\": \"system\", \"content\": \"Ты - аналитик участников диалогов. Определяешь роли, позиции, вклады участников с учетом эмоционального контекста. Всегда возвращай валидный JSON.\"}, {\"role\": \"user\", \"content\": $json.prompt}], \"temperature\": 0.3, \"max_tokens\": $json.max_tokens} }}",
        "options": {
          "timeout": 60000
        }
      },
      "id": "gigachat-call",
      "name": "GigaChat: Analyze Speakers",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        650,
        300
      ]
    },
    {
      "parameters": {
        "jsCode": "// Parse GigaChat speaker analysis response\nconst items = $input.all();\nconst response = items[0].json.choices?.[0]?.message?.content || '{}';\nconst detailLevel = $('Prepare Speaker Prompt').first().json.detail_level;\n\nlet speakers = {};\n\ntry {\n  // Remove markdown code blocks if present\n  let cleanContent = response.trim();\n  if (cleanContent.startsWith('```')) {\n    const lines = cleanContent.split('\\n');\n    cleanContent = lines.slice(1, -1).join('\\n').trim();\n    if (cleanContent.startsWith('json')) {\n      cleanContent = cleanContent.slice(4).trim();\n    }\n  }\n  \n  // Parse JSON\n  const parsed = JSON.parse(cleanContent);\n  speakers = parsed.speakers || {};\n  \n  console.log(`✅ Speaker analysis успешно`);\n  console.log(`   Speakers: ${Object.keys(speakers).length}`);\n  console.log(`   Detail level: ${detailLevel}`);\n  \n} catch (e) {\n  console.error('❌ Speaker parse error:', e.message);\n  console.error('Response:', response.substring(0, 200));\n  \n  // Fallback: try to extract JSON from text\n  const jsonMatch = response.match(/\\{[\\s\\S]*?\\}/);\n  if (jsonMatch) {\n    try {\n      const parsed = JSON.parse(jsonMatch[0]);\n      speakers = parsed.speakers || {};\n    } catch (e2) {\n      console.error('Fallback parse failed:', e2.message);\n      speakers = {};\n    }\n  }\n}\n\n// Return speakers\nreturn [\n  {\n    json: {\n      speakers: speakers\n    }\n  }\n];"
      },
      "id": "parse-response",
      "name": "Parse Speakers",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        850,
        300
      ]
    }
  ],
  "connections": {
    "Execute Workflow Trigger": {
      "main": [
        [
          {
            "node": "Prepare Speaker Prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Speaker Prompt": {
      "main": [
        [
          {
            "node": "GigaChat: Analyze Speakers",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GigaChat: Analyze Speakers": {
      "main": [
        [
          {
            "node": "Parse Speakers",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-10-14T21:00:00.000Z",
  "versionId": "1"
}