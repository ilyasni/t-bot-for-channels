{
  "name": "Agent: Speaker Analyzer",
  "nodes": [
    {
      "parameters": {},
      "id": "execute-workflow-trigger",
      "name": "Execute Workflow Trigger",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1,
      "position": [
        250,
        300
      ]
    },
    {
      "parameters": {
        "jsCode": "// Prepare HTTP Request data for speaker analysis\nconst items = $input.all();\nconst data = items[0].json;\n\n// Get original messages from execution context\nconst executionData = $execution.customData.getAll();\nconst originalMessages = executionData.original_messages || data.messages || [];\nconst originalMessagesText = executionData.original_messages_text || data.messages_text || \"\";\n\nconst messagesText = originalMessagesText;\nconst assessment = data.assessment || {};\nconst topics = data.topics || [];\nconst emotions = data.emotions || {};\nconst detailLevel = assessment.detail_level || \"standard\";\n\n// Build system message\nconst systemMessage = \"–¢—ã - –∞–Ω–∞–ª–∏—Ç–∏–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–∏–∞–ª–æ–≥–æ–≤. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –¢–û–õ–¨–ö–û —Ç–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö. –ó–ê–ü–†–ï–©–ï–ù–û –ø—Ä–∏–¥—É–º—ã–≤–∞—Ç—å –∏–º–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–ß–ù–´–ï username –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π. –í–æ–∑–≤—Ä–∞—â–∞–π –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–π JSON: {\\\"speakers\\\": {\\\"username1\\\": {\\\"role\\\": \\\"...\\\", \\\"activity\\\": \\\"...\\\"}, ...}}\";\n\n// Build user message\nlet userMessage = \"\";\n\nif (detailLevel === \"micro\" || detailLevel === \"minimal\") {\n  userMessage = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫—Ç–æ –æ —á–µ–º –≥–æ–≤–æ—Ä–∏–ª.\\n\\n–°–û–û–ë–©–ï–ù–ò–Ø:\\n${messagesText}\\n\\n–°–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –ø–æ –∫–∞–∂–¥–æ–º—É –∞–∫—Ç–∏–≤–Ω–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É (—Ç–æ–ø-3).\\n\\n–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û - USERNAMES:\\n- messages —Å–æ–¥–µ—Ä–∂–∞—Ç –¢–û–ß–ù–´–ï usernames –∫–∞–∫ –æ–Ω–∏ –µ—Å—Ç—å: ${originalMessages.map(m => m.username).join(', ')}\\n- –ó–ê–ü–†–ï–©–ï–ù–û –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å user1, user2, User1, —É—á–∞—Å—Ç–Ω–∏–∫1 –∏–ª–∏ –ª—é–±—ã–µ –æ–±–æ–±—â–µ–Ω–∏—è\\n- –ü—Ä–∏–º–µ—Ä –ü–†–ê–í–ò–õ–¨–ù–û: \"KseniaKrasnobaeva –æ–±—Å—É–∂–¥–∞–ª–∞ –ø—Ä–æ–±–ª–µ–º—É\"\\n- –ü—Ä–∏–º–µ—Ä –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û: \"user1 –æ–±—Å—É–∂–¥–∞–ª –ø—Ä–æ–±–ª–µ–º—É\" ‚ùå\\n- –ï—Å–ª–∏ –≤–∏–¥–∏—à—å user1/user2 - –∏—â–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ –≤ messages\\n\\n–§–û–†–ú–ê–¢:\\n{\"speakers\": {\"username\": \"—á—Ç–æ –æ–±—Å—É–∂–¥–∞–ª\"}}\\n\\n–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–π JSON!`;\n  \n} else {\n  const topicsText = topics.map(t => `- ${t.name} (${t.priority})`).join('\\\\n');\n  const collabText = emotions.indicators ? `- –°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ: ${emotions.indicators.collaboration || 0.5}\\\\n- –ö–æ–Ω—Ñ–ª–∏–∫—Ç: ${emotions.indicators.conflict || 0.1}` : '';\n  const emotionalToneField = (detailLevel === 'detailed' || detailLevel === 'comprehensive') ? ',\\\\n      \"emotional_tone\": \"constructive\"' : '';\n  \n  userMessage = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–∏–∞–ª–æ–≥–∞ —Å —É—á–µ—Ç–æ–º —Ç–µ–º –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.\\n\\n–£–†–û–í–ï–ù–¨: ${detailLevel}\\n\\n=== –ö–û–ù–¢–ï–ö–°–¢ ===\\n\\n–¢–ï–ú–´ –û–ë–°–£–ñ–î–ï–ù–ò–Ø:\\n${topicsText}\\n\\n–≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–´–ô –§–û–ù:\\n- –û–±—â–∏–π —Ç–æ–Ω: ${emotions.overall_tone || 'neutral'}\\n- –ê—Ç–º–æ—Å—Ñ–µ—Ä–∞: ${emotions.atmosphere || '–æ–±—ã—á–Ω–∞—è'}\\n${collabText}\\n\\n–°–û–û–ë–©–ï–ù–ò–Ø:\\n${messagesText}\\n\\n=== –ó–ê–î–ê–ß–ê ===\\n\\n–î–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ (—Ç–æ–ø-5) –æ–ø—Ä–µ–¥–µ–ª–∏:\\n1. –†–æ–ª—å –≤ –¥–∏—Å–∫—É—Å—Å–∏–∏: initiator | expert | critic | supporter | observer\\n2. –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã –∫–æ—Ç–æ—Ä—ã–µ –æ–±—Å—É–∂–¥–∞–ª\\n3. –ü–æ–∑–∏—Ü–∏—è/–º–Ω–µ–Ω–∏–µ –ø–æ —Ç–µ–º–∞–º (–µ—Å–ª–∏ –≤—ã—Ä–∞–∂–∞–ª)\\n4. –ö–ª—é—á–µ–≤—ã–µ –≤–∫–ª–∞–¥—ã –≤ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ\\n${detailLevel === 'detailed' || detailLevel === 'comprehensive' ? '5. –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ–∫—Ä–∞—Å —É—á–∞—Å—Ç–∏—è' : ''}\\n\\n–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û - USERNAMES:\\n- messages —Å–æ–¥–µ—Ä–∂–∞—Ç –¢–û–ß–ù–´–ï usernames –∫–∞–∫ –æ–Ω–∏ –µ—Å—Ç—å: ${originalMessages.map(m => m.username).join(', ')}\\n- –ó–ê–ü–†–ï–©–ï–ù–û –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å user1, user2, User1, —É—á–∞—Å—Ç–Ω–∏–∫1 –∏–ª–∏ –ª—é–±—ã–µ –æ–±–æ–±—â–µ–Ω–∏—è\\n- –ü—Ä–∏–º–µ—Ä –ü–†–ê–í–ò–õ–¨–ù–û: \"KseniaKrasnobaeva –æ–±—Å—É–∂–¥–∞–ª–∞ –ø—Ä–æ–±–ª–µ–º—É\"\\n- –ü—Ä–∏–º–µ—Ä –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û: \"user1 –æ–±—Å—É–∂–¥–∞–ª –ø—Ä–æ–±–ª–µ–º—É\" ‚ùå\\n- –ï—Å–ª–∏ –≤–∏–¥–∏—à—å user1/user2 - –∏—â–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ –≤ messages\\n\\n–§–û–†–ú–ê–¢:\\n{\\n  \"speakers\": {\\n    \"username\": {\\n      \"role\": \"initiator\",\\n      \"main_topics\": [—Ç–µ–º—ã –∏–∑ –°–ü–ò–°–ö–ê –¢–ï–ú–ê –û–ë–°–£–ñ–î–ï–ù–ò–Ø –≤—ã—à–µ],\\n      \"contributions\": \"–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∞\"${emotionalToneField}\\n    }\\n  }\\n}\\n\\n–í–ê–ñ–ù–û: –í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–π JSON!`;\n}\n\n// Calculate max_tokens safely\nconst maxTokens = (assessment.token_budgets && assessment.token_budgets.speakers) ? assessment.token_budgets.speakers : 500;\n\nreturn [\n  {\n    json: {\n      system_message: systemMessage,\n      user_message: userMessage,\n      max_tokens: maxTokens,\n      detail_level: detailLevel\n    }\n  }\n];"
      },
      "id": "prepare-prompt",
      "name": "Prepare Speaker Prompt",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        450,
        300
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://gpt2giga-proxy:8090/v1/chat/completions",
        "authentication": "none",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ {\"model\": \"GigaChat-Pro\", \"messages\": [{\"role\": \"system\", \"content\": $json.system_message}, {\"role\": \"user\", \"content\": $json.user_message}], \"temperature\": 0.1, \"max_tokens\": $json.max_tokens, \"response_format\": {\"type\": \"json_object\"}} }}",
        "options": {
          "timeout": 60000
        }
      },
      "id": "gigachat-call",
      "name": "GigaChat: Analyze Speakers",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        650,
        300
      ]
    },
    {
      "parameters": {
        "jsCode": "// Parse GigaChat response from gpt2giga proxy\nconst response = $input.first().json.choices?.[0]?.message?.content || '{}';\n\nconsole.log('üì• GigaChat response received:', response.substring(0, 100));\n\nreturn [\n  {\n    json: {\n      raw_content: response\n    }\n  }\n];"
      },
      "id": "parse-response",
      "name": "Parse Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        850,
        300
      ]
    },
    {
      "parameters": {
        "workflowId": "utility_json_guardrail",
        "source": "database",
        "inputData": {
          "values": [
            {
              "json": {
                "raw_content": "={{ $json.raw_content }}",
                "data_type": "speakers",
                "original_messages": "={{ $execution.customData.getAll().original_messages }}"
              }
            }
          ]
        }
      },
      "id": "execute-guardrail",
      "name": "Execute Guardrail",
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1,
      "position": [
        1050,
        300
      ]
    }
  ],
  "connections": {
    "Execute Workflow Trigger": {
      "main": [
        [
          {
            "node": "Prepare Speaker Prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Speaker Prompt": {
      "main": [
        [
          {
            "node": "GigaChat: Analyze Speakers",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GigaChat: Analyze Speakers": {
      "main": [
        [
          {
            "node": "Parse Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Response": {
      "main": [
        [
          {
            "node": "Execute Guardrail",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-10-14T21:00:00.000Z",
  "versionId": "1"
}