{
  "name": "Agent: Emotion Analyzer",
  "nodes": [
    {
      "parameters": {},
      "id": "execute-workflow-trigger",
      "name": "Execute Workflow Trigger",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1,
      "position": [250, 300]
    },
    {
      "parameters": {
        "jsCode": "// Prepare emotion analysis prompt\nconst items = $input.all();\nconst data = items[0].json;\n\nconst assessment = data.assessment || {};\nconst topics = data.topics || [];\nconst messagesText = data.messages_text || \"\";\nconst detailLevel = assessment.detail_level || \"standard\";\nconst dialogueType = assessment.dialogue_type || \"casual_chat\";\n\n// Safely calculate max_tokens\nconst maxTokens = (assessment.token_budgets && assessment.token_budgets.emotion) ? assessment.token_budgets.emotion : 400;\n\n// === BUILD ADAPTIVE PROMPT ===\n\nlet prompt = \"\";\n\nif (detailLevel === \"micro\") {\n  prompt = `–û–ø—Ä–µ–¥–µ–ª–∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–Ω –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ –û–î–ù–ò–ú –°–õ–û–í–û–ú + —ç–º–æ–¥–∑–∏.\\n\\n–°–û–û–ë–©–ï–ù–ò–Ø:\\n${messagesText}\\n\\n–ü—Ä–∏–º–µ—Ä—ã: \"–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π üòä\", \"–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π üòê\", \"–Ω–∞–ø—Ä—è–∂–µ–Ω–Ω—ã–π üò∞\"\\n\\n–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON: {\"tone\": \"—Å–ª–æ–≤–æ —ç–º–æ–¥–∑–∏\"}`;\n  \n} else if (detailLevel === \"minimal\") {\n  prompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ–∫—Ä–∞—Å –¥–∏–∞–ª–æ–≥–∞.\\n\\n–¢–ò–ü –î–ò–ê–õ–û–ì–ê: ${dialogueType}\\n\\n–°–û–û–ë–©–ï–ù–ò–Ø:\\n${messagesText}\\n\\n–û–ø—Ä–µ–¥–µ–ª–∏:\\n1. –û–±—â–∏–π —Ç–æ–Ω (positive/neutral/negative)\\n2. –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å (0.0-1.0)\\n3. –ê—Ç–º–æ—Å—Ñ–µ—Ä–∞ (1 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ)\\n\\n–§–û–†–ú–ê–¢:\\n{\\n  \"overall_tone\": \"positive|neutral|negative\",\\n  \"tone_intensity\": 0.5,\\n  \"atmosphere\": \"–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∞—Ç–º–æ—Å—Ñ–µ—Ä—ã\"\\n}\\n\\n–í–ê–ñ–ù–û: –í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–π JSON –±–µ–∑ markdown –±–ª–æ–∫–æ–≤!`;\n  \n} else if (detailLevel === \"standard\") {\n  prompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ–∫—Ä–∞—Å –¥–∏–∞–ª–æ–≥–∞.\\n\\n–¢–ò–ü –î–ò–ê–õ–û–ì–ê: ${dialogueType}\\n–£–†–û–í–ï–ù–¨: standard\\n\\n–¢–ï–ú–´ –û–ë–°–£–ñ–î–ï–ù–ò–Ø:\\n${topics.map(t => `- ${t.name}`).join('\\n')}\\n\\n–°–û–û–ë–©–ï–ù–ò–Ø:\\n${messagesText}\\n\\n–û–ø—Ä–µ–¥–µ–ª–∏:\\n\\n1. –û–ë–©–ò–ô –¢–û–ù:\\n   - positive/neutral/negative\\n   - –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å (0.0-1.0)\\n   - –ê—Ç–º–æ—Å—Ñ–µ—Ä–∞ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)\\n\\n2. –≠–ú–û–¶–ò–ò –ü–û –¢–ï–ú–ê–ú:\\n   - –î–ª—è –∫–∞–∂–¥–æ–π —Ç–µ–º—ã: –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∞—è —ç–º–æ—Ü–∏—è\\n   - –ü—Ä–∏–º–µ—Ä—ã: concern, enthusiasm, frustration, curiosity, satisfaction\\n\\n3. –ò–ù–î–ò–ö–ê–¢–û–†–´ (0.0-1.0):\\n   - –ö–æ–Ω—Ñ–ª–∏–∫—Ç\\n   - –°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ\\n   - –°—Ç—Ä–µ—Å—Å/–Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ\\n   - –≠–Ω—Ç—É–∑–∏–∞–∑–º\\n\\n–§–û–†–ú–ê–¢:\\n{\\n  \"overall_tone\": \"neutral\",\\n  \"tone_intensity\": 0.6,\\n  \"atmosphere\": \"–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–∞\",\\n  \"emotions_by_topic\": {\\n    \"—Ç–µ–º–∞1\": \"concern\",\\n    \"—Ç–µ–º–∞2\": \"neutral\"\\n  },\\n  \"indicators\": {\\n    \"conflict\": 0.2,\\n    \"collaboration\": 0.8,\\n    \"stress\": 0.4,\\n    \"enthusiasm\": 0.6\\n  }\\n}\\n\\n–í–ê–ñ–ù–û: –í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–π JSON!`;\n  \n} else {\n  prompt = `–ü—Ä–æ–≤–µ–¥–∏ –≥–ª—É–±–æ–∫–∏–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∏–∞–ª–æ–≥–∞.\\n\\n–¢–ò–ü –î–ò–ê–õ–û–ì–ê: ${dialogueType}\\n–£–†–û–í–ï–ù–¨: ${detailLevel}\\n\\n–¢–ï–ú–´ –û–ë–°–£–ñ–î–ï–ù–ò–Ø:\\n${topics.map(t => `- ${t.name} (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${t.priority || 'medium'})`).join('\\n')}\\n\\n–°–û–û–ë–©–ï–ù–ò–Ø:\\n${messagesText}\\n\\n–ü—Ä–æ–≤–µ–¥–∏ –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑:\\n\\n1. –û–ë–©–ò–ô –¢–û–ù –ò –ê–¢–ú–û–°–§–ï–†–ê:\\n   - –¢–æ–Ω: positive/neutral/negative\\n   - –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å: 0.0-1.0\\n   - –ê—Ç–º–æ—Å—Ñ–µ—Ä–∞: –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)\\n\\n2. –≠–ú–û–¶–ò–ò –ü–û –¢–ï–ú–ê–ú:\\n   - –î–ª—è –∫–∞–∂–¥–æ–π —Ç–µ–º—ã: –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏–µ —ç–º–æ—Ü–∏–∏\\n   - –ö—Ç–æ –≤—ã—Ä–∞–∂–∞–ª –∫–∞–∫–∏–µ —ç–º–æ—Ü–∏–∏\\n   - –ü—Ä–∏–º–µ—Ä: {\"—Ç–µ–º–∞\": {\"dominant_emotion\": \"concern\", \"participants_emotions\": {\"@user\": \"worried\"}}}\\n\\n3. –≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–ê–Ø –î–ò–ù–ê–ú–ò–ö–ê:\\n   - –ö–∞–∫ –Ω–∞—á–∞–ª—Å—è –¥–∏–∞–ª–æ–≥ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ\\n   - –ë—ã–ª–∏ –ª–∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∏–∫–∏ (–∏ –∫–æ–≥–¥–∞)\\n   - –ö–∞–∫ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è\\n   - –ö—Ä–∞—Ç–∫–∞—è arc –≤ –æ–¥–Ω–æ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏\\n\\n4. –ò–ù–î–ò–ö–ê–¢–û–†–´ (0.0-1.0):\\n   - conflict: —É—Ä–æ–≤–µ–Ω—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞\\n   - collaboration: –∫–∞—á–µ—Å—Ç–≤–æ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞\\n   - stress: —É—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞/–Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è\\n   - enthusiasm: —É—Ä–æ–≤–µ–Ω—å —ç–Ω—Ç—É–∑–∏–∞–∑–º–∞\\n\\n5. –ü–†–ï–û–ë–õ–ê–î–ê–Æ–©–ò–ï –≠–ú–û–¶–ò–ò (–µ—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å detailed+):\\n   - –¢–æ–ø-3 —ç–º–æ—Ü–∏–∏ —Å –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏\\n   - –ü—Ä–∏–º–µ—Ä: \"–û–∑–∞–±–æ—á–µ–Ω–Ω–æ—Å—Ç—å (40%), –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å (35%), –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (25%)\"\\n\\n–§–û–†–ú–ê–¢:\\n{\\n  \"overall_tone\": \"neutral\",\\n  \"tone_intensity\": 0.65,\\n  \"atmosphere\": \"...\",\\n  \"emotions_by_topic\": {...},\\n  \"emotional_arc\": \"–ù–∞—á–∞–ª—Å—è —Å–ø–æ–∫–æ–π–Ω–æ ‚Üí –ø–∏–∫ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è ‚Üí –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–æ\",\\n  \"indicators\": {...},\\n  \"dominant_emotions\": \"–û–∑–∞–±–æ—á–µ–Ω–Ω–æ—Å—Ç—å (40%), –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å (35%), –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (25%)\",\\n  \"emotional_peaks\": [\\n    {\"time\": \"12:45\", \"emotion\": \"concern\", \"trigger\": \"–í—ã—è–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã\"}\\n  ]\\n}\\n\\n–í–ê–ñ–ù–û: –í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–π JSON!`;\n}\n\nreturn [\n  {\n    json: {\n      prompt: prompt,\n      max_tokens: maxTokens,\n      detail_level: detailLevel,\n      dialogue_type: dialogueType\n    }\n  }\n];"
      },
      "id": "prepare-emotion-prompt",
      "name": "Prepare Emotion Prompt",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [450, 300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://gpt2giga-proxy:8090/v1/chat/completions",
        "authentication": "none",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ {\"model\": \"GigaChat\", \"messages\": [{\"role\": \"system\", \"content\": \"–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–º—É –∞–Ω–∞–ª–∏–∑—É –¥–∏–∞–ª–æ–≥–æ–≤. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—à—å —Ç–æ–Ω, –∞—Ç–º–æ—Å—Ñ–µ—Ä—É, —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –¥–∏–Ω–∞–º–∏–∫—É —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤. –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–π –≤–∞–ª–∏–¥–Ω—ã–π JSON.\"}, {\"role\": \"user\", \"content\": $json.prompt}], \"temperature\": 0.4, \"max_tokens\": $json.max_tokens} }}",
        "options": {
          "timeout": 60000
        }
      },
      "id": "gigachat-emotion",
      "name": "GigaChat: Analyze Emotions",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [650, 300]
    },
    {
      "parameters": {
        "jsCode": "// Parse GigaChat emotion analysis response\nconst items = $input.all();\nconst response = items[0].json.choices?.[0]?.message?.content || '{}';\nconst detailLevel = $('Prepare Emotion Prompt').first().json.detail_level;\n\nlet emotions = {};\n\ntry {\n  // Remove markdown code blocks if present\n  let cleanContent = response.trim();\n  if (cleanContent.startsWith('```')) {\n    const lines = cleanContent.split('\\n');\n    cleanContent = lines.slice(1, -1).join('\\n').trim();\n    if (cleanContent.startsWith('json')) {\n      cleanContent = cleanContent.slice(4).trim();\n    }\n  }\n  \n  // Parse JSON\n  emotions = JSON.parse(cleanContent);\n  \n  console.log(`‚úÖ Emotion analysis —É—Å–ø–µ—à–Ω–æ:`);\n  console.log(`   Overall tone: ${emotions.overall_tone || emotions.tone || 'unknown'}`);\n  console.log(`   Intensity: ${emotions.tone_intensity || 'N/A'}`);\n  \n} catch (e) {\n  console.error('‚ùå Emotion parse error:', e.message);\n  console.error('Response:', response.substring(0, 200));\n  \n  // Fallback: try to extract JSON from text\n  const jsonMatch = response.match(/\\{[\\s\\S]*?\\}/);\n  if (jsonMatch) {\n    try {\n      emotions = JSON.parse(jsonMatch[0]);\n    } catch (e2) {\n      console.error('Fallback parse failed:', e2.message);\n      \n      // Hard fallback\n      emotions = {\n        overall_tone: \"neutral\",\n        tone_intensity: 0.5,\n        atmosphere: \"–û–±—ã—á–Ω—ã–π –¥–∏–∞–ª–æ–≥\"\n      };\n    }\n  } else {\n    // Hard fallback if no JSON found\n    emotions = {\n      overall_tone: \"neutral\",\n      tone_intensity: 0.5,\n      atmosphere: \"–û–±—ã—á–Ω—ã–π –¥–∏–∞–ª–æ–≥\"\n    };\n  }\n}\n\n// Ensure required fields based on detail level\nif (detailLevel === \"micro\" && !emotions.tone) {\n  emotions.tone = \"–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π üòê\";\n}\n\nif (detailLevel !== \"micro\" && !emotions.overall_tone) {\n  emotions.overall_tone = \"neutral\";\n  emotions.tone_intensity = 0.5;\n  emotions.atmosphere = \"–û–±—ã—á–Ω—ã–π –¥–∏–∞–ª–æ–≥\";\n}\n\n// Return emotions\nreturn [\n  {\n    json: {\n      emotions: emotions\n    }\n  }\n];"
      },
      "id": "parse-emotions",
      "name": "Parse Emotions",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [850, 300]
    }
  ],
  "connections": {
    "Execute Workflow Trigger": {
      "main": [
        [
          {
            "node": "Prepare Emotion Prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Emotion Prompt": {
      "main": [
        [
          {
            "node": "GigaChat: Analyze Emotions",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GigaChat: Analyze Emotions": {
      "main": [
        [
          {
            "node": "Parse Emotions",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-10-14T20:00:00.000Z",
  "versionId": "1"
}
