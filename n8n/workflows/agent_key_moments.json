{
  "name": "Agent: Key Moments Extractor",
  "nodes": [
    {
      "parameters": {},
      "id": "execute-workflow-trigger",
      "name": "Execute Workflow Trigger",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1,
      "position": [
        250,
        300
      ]
    },
    {
      "parameters": {
        "jsCode": "// Prepare key moments extraction prompt\nconst items = $input.all();\nconst data = items[0].json;\n\nconst assessment = data.assessment || {};\nconst topics = data.topics || [];\nconst emotions = data.emotions || {};\nconst speakers = data.speakers || {};\nconst messagesText = data.messages_text || \"\";\nconst messages = data.messages || [];\nconst detailLevel = assessment.detail_level || \"standard\";\n\n// === BUILD PROMPT ===\n\nconst prompt = `–ò–∑–≤–ª–µ–∫–∏ –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã –∏–∑ –¥–∏–∞–ª–æ–≥–∞.\\n\\n–¢–ò–ü –î–ò–ê–õ–û–ì–ê: ${assessment.dialogue_type}\\n–£–†–û–í–ï–ù–¨: ${detailLevel}\\n\\n=== –ö–û–ù–¢–ï–ö–°–¢ ===\\n\\n–¢–ï–ú–´:\\n${topics.map(t => `- ${t.name} (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${t.priority || 'medium'})`).join('\\n')}\\n\\n–£–ß–ê–°–¢–ù–ò–ö–ò:\\n${Object.keys(speakers).map(s => `- @${s}: ${speakers[s].role || '—É—á–∞—Å—Ç–Ω–∏–∫'}`).join('\\n')}\\n\\n–≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–´–ô –§–û–ù:\\n- –û–±—â–∏–π —Ç–æ–Ω: ${emotions.overall_tone || emotions.tone || 'neutral'}\\n- –ê—Ç–º–æ—Å—Ñ–µ—Ä–∞: ${emotions.atmosphere || '–æ–±—ã—á–Ω–∞—è'}\\n\\n–°–û–û–ë–©–ï–ù–ò–Ø:\\n${messagesText}\\n\\n=== –ó–ê–î–ê–ß–ê ===\\n\\n–ù–∞–π–¥–∏ –∏ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–π –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã:\\n\\n1. ‚úÖ –†–ï–®–ï–ù–ò–Ø - —á—Ç–æ –±—ã–ª–æ —Ä–µ—à–µ–Ω–æ\\n2. ‚ùì –í–û–ü–†–û–°–´ - –æ—Ç–∫—Ä—ã—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –æ—Ç–≤–µ—Ç–∞\\n3. ‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–´ - –≤—ã—è–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ —Ä–∏—Å–∫–∏\\n4. ü§ù –î–û–ì–û–í–û–†–ï–ù–ù–û–°–¢–ò - —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è/—Å—Ä–æ–∫–∏\\n5. üî¥ –†–ò–°–ö–ò/–û–ü–ê–°–ï–ù–ò–Ø - –≤—ã—Å–∫–∞–∑–∞–Ω–Ω—ã–µ concerns\\n\\n–î–ª—è –ö–ê–ñ–î–û–ì–û –º–æ–º–µ–Ω—Ç–∞ —É–∫–∞–∂–∏:\\n- type: decision | question | problem | agreement | risk\\n- content: –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (1 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ)\\n- context: –ø–æ—á–µ–º—É —ç—Ç–æ –≤–æ–∑–Ω–∏–∫–ª–æ\\n- participants: —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ ([@username])\\n- why: –ø—Ä–∏—á–∏–Ω–∞/–æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ\\n- consequences: –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –∏–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è\\n- urgency: low | medium | high\\n- emotional_context: —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –º–æ–º–µ–Ω—Ç–∞\\n- participant_emotions: —ç–º–æ—Ü–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ {\"@user\": \"emotion\"}\\n\\n–§–û–†–ú–ê–¢:\\n{\\n  \"key_moments\": [\\n    {\\n      \"type\": \"decision\",\\n      \"content\": \"–û—Ç–ª–æ–∂–∏—Ç—å —Ä–µ–ª–∏–∑ –¥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è\",\\n      \"context\": \"–û–±–Ω–∞—Ä—É–∂–µ–Ω –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –±–∞–≥\",\\n      \"participants\": [\"@–û–∫—Å–∞–Ω–∞\", \"@–ò–≤–∞–Ω\"],\\n      \"why\": \"–ë–∞–≥ –±–ª–æ–∫–∏—Ä—É–µ—Ç production\",\\n      \"consequences\": \"–†–µ–ª–∏–∑ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—Å—è –Ω–∞ –Ω–µ–¥–µ–ª—é\",\\n      \"urgency\": \"high\",\\n      \"emotional_context\": \"Concern, but constructive approach\",\\n      \"participant_emotions\": {\"@–û–∫—Å–∞–Ω–∞\": \"worried_but_professional\"}\\n    }\\n  ]\\n}\\n\\n–í–ê–ñ–ù–û:\\n- –í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–π JSON –±–µ–∑ markdown –±–ª–æ–∫–æ–≤\\n- –ò–∑–≤–ª–µ–∫–∞–π —Ç–æ–ª—å–∫–æ –†–ï–ê–õ–¨–ù–û –≤–∞–∂–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã (3-10 —à—Ç—É–∫)\\n- –ï—Å–ª–∏ –Ω–µ—Ç –∫–ª—é—á–µ–≤—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤, –≤–µ—Ä–Ω–∏ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤`;\n\n// Calculate max_tokens safely\nconst maxTokens = (assessment.token_budgets && assessment.token_budgets.key_moments) ? assessment.token_budgets.key_moments : 800;\n\nreturn [\n  {\n    json: {\n      prompt: prompt,\n      max_tokens: maxTokens,\n      detail_level: detailLevel,\n      message_count: messages.length\n    }\n  }\n];"
      },
      "id": "prepare-key-moments-prompt",
      "name": "Prepare Key Moments Prompt",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        450,
        300
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://gpt2giga-proxy:8090/v1/chat/completions",
        "authentication": "none",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ {\"model\": \"GigaChat\", \"messages\": [{\"role\": \"system\", \"content\": \"–¢—ã - –∞–Ω–∞–ª–∏—Ç–∏–∫ –∫–ª—é—á–µ–≤—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤ –≤ –¥–∏–∞–ª–æ–≥–∞—Ö. –ò–∑–≤–ª–µ–∫–∞–µ—à—å —Ä–µ—à–µ–Ω–∏—è, –≤–æ–ø—Ä–æ—Å—ã, –ø—Ä–æ–±–ª–µ–º—ã, –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏, —Ä–∏—Å–∫–∏ —Å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º. –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–π –≤–∞–ª–∏–¥–Ω—ã–π JSON.\"}, {\"role\": \"user\", \"content\": $json.prompt}], \"temperature\": 0.3, \"max_tokens\": $json.max_tokens} }}",
        "options": {
          "timeout": 90000
        }
      },
      "id": "gigachat-key-moments",
      "name": "GigaChat: Extract Key Moments",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        650,
        300
      ]
    },
    {
      "parameters": {
        "jsCode": "// Parse GigaChat key moments response\nconst items = $input.all();\nconst response = items[0].json.choices?.[0]?.message?.content || '{}';\n\nlet keyMoments = [];\n\ntry {\n  // Remove markdown code blocks if present\n  let cleanContent = response.trim();\n  if (cleanContent.startsWith('```')) {\n    const lines = cleanContent.split('\\n');\n    cleanContent = lines.slice(1, -1).join('\\n').trim();\n    if (cleanContent.startsWith('json')) {\n      cleanContent = cleanContent.slice(4).trim();\n    }\n  }\n  \n  // Parse JSON\n  const parsed = JSON.parse(cleanContent);\n  keyMoments = parsed.key_moments || [];\n  \n  console.log(`‚úÖ Key moments extracted: ${keyMoments.length} –º–æ–º–µ–Ω—Ç–æ–≤`);\n  if (keyMoments.length > 0) {\n    const types = keyMoments.map(km => km.type).join(', ');\n    console.log(`   Types: ${types}`);\n  }\n  \n} catch (e) {\n  console.error('‚ùå Key moments parse error:', e.message);\n  console.error('Response:', response.substring(0, 300));\n  \n  // Fallback: try to extract JSON from text\n  const jsonMatch = response.match(/\\{[\\s\\S]*?\\}/);\n  if (jsonMatch) {\n    try {\n      const parsed = JSON.parse(jsonMatch[0]);\n      keyMoments = parsed.key_moments || [];\n    } catch (e2) {\n      console.error('Fallback parse failed:', e2.message);\n      keyMoments = [];\n    }\n  }\n}\n\n// Fallback if empty - not an error, just no key moments found\nif (!keyMoments || keyMoments.length === 0) {\n  console.log('‚ÑπÔ∏è No key moments found in dialogue (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è casual –¥–∏–∞–ª–æ–≥–æ–≤)');\n  keyMoments = [];\n}\n\n// Return key moments\nreturn [\n  {\n    json: {\n      key_moments: keyMoments\n    }\n  }\n];"
      },
      "id": "parse-key-moments",
      "name": "Parse Key Moments",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        850,
        300
      ]
    }
  ],
  "connections": {
    "Execute Workflow Trigger": {
      "main": [
        [
          {
            "node": "Prepare Key Moments Prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Key Moments Prompt": {
      "main": [
        [
          {
            "node": "GigaChat: Extract Key Moments",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GigaChat: Extract Key Moments": {
      "main": [
        [
          {
            "node": "Parse Key Moments",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-10-14T19:10:00.000Z",
  "versionId": "1"
}