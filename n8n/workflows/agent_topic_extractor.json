{
  "name": "Agent: Topic Extractor",
  "nodes": [
    {
      "parameters": {},
      "id": "execute-workflow-trigger",
      "name": "Execute Workflow Trigger",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1,
      "position": [250, 300]
    },
    {
      "parameters": {
        "jsCode": "// Prepare ENHANCED prompt for topic extraction with assessment context\nconst items = $input.all();\nconst data = items[0].json;\n\nconst messagesText = data.messages_text || \"\";\nconst hours = data.hours || 24;\nconst assessment = data.assessment || {};\nconst detailLevel = assessment.detail_level || \"standard\";\nconst dialogueType = assessment.dialogue_type || \"casual_chat\";\nconst messageCount = assessment.message_count || 0;\n\n// Calculate max_tokens safely (no optional chaining in n8n)\nconst maxTokens = (assessment.token_budgets && assessment.token_budgets.topics) ? assessment.token_budgets.topics : 500;\n\n// Adaptive topic count\nconst topicCounts = {\n  micro: 1,\n  minimal: \"2-3\",\n  standard: \"3-5\",\n  detailed: \"5-8\",\n  comprehensive: \"8-12\"\n};\nconst targetTopicCount = topicCounts[detailLevel] || \"3-5\";\n\n// Build enhanced prompt\nconst prompt = `Извлеки темы из диалога в Telegram группе.\\n\\nASSESSMENT КОНТЕКСТ:\\n- Тип диалога: ${dialogueType}\\n- Уровень детализации: ${detailLevel}\\n- Сообщений: ${messageCount}\\n- Период: ${hours} часов\\n\\nСООБЩЕНИЯ:\\n${messagesText}\\n\\n=== ЗАДАЧА ===\\n\\nИзвлеки ${targetTopicCount} основных тем обсуждения.\\n\\n${detailLevel === 'micro' ? 'Верни ТОЛЬКО самую главную тему.' : ''}\\n\\nДля каждой темы укажи:\\n- name: название темы (краткое)\\n- priority: high | medium | low (важность в контексте диалога)\\n${detailLevel !== 'micro' && detailLevel !== 'minimal' ? '- message_count: примерное количество упоминаний\\n- subtopics: список подтем (если есть)' : ''}\\n\\nФОРМАТ:\\n{\\n  \"topics\": [\\n    {\\n      \"name\": \"Проблема с вебвью\",\\n      \"priority\": \"high\"${detailLevel !== 'micro' && detailLevel !== 'minimal' ? ',\\n      \"message_count\": 15,\\n      \"subtopics\": [\"безопасность\", \"производительность\"]' : ''}\\n    }\\n  ]\\n}\\n\\nВАЖНО: Верни ТОЛЬКО валидный JSON без markdown блоков!`;\n\nreturn [\n  {\n    json: {\n      prompt: prompt,\n      max_tokens: maxTokens,\n      hours: hours,\n      detail_level: detailLevel\n    }\n  }\n];"
      },
      "id": "prepare-prompt",
      "name": "Prepare Topic Prompt",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [450, 300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://gpt2giga-proxy:8090/v1/chat/completions",
        "authentication": "none",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ {\"model\": \"GigaChat\", \"messages\": [{\"role\": \"system\", \"content\": \"Ты - аналитик тем разговоров. Извлекай ключевые темы из диалогов с приоритетами и подтемами. Всегда возвращай валидный JSON.\"}, {\"role\": \"user\", \"content\": $json.prompt}], \"temperature\": 0.3, \"max_tokens\": $json.max_tokens} }}",
        "options": {
          "timeout": 60000
        }
      },
      "id": "gigachat-call",
      "name": "GigaChat: Extract Topics",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [650, 300]
    },
    {
      "parameters": {
        "jsCode": "// Parse GigaChat response and extract ENHANCED topics\nconst items = $input.all();\nconst response = items[0].json.choices?.[0]?.message?.content || '{}';\nconst detailLevel = $('Prepare Topic Prompt').first().json.detail_level;\n\nlet topics = [];\n\ntry {\n  // Remove markdown code blocks if present\n  let cleanContent = response.trim();\n  if (cleanContent.startsWith('```')) {\n    const lines = cleanContent.split('\\n');\n    cleanContent = lines.slice(1, -1).join('\\n').trim();\n    if (cleanContent.startsWith('json')) {\n      cleanContent = cleanContent.slice(4).trim();\n    }\n  }\n  \n  // Parse JSON\n  const parsed = JSON.parse(cleanContent);\n  topics = parsed.topics || [];\n  \n  // Normalize topics structure\n  topics = topics.map(t => {\n    if (typeof t === 'string') {\n      // Old format - convert to new\n      return {name: t, priority: 'medium'};\n    }\n    // Ensure required fields\n    return {\n      name: t.name || t,\n      priority: t.priority || 'medium',\n      message_count: t.message_count || null,\n      subtopics: t.subtopics || []\n    };\n  });\n  \n  console.log(`✅ Topics extracted: ${topics.length}`);\n  console.log(`   Detail level: ${detailLevel}`);\n  \n} catch (e) {\n  console.error('❌ Topic extraction parse error:', e.message);\n  console.error('Response:', response.substring(0, 200));\n  \n  // Fallback: try to extract JSON from text\n  const jsonMatch = response.match(/\\{[\\s\\S]*?\\}/);\n  if (jsonMatch) {\n    try {\n      const parsed = JSON.parse(jsonMatch[0]);\n      topics = parsed.topics || [];\n      // Normalize\n      topics = topics.map(t => typeof t === 'string' ? {name: t, priority: 'medium'} : t);\n    } catch (e2) {\n      console.error('Fallback parse failed:', e2.message);\n      topics = [];\n    }\n  }\n}\n\n// Return enhanced topics\nreturn [\n  {\n    json: {\n      topics: topics\n    }\n  }\n];"
      },
      "id": "parse-response",
      "name": "Parse Topics",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [850, 300]
    }
  ],
  "connections": {
    "Execute Workflow Trigger": {
      "main": [
        [
          {
            "node": "Prepare Topic Prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Topic Prompt": {
      "main": [
        [
          {
            "node": "GigaChat: Extract Topics",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GigaChat: Extract Topics": {
      "main": [
        [
          {
            "node": "Parse Topics",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-10-13T16:10:00.000Z",
  "versionId": "1"
}

