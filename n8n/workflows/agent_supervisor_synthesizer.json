{
  "name": "Agent: Supervisor Synthesizer",
  "nodes": [
    {
      "parameters": {},
      "id": "execute-workflow-trigger",
      "name": "Execute Workflow Trigger",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1,
      "position": [
        250,
        300
      ]
    },
    {
      "parameters": {
        "jsCode": "// Prepare supervisor synthesis prompt\nconst items = $input.all();\nconst data = items[0].json;\n\nconst assessment = data.assessment || {};\nconst topics = data.topics || [];\nconst emotions = data.emotions || {};\nconst speakers = data.speakers || {};\nconst keyMoments = data.key_moments || [];\nconst summary = data.summary || \"\";\nconst timeline = data.timeline || [];\nconst externalContext = data.external_context || [];\nconst linkSummaries = data.link_summaries || [];\n\nconst detailLevel = assessment.detail_level || \"standard\";\nconst dialogueType = assessment.dialogue_type || \"casual_chat\";\nconst messageCount = assessment.message_count || 0;\nconst hours = data.hours || 24;\nconst groupTitle = data.group_title || \"–ì—Ä—É–ø–ø–∞\";\n\n// === BUILD ADAPTIVE SYNTHESIS PROMPT ===\n\nlet promptTemplate = \"\";\n\nif (detailLevel === \"micro\") {\n  promptTemplate = `–°–æ–∑–¥–∞–π –ú–ò–ö–†–û –¥–∞–π–¥–∂–µ—Å—Ç (1 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ + —ç–º–æ–¥–∑–∏).\\n\\n–≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–´–ô –¢–û–ù: ${emotions.tone || 'neutral'}\\n\\n–†–ï–ó–Æ–ú–ï: ${summary}\\n\\n–í–µ—Ä–Ω–∏ JSON:\\n{\\n  \"digest\": \"${emotions.tone}\\\\n\\\\n${summary}\"\\n}`;\n  \n} else if (detailLevel === \"minimal\") {\n  promptTemplate = `–°–æ–∑–¥–∞–π –ú–ò–ù–ò–ú–ê–õ–¨–ù–´–ô –¥–∞–π–¥–∂–µ—Å—Ç (—Ç–µ–º—ã + —Ç–æ–Ω + –ø–∞—Ä–∞–≥—Ä–∞—Ñ).\\n\\n–ì–†–£–ü–ü–ê: ${groupTitle}\\n–ü–ï–†–ò–û–î: ${hours} —á–∞—Å–æ–≤\\n–°–û–û–ë–©–ï–ù–ò–ô: ${messageCount}\\n\\n–¢–ï–ú–´:\\n${topics.map(t => `- ${t.name}`).join('\\n')}\\n\\n–≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–´–ô –¢–û–ù:\\n- –û–±—â–∏–π: ${emotions.overall_tone || 'neutral'}\\n- –ê—Ç–º–æ—Å—Ñ–µ—Ä–∞: ${emotions.atmosphere || ''}\\n\\n–†–ï–ó–Æ–ú–ï:\\n${summary}\\n\\n–°–æ–∑–¥–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç. –ò—Å–ø–æ–ª—å–∑—É–π \\\\n –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ (–ù–ï <br>!)\\n\\n–§–û–†–ú–ê–¢ JSON (–û–ë–†–ê–¢–ò –í–ù–ò–ú–ê–ù–ò–ï –Ω–∞ \\\\n\\\\n –º–µ–∂–¥—É —Å–µ–∫—Ü–∏—è–º–∏!):\\n{\\n  \"digest\": \"üìä –î–∞–π–¥–∂–µ—Å—Ç: ${hours}—á | ${messageCount} —Å–æ–æ–±—â–µ–Ω–∏–π\\\\n\\\\nüéØ –¢–µ–º—ã:\\\\n1. –ü–µ—Ä–≤–∞—è —Ç–µ–º–∞\\\\n2. –í—Ç–æ—Ä–∞—è —Ç–µ–º–∞\\\\n\\\\nüòä –¢–æ–Ω: –æ–ø–∏—Å–∞–Ω–∏–µ\\\\n\\\\nüìù –°—É—Ç—å:\\\\n–†–µ–∑—é–º–µ –æ–¥–Ω–∏–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–º\"\\n}\\n\\n–í–ê–ñ–ù–û: –ú–µ–∂–¥—É –∫–∞–∂–¥–æ–π —Å–µ–∫—Ü–∏–µ–π (üìä, üéØ, üòä, üìù) —Å—Ç–∞–≤—å \\\\n\\\\n –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏!`;\n  \n} else if (detailLevel === \"standard\") {\n  promptTemplate = `–°–æ–∑–¥–∞–π –°–¢–ê–ù–î–ê–†–¢–ù–´–ô –¥–∞–π–¥–∂–µ—Å—Ç (–ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑).\\n\\n–ì–†–£–ü–ü–ê: ${groupTitle}\\n–ü–ï–†–ò–û–î: ${hours} —á–∞—Å–æ–≤ | ${messageCount} —Å–æ–æ–±—â–µ–Ω–∏–π\\n–¢–ò–ü –î–ò–ê–õ–û–ì–ê: ${dialogueType}\\n\\n=== –î–ê–ù–ù–´–ï –û–¢ –ê–ì–ï–ù–¢–û–í ===\\n\\n–¢–ï–ú–´:\\n${JSON.stringify(topics, null, 2)}\\n\\n–≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó:\\n${JSON.stringify(emotions, null, 2)}\\n\\n–£–ß–ê–°–¢–ù–ò–ö–ò:\\n${JSON.stringify(speakers, null, 2)}\\n\\n–ö–õ–Æ–ß–ï–í–´–ï –ú–û–ú–ï–ù–¢–´:\\n${JSON.stringify(keyMoments, null, 2)}\\n\\n–†–ï–ó–Æ–ú–ï:\\n${summary}\\n\\n=== –ó–ê–î–ê–ß–ê ===\\n\\n–°–∏–Ω—Ç–µ–∑–∏—Ä—É–π –¥–∞–π–¥–∂–µ—Å—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ. –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–π \\\\n\\\\n –º–µ–∂–¥—É –ö–ê–ñ–î–û–ô —Å–µ–∫—Ü–∏–µ–π –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏!\\n\\n–ü–†–ò–ú–ï–† –°–¢–†–£–ö–¢–£–†–´:\\nüìä –î–∞–π–¥–∂–µ—Å—Ç: ...\\\\n\\\\nüéØ –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã:\\\\n...\\\\n\\\\nüòê –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–Ω: ...\\\\n\\\\nüë• –£—á–∞—Å—Ç–Ω–∏–∫–∏:\\\\n...\\\\n\\\\nüìù –†–µ–∑—é–º–µ:\\\\n...\\n\\nüìä –î–∞–π–¥–∂–µ—Å—Ç: [–≥—Ä—É–ø–ø–∞] | [–ø–µ—Ä–∏–æ–¥] | [—Å–æ–æ–±—â–µ–Ω–∏–π]\\nüìã –¢–∏–ø: [—Ç–∏–ø] | –£—Ä–æ–≤–µ–Ω—å: standard\\n\\nüéØ –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã:\\n[–ø–µ—Ä–µ—á–∏—Å–ª–∏ —Ç–µ–º—ã —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏ –∏ —ç–º–æ–¥–∑–∏]\\n\\nüòê –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–Ω: [–æ–ø–∏—Å–∞–Ω–∏–µ + –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å]\\n   –ê—Ç–º–æ—Å—Ñ–µ—Ä–∞: [–∞—Ç–º–æ—Å—Ñ–µ—Ä–∞]\\n   ${emotions.indicators ? '–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã: [conflict/collaboration/stress/enthusiasm —Å %]' : ''}\\n\\nüë• –ê–∫—Ç–∏–≤–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏:\\n[—É—á–∞—Å—Ç–Ω–∏–∫–∏ —Å —Ä–æ–ª—è–º–∏ –∏ —ç–º–æ—Ü. –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º]\\n\\n${keyMoments.length > 0 ? '‚ö° –ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã:\\n[–º–æ–º–µ–Ω—Ç—ã —Å —Ç–∏–ø–∞–º–∏, –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º, —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏, —ç–º–æ—Ü. –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º]\\n\\n' : ''}üìù –†–µ–∑—é–º–µ:\\n[—Ä–µ–∑—é–º–µ 2-3 –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞ —Å —É—á–µ—Ç–æ–º —ç–º–æ—Ü. –¥–∏–Ω–∞–º–∏–∫–∏]\\n\\n–§–û–†–ú–ê–¢: –≤–µ—Ä–Ω–∏ JSON —Å –ø–æ–ª–µ–º \\\"digest\\\" —Å–æ–¥–µ—Ä–∂–∞—â–∏–º –≥–æ—Ç–æ–≤—ã–π HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å —Ç–µ–≥–∞–º–∏ <b>, <i>, <code>, <a>.\\n–ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è —ç–º–æ—Ü. —Ç–æ–Ω–∞: üòä positive, üòê neutral, üòî negative, üü¢üü°üü†üî¥ –¥–ª—è –≥—Ä–∞–¥–∞—Ü–∏–π.`;\n  \n} else if (detailLevel === \"detailed\") {\n  promptTemplate = `–°–æ–∑–¥–∞–π –î–ï–¢–ê–õ–¨–ù–´–ô –¥–∞–π–¥–∂–µ—Å—Ç (—Å —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–µ–π –∏ —ç–º–æ—Ü. –¥–∏–Ω–∞–º–∏–∫–æ–π).\\n\\n[–í–°–ï –î–ê–ù–ù–´–ï –ò–ó STANDARD] +\\n\\n–•–†–û–ù–û–õ–û–ì–ò–Ø:\\n${JSON.stringify(timeline, null, 2)}\\n\\n–≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–ì–†–ï–°–°–ò–Ø:\\n${emotions.emotional_progression || emotions.emotional_arc || ''}\\n\\n=== –î–û–ë–ê–í–¨ –ö STANDARD –§–û–†–ú–ê–¢–£ ===\\n\\nüìÖ –•—Ä–æ–Ω–æ–ª–æ–≥–∏—è:\\n[—Å–æ–±—ã—Ç–∏—è —Å –≤—Ä–µ–º–µ–Ω–µ–º –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ —ç–º–æ–¥–∑–∏: üü¢ calm, üü° concern, üü† tension, üîµ resolution]\\n\\nüìà –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞:\\n[—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∏—è]\\n${emotions.dominant_emotions ? '–ü—Ä–µ–æ–±–ª–∞–¥–∞—é—â–∏–µ —ç–º–æ—Ü–∏–∏: [–ø—Ä–æ—Ü–µ–Ω—Ç—ã]' : ''}`;\n  \n} else {\n  // Comprehensive\n  promptTemplate = `–°–æ–∑–¥–∞–π –ü–û–õ–ù–´–ô –¥–∞–π–¥–∂–µ—Å—Ç (comprehensive).\\n\\n[–í–°–ï –î–ê–ù–ù–´–ï –ò–ó DETAILED] +\\n\\n–í–ù–ï–®–ù–ò–ô –ö–û–ù–¢–ï–ö–°–¢:\\n–°—Å—ã–ª–∫–∏: ${JSON.stringify(linkSummaries, null, 2)}\\n–î–æ–ø. –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è: ${JSON.stringify(externalContext, null, 2)}\\n\\n=== –î–û–ë–ê–í–¨ –ö DETAILED –§–û–†–ú–ê–¢–£ ===\\n\\nüîó –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç:\\n[—Å—Å—ã–ª–∫–∏ –∏ –≤–Ω–µ—à–Ω–∏–µ —Ä–µ—Å—É—Ä—Å—ã]\\n\\nüìä –ò–Ω—Å–∞–π—Ç—ã:\\n[–ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö]`;\n}\n\n// Add common instructions\nconst fullPrompt = promptTemplate + `\\\\n\\\\n=== –û–ë–©–ò–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø ===\\\\n\\\\n‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û - HTML –¢–ï–ì–ò:\\\\n- –†–ê–ó–†–ï–®–ï–ù–´ –¢–û–õ–¨–ö–û: <b>, <i>, <code>, <a href=\\\\\\\"...\\\\\\\"> <blockquote>\\\\n- –ó–ê–ü–†–ï–©–ï–ù–´: <div>, <br>, <span>, <p>, <ul>, <li>, –∏ –í–°–ï –¥—Ä—É–≥–∏–µ —Ç–µ–≥–∏!\\n- –ù–ò–ö–û–ì–î–ê –ù–ï –ò–°–ü–û–õ–¨–ó–£–ô <br>! –ï—Å–ª–∏ –Ω—É–∂–µ–Ω –ø–µ—Ä–µ–Ω–æ—Å - –∏—Å–ø–æ–ª—å–∑—É–π \\\\n –∏–ª–∏ \\\\n\\\\n\\n- –õ—é–±–æ–π <br> –≤—ã–∑–æ–≤–µ—Ç –æ—à–∏–±–∫—É –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤ Telegram\\\\n- –î–ª—è –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–π \\\\\\\\n –≤–º–µ—Å—Ç–æ <br>\\\\n- –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π container —Ç–µ–≥–∏\\\\n\\\\n‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û - USERNAMES:\\\\n- –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–ß–ù–´–ï usernames –∏–∑ speakers (–Ω–∞–ø—Ä–∏–º–µ—Ä: @boyversus, @KseniaKrasnobaeva)\\\\n- –ù–ï –∑–∞–º–µ–Ω—è–π –Ω–∞ \\\\\\\"—É—á–∞—Å—Ç–Ω–∏–∫1\\\\\\\", \\\\\\\"User1\\\\\\\" –∏–ª–∏ –æ–±–æ–±—â–µ–Ω–Ω—ã–µ\\\\n- –°–æ—Ö—Ä–∞–Ω—è–π –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ\\\\n- –°—Å—ã–ª–∫–∏: <a href=\\\\\\\"tg://resolve?domain=username\\\\\\\">@username</a>\\\\n\\\\n3. –≠–º–æ–¥–∑–∏ –¥–ª—è –∞–∫—Ü–µ–Ω—Ç–∞\\\\n4. –ê–¥–∞–ø—Ç–∏—Ä—É–π –¥–ª–∏–Ω—É –ø–æ–¥ ${detailLevel}\\\\n5. –°–æ—Ö—Ä–∞–Ω–∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç\\\\n\\\\n–í–µ—Ä–Ω–∏ JSON: {\\\\\\\"digest\\\\\\\": \\\\\\\"HTML —Ç–µ–∫—Å—Ç\\\\\\\"}\\\\n\\\\n–í–ê–ñ–ù–û: –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–π JSON!`;\n\n// Calculate max_tokens safely\nconst maxTokens = (assessment.token_budgets && assessment.token_budgets.summary) ? assessment.token_budgets.summary : 1500;\n\nreturn [\n  {\n    json: {\n      prompt: fullPrompt,\n      max_tokens: maxTokens,\n      detail_level: detailLevel,\n      group_title: groupTitle\n    }\n  }\n];"
      },
      "id": "prepare-synthesis-prompt",
      "name": "Prepare Synthesis Prompt",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1250,
        300
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://gpt2giga-proxy:8090/v1/chat/completions",
        "authentication": "none",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ {\"model\": \"GigaChat\", \"messages\": [{\"role\": \"system\", \"content\": \"–¢—ã - supervisor —Å–∏–Ω—Ç–µ–∑–∏—Ä—É—é—â–∏–π —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–π–¥–∂–µ—Å—Ç—ã –∏–∑ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤. –°–æ–∑–¥–∞–µ—à—å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –¥–∞–π–¥–∂–µ—Å—Ç—ã —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ —Å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º. –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–π –≤–∞–ª–∏–¥–Ω—ã–π JSON.\"}, {\"role\": \"user\", \"content\": $json.prompt}], \"temperature\": 0.4, \"max_tokens\": $json.max_tokens} }}",
        "options": {
          "timeout": 120000
        }
      },
      "id": "gigachat-synthesize",
      "name": "GigaChat: Synthesize Digest",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1450,
        300
      ]
    },
    {
      "parameters": {
        "jsCode": "// Parse final synthesized digest\nconst items = $input.all();\nconst response = items[0].json.choices?.[0]?.message?.content || '{}';\n\nlet digest = \"\";\n\ntry {\n  // Remove markdown code blocks\n  let cleanContent = response.trim();\n  if (cleanContent.startsWith('```')) {\n    const lines = cleanContent.split('\\n');\n    cleanContent = lines.slice(1, -1).join('\\n').trim();\n    if (cleanContent.startsWith('json')) {\n      cleanContent = cleanContent.slice(4).trim();\n    }\n  }\n  \n  // Parse JSON\n  const parsed = JSON.parse(cleanContent);\n  digest = parsed.digest || \"\";\n  \n  console.log(`‚úÖ Final digest synthesized, length: ${digest.length} chars`);\n  \n} catch (e) {\n  console.error('‚ùå Digest synthesis parse error:', e.message);\n  console.error('Response:', response.substring(0, 300));\n  \n  // Fallback\n  const jsonMatch = response.match(/\\{[\\s\\S]*?\\}/);\n  if (jsonMatch) {\n    try {\n      const parsed = JSON.parse(jsonMatch[0]);\n      digest = parsed.digest || response;\n    } catch (e2) {\n      // Last resort: use raw response\n      digest = response;\n    }\n  } else {\n    digest = response;\n  }\n}\n\n// Ensure digest is not empty\nif (!digest || digest.trim().length === 0) {\n  console.warn('‚ö†Ô∏è Empty digest, using fallback');\n  digest = \"–î–∞–π–¥–∂–µ—Å—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\";\n}\n\n// Return final digest\nreturn [\n  {\n    json: {\n      digest: digest,\n      synthesized: true\n    }\n  }\n];"
      },
      "id": "parse-final-digest",
      "name": "Parse Final Digest",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1650,
        300
      ]
    }
  ],
  "connections": {
    "Execute Workflow Trigger": {
      "main": [
        [
          {
            "node": "Prepare Synthesis Prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Synthesis Prompt": {
      "main": [
        [
          {
            "node": "GigaChat: Synthesize Digest",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GigaChat: Synthesize Digest": {
      "main": [
        [
          {
            "node": "Parse Final Digest",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-10-14T19:25:00.000Z",
  "versionId": "1"
}