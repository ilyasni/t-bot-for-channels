{
  "name": "Agent: Speaker Analyzer",
  "nodes": [
    {
      "parameters": {},
      "id": "execute-workflow-trigger",
      "name": "Execute Workflow Trigger",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1,
      "position": [
        250,
        300
      ]
    },
    {
      "parameters": {
        "jsCode": "// Prepare prompt for speaker analysis\nconst items = $input.all();\nconst data = items[0].json;\n\nconst messagesText = data.messages_text || \"\";\n\nconst prompt = `Проанализируй кто о чем говорил в диалоге.\\n\\nСообщения:\\n${messagesText}\\n\\nСоздай краткое резюме по каждому активному участнику (топ-5 самых активных). Верни ТОЛЬКО JSON:\\n{\"speakers\": {\"username1\": \"краткое описание что обсуждал\", \"username2\": \"краткое описание что обсуждал\"}}\\n\\nВАЖНО: Верни ТОЛЬКО валидный JSON без markdown блоков!`;\n\nreturn [\n  {\n    json: {\n      prompt: prompt\n    }\n  }\n];"
      },
      "id": "prepare-prompt",
      "name": "Prepare Speaker Prompt",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        450,
        300
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://gpt2giga-proxy:8090/v1/chat/completions",
        "authentication": "none",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ {\"model\": \"GigaChat\", \"messages\": [{\"role\": \"system\", \"content\": \"Ты - аналитик участников диалогов. Анализируй кто о чем говорил, создавай краткие описания активности каждого участника. Всегда возвращай валидный JSON.\"}, {\"role\": \"user\", \"content\": $json.prompt}], \"temperature\": 0.3, \"max_tokens\": 400} }}",
        "options": {
          "timeout": 60000
        }
      },
      "id": "gigachat-call",
      "name": "GigaChat: Analyze Speakers",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        650,
        300
      ]
    },
    {
      "parameters": {
        "jsCode": "// Parse GigaChat response and extract speakers with fallback\nconst items = $input.all();\nconst response = items[0].json.choices?.[0]?.message?.content || '{}';\n\nlet speakers = {};\n\ntry {\n  // Remove markdown code blocks if present\n  let cleanContent = response.trim();\n  if (cleanContent.startsWith('```')) {\n    const lines = cleanContent.split('\\n');\n    cleanContent = lines.slice(1, -1).join('\\n').trim();\n    if (cleanContent.startsWith('json')) {\n      cleanContent = cleanContent.slice(4).trim();\n    }\n  }\n  \n  // Parse JSON\n  const parsed = JSON.parse(cleanContent);\n  speakers = parsed.speakers || {};\n  \n} catch (e) {\n  console.error('Speaker analysis parse error:', e);\n  console.error('Response:', response.substring(0, 200));\n  \n  // Fallback: try to extract JSON from text\n  const jsonMatch = response.match(/\\{[\\s\\S]*?\\}/);\n  if (jsonMatch) {\n    try {\n      const parsed = JSON.parse(jsonMatch[0]);\n      speakers = parsed.speakers || {};\n    } catch (e2) {\n      console.error('Fallback parse failed:', e2);\n    }\n  }\n}\n\n// Fallback if GigaChat filtered response or returned empty\nif (!speakers || Object.keys(speakers).length === 0) {\n  console.log('Speakers empty, using fallback');\n  speakers = {\n    \"Анализ\": \"Не доступен из-за ограничений системы фильтрации AI\"\n  };\n}\n\n// Return speakers object\nreturn [\n  {\n    json: {\n      speakers: speakers\n    }\n  }\n];"
      },
      "id": "parse-response",
      "name": "Parse Speakers",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        850,
        300
      ]
    }
  ],
  "connections": {
    "Execute Workflow Trigger": {
      "main": [
        [
          {
            "node": "Prepare Speaker Prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Speaker Prompt": {
      "main": [
        [
          {
            "node": "GigaChat: Analyze Speakers",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GigaChat: Analyze Speakers": {
      "main": [
        [
          {
            "node": "Parse Speakers",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-10-13T16:10:00.000Z",
  "versionId": "1"
}