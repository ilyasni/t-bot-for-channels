#!/usr/bin/env python3
"""
–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤ LangChain
"""

import asyncio
import logging
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append('/app')

from langchain_agents.speaker_analyzer import SpeakerAnalyzerAgent
from langchain_agents.topic_extractor import TopicExtractorAgent
from langchain_agents.emotion_analyzer import EmotionAnalyzerAgent
from langchain_agents.key_moments import KeyMomentsAgent
from langchain_agents.timeline import TimelineBuilderAgent

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
TEST_MESSAGES = """
[1] ilyasni (19:30): –ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º! –ö–∞–∫ –¥–µ–ª–∞ —Å –ø—Ä–æ–µ–∫—Ç–æ–º?
[2] matsony (19:31): –ü—Ä–∏–≤–µ—Ç! –£ –Ω–∞—Å –ø—Ä–æ–±–ª–µ–º—ã —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
[3] ilyasni (19:32): –ö–∞–∫–∏–µ –∏–º–µ–Ω–Ω–æ –ø—Ä–æ–±–ª–µ–º—ã?
[4] matsony (19:33): –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
[5] nst_rght (19:35): –£ –º–µ–Ω—è —Ç–æ–∂–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –ª–æ–≥–∏–Ω–æ–º
[6] ilyasni (19:36): –ü–æ–Ω—è—Ç–Ω–æ, –Ω—É–∂–Ω–æ —Å—Ä–æ—á–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å
[7] matsony (19:37): –î–∞, —ç—Ç–æ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
[8] ilyasni (19:38): –•–æ—Ä–æ—à–æ, –∑–∞–π–º—É—Å—å —ç—Ç–∏–º –∑–∞–≤—Ç—Ä–∞
"""

async def test_speaker_analyzer():
    """–¢–µ—Å—Ç Speaker Analyzer –∞–≥–µ–Ω—Ç–∞"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Speaker Analyzer...")
    
    agent = SpeakerAnalyzerAgent()
    input_data = {
        "messages": TEST_MESSAGES,
        "assessment": {
            "detail_level": "standard",
            "dialogue_type": "discussion"
        }
    }
    
    try:
        result = await agent.ainvoke(input_data)
        logger.info(f"‚úÖ Speaker Analyzer —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {type(result)}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        if isinstance(result, dict) and 'pydantic_result' in result:
            pydantic_result = result['pydantic_result']
            processed_result = result['processed_result']
            logger.info(f"   –°—Ç—Ä—É–∫—Ç—É—Ä–∞: pydantic_result + processed_result")
            
            if pydantic_result and hasattr(pydantic_result, 'speakers'):
                logger.info(f"   –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {len(pydantic_result.speakers)}")
                for speaker in pydantic_result.speakers:
                    logger.info(f"   - {speaker.username}: {speaker.role}")
            elif processed_result and isinstance(processed_result, dict):
                speakers_list = processed_result.get('speakers', [])
                logger.info(f"   –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞–π–¥–µ–Ω–æ (processed): {len(speakers_list)}")
                for speaker in speakers_list:
                    logger.info(f"   - {speaker.get('username', 'unknown')}: {speaker.get('role', 'unknown')}")
            else:
                logger.error(f"   ‚ùå –ù–µ—Ç –ø–æ–ª—è speakers –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ")
        else:
            logger.error(f"   ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
            
        return result
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ Speaker Analyzer: {e}")
        return None

async def test_topic_extractor():
    """–¢–µ—Å—Ç Topic Extractor –∞–≥–µ–Ω—Ç–∞"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Topic Extractor...")
    
    agent = TopicExtractorAgent()
    input_data = {
        "messages": TEST_MESSAGES,
        "assessment": {
            "detail_level": "standard",
            "dialogue_type": "discussion"
        }
    }
    
    try:
        result = await agent.ainvoke(input_data)
        logger.info(f"‚úÖ Topic Extractor —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {type(result)}")
        
        if hasattr(result, 'topics'):
            logger.info(f"   –¢–µ–º –Ω–∞–π–¥–µ–Ω–æ: {len(result.topics)}")
            for topic in result.topics:
                logger.info(f"   - {topic.name}: {topic.priority}")
        else:
            logger.error(f"   ‚ùå –ù–µ—Ç –ø–æ–ª—è topics –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ")
            
        return result
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ Topic Extractor: {e}")
        return None

async def test_emotion_analyzer():
    """–¢–µ—Å—Ç Emotion Analyzer –∞–≥–µ–Ω—Ç–∞"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Emotion Analyzer...")
    
    agent = EmotionAnalyzerAgent()
    input_data = {
        "messages": TEST_MESSAGES,
        "assessment": {
            "detail_level": "standard",
            "dialogue_type": "discussion"
        }
    }
    
    try:
        result = await agent.ainvoke(input_data)
        logger.info(f"‚úÖ Emotion Analyzer —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {type(result)}")
        
        if hasattr(result, 'overall_tone'):
            logger.info(f"   –¢–æ–Ω: {result.overall_tone}")
            logger.info(f"   –ê—Ç–º–æ—Å—Ñ–µ—Ä–∞: {result.atmosphere}")
        else:
            logger.error(f"   ‚ùå –ù–µ—Ç –ø–æ–ª–µ–π —ç–º–æ—Ü–∏–π –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ")
            
        return result
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ Emotion Analyzer: {e}")
        return None

async def test_key_moments():
    """–¢–µ—Å—Ç Key Moments –∞–≥–µ–Ω—Ç–∞"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Key Moments...")
    
    agent = KeyMomentsAgent()
    input_data = {
        "messages": TEST_MESSAGES,
        "assessment": {
            "detail_level": "detailed",
            "dialogue_type": "discussion"
        },
        "topics": {
            "topics": [
                {"name": "–ü—Ä–æ–±–ª–µ–º—ã —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π", "priority": "high"},
                {"name": "–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", "priority": "high"}
            ]
        },
        "emotions": {
            "overall_tone": "neutral"
        }
    }
    
    try:
        result = await agent.ainvoke(input_data)
        logger.info(f"‚úÖ Key Moments —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {type(result)}")
        
        if hasattr(result, 'key_decisions'):
            logger.info(f"   –†–µ—à–µ–Ω–∏–π: {len(result.key_decisions)}")
            for decision in result.key_decisions:
                logger.info(f"   - {decision}")
        else:
            logger.error(f"   ‚ùå –ù–µ—Ç –ø–æ–ª—è key_decisions –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ")
            
        return result
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ Key Moments: {e}")
        return None

async def test_timeline_builder():
    """–¢–µ—Å—Ç Timeline Builder –∞–≥–µ–Ω—Ç–∞"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Timeline Builder...")
    
    agent = TimelineBuilderAgent()
    input_data = {
        "messages": TEST_MESSAGES,
        "assessment": {
            "detail_level": "detailed",
            "dialogue_type": "discussion"
        },
        "topics": {
            "topics": [
                {"name": "–ü—Ä–æ–±–ª–µ–º—ã —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π", "priority": "high"}
            ]
        }
    }
    
    try:
        result = await agent.ainvoke(input_data)
        logger.info(f"‚úÖ Timeline Builder —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {type(result)}")
        
        if hasattr(result, 'timeline_events'):
            logger.info(f"   –°–æ–±—ã—Ç–∏–π: {len(result.timeline_events)}")
            for event in result.timeline_events:
                logger.info(f"   - {event.timestamp}: {event.event}")
        else:
            logger.error(f"   ‚ùå –ù–µ—Ç –ø–æ–ª—è timeline_events –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ")
            
        return result
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ Timeline Builder: {e}")
        return None

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("üöÄ –ù–∞—á–∞–ª–æ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤")
    logger.info(f"üìù –¢–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {len(TEST_MESSAGES.split(chr(10)))} —Å—Ç—Ä–æ–∫")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–≥–µ–Ω—Ç–æ–≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
    results = {}
    
    results['speaker'] = await test_speaker_analyzer()
    results['topics'] = await test_topic_extractor()
    results['emotions'] = await test_emotion_analyzer()
    results['key_moments'] = await test_key_moments()
    results['timeline'] = await test_timeline_builder()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    logger.info("üìä –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç:")
    for agent_name, result in results.items():
        status = "‚úÖ" if result is not None else "‚ùå"
        logger.info(f"   {status} {agent_name}: {'—Ä–∞–±–æ—Ç–∞–µ—Ç' if result else '–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç'}")

if __name__ == "__main__":
    asyncio.run(main())
