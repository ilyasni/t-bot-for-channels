---
alwaysApply: true
---

# Telegram Channel Parser Bot - Cursor Rules

## üìã –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞

**–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ:** `/home/ilyasni/n8n-server/n8n-installer/telethon/`

Telegram Channel Parser Bot - —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ Telegram –∫–∞–Ω–∞–ª–æ–≤ —Å:
- –ú–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Ä–µ–∂–∏–º–æ–º
- REST API –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å n8n
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–∞—Ä—Å–∏–Ω–≥–æ–º –ø–æ—Å—Ç–æ–≤
- AI —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º (OpenRouter)
- –°–∏—Å—Ç–µ–º–æ–π retention (–∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ø–æ—Å—Ç–æ–≤)
- –ë–µ–∑–æ–ø–∞—Å–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π

**–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è:** –ß–∞—Å—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ n8n-server, –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ `start_services.py` –≤ –∫–æ—Ä–Ω–µ.

## üîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –æ—Å–Ω–æ–≤–Ω—ã–º –ø—Ä–æ–µ–∫—Ç–æ–º

### –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ start_services.py

`start_services.py` –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:
1. –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è telethon (`sessions/`, `data/`, `logs/`)
2. –ö–æ–ø–∏—Ä—É–µ—Ç `.env.example` ‚Üí `.env` –¥–ª—è telethon –∏ gpt2giga
3. –ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–∏—Å—ã —á–µ—Ä–µ–∑ `docker-compose.override.yml`
4. –í–∫–ª—é—á–∞–µ—Ç telethon –∏ gpt2giga –≤ –µ–¥–∏–Ω—É—é —Å–µ—Ç—å `localai_default`

### –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –≤ docker-compose.override.yml

**telethon** (–ø–æ—Ä—Ç—ã 8010, 8001):
- API —Å–µ—Ä–≤–µ—Ä + Parser + Bot
- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ .env

**telethon-bot** (standalone bot):
- –û—Ç–¥–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è Telegram –±–æ—Ç–∞

**gpt2giga-proxy** (–ø–æ—Ä—Ç 8090):
- OpenAI-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π –ø—Ä–æ–∫—Å–∏ –¥–ª—è GigaChat (Sber)
- –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è: `GIGACHAT_CREDENTIALS` (–µ–¥–∏–Ω—ã–π API –∫–ª—é—á)
- –ü–æ–ª—É—á–∏—Ç—å credentials: https://developers.sber.ru/gigachat

## üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞

```
telethon/
‚îú‚îÄ‚îÄ docs/                      # –í—Å—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
‚îÇ   ‚îú‚îÄ‚îÄ quickstart/           # –ë—ã—Å—Ç—Ä—ã–µ —Å—Ç–∞—Ä—Ç—ã
‚îÇ   ‚îú‚îÄ‚îÄ features/             # –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π
‚îÇ   ‚îú‚îÄ‚îÄ migrations/           # –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞ –ø–æ –º–∏–≥—Ä–∞—Ü–∏—è–º
‚îÇ   ‚îî‚îÄ‚îÄ troubleshooting/      # –†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º
‚îú‚îÄ‚îÄ scripts/                   # –°–∫—Ä–∏–ø—Ç—ã
‚îÇ   ‚îú‚îÄ‚îÄ setup/                # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã
‚îÇ   ‚îú‚îÄ‚îÄ migrations/           # –ú–∏–≥—Ä–∞—Ü–∏–∏ –ë–î
‚îÇ   ‚îî‚îÄ‚îÄ utils/                # –£—Ç–∏–ª–∏—Ç—ã
‚îú‚îÄ‚îÄ tests/                     # –¢–µ—Å—Ç—ã
‚îú‚îÄ‚îÄ examples/                  # –ü—Ä–∏–º–µ—Ä—ã (n8n workflows)
‚îú‚îÄ‚îÄ sessions/                  # –°–µ—Å—Å–∏–∏ Telegram (gitignored)
‚îú‚îÄ‚îÄ data/                      # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö SQLite
‚îú‚îÄ‚îÄ logs/                      # –õ–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
‚îî‚îÄ‚îÄ [–æ—Å–Ω–æ–≤–Ω—ã–µ .py —Ñ–∞–π–ª—ã]      # –ö–æ–¥ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
```

## üêç –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã

### Core —Ñ–∞–π–ª—ã (–ù–ï –ø–µ—Ä–µ–º–µ—â–∞—Ç—å)
- `bot.py` - Telegram –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏
- `main.py` - FastAPI —Å–µ—Ä–≤–µ—Ä (REST API)
- `parser_service.py` - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Å–µ—Ä –∫–∞–Ω–∞–ª–æ–≤
- `models.py` - SQLAlchemy –º–æ–¥–µ–ª–∏ –ë–î
- `database.py` - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
- `tagging_service.py` - AI —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤
- `cleanup_service.py` - –°–∏—Å—Ç–µ–º–∞ retention (–æ—á–∏—Å—Ç–∫–∞)
- `auth.py` - –ë–∞–∑–æ–≤–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è Telegram
- `secure_auth_manager.py` - –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
- `auth_web_server.py` - Web —Å–µ—Ä–≤–µ—Ä –¥–ª—è OAuth
- `user_auth_manager.py` - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
- `crypto_utils.py` - –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
- `run_system.py` - –ó–∞–ø—É—Å–∫ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã –ª–æ–∫–∞–ª—å–Ω–æ

## üéØ –ü—Ä–∞–≤–∏–ª–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏

### 1. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–¥–∞

**–í—Å–µ–≥–¥–∞:**
- –û—Å–Ω–æ–≤–Ω—ã–µ .py —Ñ–∞–π–ª—ã –¥–µ—Ä–∂–∏—Ç–µ –≤ –∫–æ—Ä–Ω–µ `telethon/`
- –°–∫—Ä–∏–ø—Ç—ã —Ä–∞–∑–º–µ—â–∞–π—Ç–µ –≤ `scripts/{setup|migrations|utils}/`
- –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –≤ `docs/{quickstart|features|migrations|troubleshooting}/`
- –¢–µ—Å—Ç—ã –≤ `tests/`
- –ü—Ä–∏–º–µ—Ä—ã –≤ `examples/`

**–ù–∏–∫–æ–≥–¥–∞:**
- –ù–ï —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ standalone docker-compose.yml (–µ—Å—Ç—å –∫–æ—Ä–Ω–µ–≤–æ–π docker-compose.override.yml)
- –ù–ï –¥—É–±–ª–∏—Ä—É–π—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –≤ –∫–æ—Ä–Ω–µ –ø–∞–ø–∫–∏
- –ù–ï —Ä–∞–∑–º–µ—â–∞–π—Ç–µ —Å–∫—Ä–∏–ø—Ç—ã –≤ –∫–æ—Ä–Ω–µ

### 2. –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö

**–ú–æ–¥–µ–ª–∏ (`models.py`):**
```python
# –ò—Å–ø–æ–ª—å–∑—É–µ–º SQLAlchemy ORM
# Many-to-Many —Å–≤—è–∑–∏ —á–µ—Ä–µ–∑ association tables
# –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: id, created_at, updated_at

Base = declarative_base()

class User(Base):
    __tablename__ = "users"
    id = Column(BigInteger, primary_key=True)
    telegram_id = Column(BigInteger, unique=True)
    # ... relationship —á–µ—Ä–µ–∑ association table
```

**–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ë–î:**
- SQLite (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é): `sqlite:///./data/telethon_bot.db`
- PostgreSQL/Supabase: —á–µ—Ä–µ–∑ `DATABASE_URL` –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ .env

**–ú–∏–≥—Ä–∞—Ü–∏–∏:**
- –°–∫—Ä–∏–ø—Ç—ã –º–∏–≥—Ä–∞—Ü–∏–π ‚Üí `scripts/migrations/`
- –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è ‚Üí `docs/migrations/`
- –í—Å–µ–≥–¥–∞ —Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –Ω–∞ SQLite –∏ PostgreSQL

### 3. API Endpoints (FastAPI)

**–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤ `main.py`:**
```python
from fastapi import FastAPI, Depends, HTTPException
from sqlalchemy.orm import Session

app = FastAPI(title="Telegram Channel Parser API")

@app.get("/posts")
async def get_posts(
    channel_id: Optional[int] = None,
    user_id: Optional[int] = None,
    db: Session = Depends(get_db)
):
    # –í—Å–µ–≥–¥–∞ —Ñ–∏–ª—å—Ç—Ä—É–π—Ç–µ –ø–æ user_id –¥–ª—è –º–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ä–µ–∂–∏–º–∞
    pass
```

**–ü—Ä–∞–≤–∏–ª–∞:**
- –í—Å–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ query parameters –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
- –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ Pydantic –º–æ–¥–µ–ª–∏
- –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —á–µ—Ä–µ–∑ `/docs`

### 4. Telegram Bot (`bot.py`)

**–°—Ç—Ä—É–∫—Ç—É—Ä–∞:**
```python
from telethon import TelegramClient, events

# –ú–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ä–µ–∂–∏–º - –∫–∞–∂–¥—ã–π —é–∑–µ—Ä —Å–≤–æ–∏ API –∫–ª—é—á–∏
@bot.on(events.NewMessage(pattern='/start'))
async def start_handler(event):
    user_id = event.sender_id
    # –†–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Å –¥–∞–Ω–Ω—ã–º–∏ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    pass
```

**–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:**
- `/start` - –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã
- `/add_channel` - –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª
- `/list_channels` - —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
- `/remove_channel` - —É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª
- `/settings` - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

### 5. Parser Service (`parser_service.py`)

**–ü—Ä–∞–≤–∏–ª–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:**
```python
async def parse_channel(channel_id: int, user_id: int):
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º API –∫–ª—é—á–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # –ü–∞—Ä—Å–∏–º –º–∞–∫—Å MAX_POSTS_PER_CHANNEL –ø–æ—Å—Ç–æ–≤
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ user_id
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
    pass
```

**–ù–∞—Å—Ç—Ä–æ–π–∫–∏:**
- `PARSER_INTERVAL_MINUTES` - –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø–∞—Ä—Å–∏–Ω–≥–∞ (default: 30)
- `MAX_POSTS_PER_CHANNEL` - –º–∞–∫—Å –ø–æ—Å—Ç–æ–≤ –∑–∞ —Ä–∞–∑ (default: 50)

### 6. AI –¢–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (`tagging_service.py`)

**OpenRouter –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è:**
```python
# –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –º–æ–¥–µ–ª–∏:
# - google/gemini-2.0-flash-exp:free
# - meta-llama/llama-3.2-3b-instruct:free
# - qwen/qwen-2-7b-instruct:free

async def generate_tags(post_text: str) -> List[str]:
    # Batch processing (TAGGING_BATCH_SIZE=10)
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å retry
    # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    pass
```

### 7. Retention System (`cleanup_service.py`)

**–ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ –ø–æ—Å—Ç–æ–≤:**
```python
async def cleanup_old_posts():
    # –ï–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ CLEANUP_SCHEDULE_TIME (default: 03:00)
    # –£–¥–∞–ª—è–µ–º –ø–æ—Å—Ç—ã —Å—Ç–∞—Ä—à–µ retention_days
    # –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π retention_days –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é DEFAULT_RETENTION_DAYS=30
    pass
```

### 8. –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å

**–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ (`crypto_utils.py`):**
- –ò—Å–ø–æ–ª—å–∑—É–µ–º Fernet –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è API –∫–ª—é—á–µ–π
- `ENCRYPTION_KEY` –∏–∑ .env (–æ–±—â–∏–π —Å –æ—Å–Ω–æ–≤–Ω—ã–º –ø—Ä–æ–µ–∫—Ç–æ–º)
- –ù–∏–∫–æ–≥–¥–∞ –Ω–µ —Ö—Ä–∞–Ω–∏–º plaintext credentials

**–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è:**
- OAuth —á–µ—Ä–µ–∑ `auth_web_server.py`
- –°–µ—Å—Å–∏–∏ —Ö—Ä–∞–Ω—è—Ç—Å—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –≤ `sessions/`
- Web –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–∞ –ø–æ—Ä—Ç—É 8001

**–ó–∞—â–∏—Ç–∞ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (.gitignore):**

**–î–≤–æ–π–Ω–æ–π —É—Ä–æ–≤–µ–Ω—å –∑–∞—â–∏—Ç—ã:**
1. **–ö–æ—Ä–Ω–µ–≤–æ–π `.gitignore`** - –∑–∞—â–∏—Ç–∞ –Ω–∞ —É—Ä–æ–≤–Ω–µ –≤—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
2. **`telethon/.gitignore`** - –ª–æ–∫–∞–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ –ø–æ–¥–ø—Ä–æ–µ–∫—Ç–∞

**–ö—Ä–∏—Ç–∏—á–Ω–æ –∑–∞—â–∏—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:**
```gitignore
# Telegram session —Ñ–∞–π–ª—ã (—Ç–æ–∫–µ–Ω—ã –¥–æ—Å—Ç—É–ø–∞!)
sessions/
*.session
*.session-journal

# –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
data/
*.db
*.sqlite
*.sqlite3
*.db-shm
*.db-wal

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
.env
**/.env
telethon/.env

# –õ–æ–≥–∏
logs/
*.log
```

**–í–∞–∂–Ω–æ:** –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –∫–æ–º–º–∏—Ç—å—Ç–µ:
- `.session` —Ñ–∞–π–ª—ã - —Å–æ–¥–µ—Ä–∂–∞—Ç —Ç–æ–∫–µ–Ω—ã Telegram
- `data/telethon_bot.db` - —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ credentials
- `.env` —Ñ–∞–π–ª—ã - —Å–æ–¥–µ—Ä–∂–∞—Ç —Å–µ–∫—Ä–µ—Ç—ã –∏ API –∫–ª—é—á–∏

## üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ

### –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ
- –í—Å–µ —Ç–µ—Å—Ç—ã –≤ `tests/`
- –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤ –≤ `tests/README.md`

### –ó–∞–ø—É—Å–∫
```bash
cd /home/ilyasni/n8n-server/n8n-installer/telethon
pytest tests/ -v
pytest tests/test_many_to_many.py
pytest tests/test_retention_system.py
```

### –ü–æ–∫—Ä—ã—Ç–∏–µ
```bash
pytest tests/ --cov=. --cov-report=html
```

### –ü—Ä–∞–≤–∏–ª–∞ –Ω–∞–ø–∏—Å–∞–Ω–∏—è
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ pytest –∏ pytest-asyncio
- –¢–µ—Å—Ç–∏—Ä—É–π—Ç–µ –Ω–∞ SQLite (in-memory –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏)
- –ú–æ–∫–∏ –¥–ª—è Telegram API
- –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã: –º–æ–¥–µ–ª–∏, API endpoints, –ø–∞—Ä—Å–µ—Ä

## üìù –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è

### –°—Ç—Ä—É–∫—Ç—É—Ä–∞
- `docs/quickstart/` - –±—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç (–Ω–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏)
- `docs/features/` - –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π
- `docs/migrations/` - —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞ –ø–æ –º–∏–≥—Ä–∞—Ü–∏—è–º –ë–î
- `docs/troubleshooting/` - —Ä–µ—à–µ–Ω–∏–µ —Ç–∏–ø–∏—á–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º

### –ü—Ä–∞–≤–∏–ª–∞
- –í—Å–µ–≥–¥–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
- Markdown —Å —ç–º–æ–¥–∑–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
- –ü—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏
- –°—Å—ã–ª–∫–∏ –Ω–∞ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
- –ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±–Ω–æ–≤–ª—è–π—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª

### –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ
- –ù–æ–≤—ã–µ API endpoints
- –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –º–æ–¥–µ–ª—è—Ö –ë–î
- –ù–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
- Breaking changes

## üîß –°–∫—Ä–∏–ø—Ç—ã

### –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—é
- `scripts/setup/` - –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
- `scripts/migrations/` - –º–∏–≥—Ä–∞—Ü–∏–∏ –ë–î
- `scripts/utils/` - –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏

### Helper —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: `scripts/utils/dev.sh`

**–ë—ã—Å—Ç—Ä–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Å Docker:**
```bash
cd /home/ilyasni/n8n-server/n8n-installer/telethon

# Docker —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ (–æ—Å–Ω–æ–≤–Ω–æ–π workflow)
./scripts/utils/dev.sh rebuild  # –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ + –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
./scripts/utils/dev.sh restart  # –†–µ—Å—Ç–∞—Ä—Ç –±–µ–∑ –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∏
./scripts/utils/dev.sh logs     # –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
./scripts/utils/dev.sh stop     # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
./scripts/utils/dev.sh shell    # Bash –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞

# –õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ (–±–µ–∑ Docker, –±—ã—Å—Ç—Ä–µ–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
./scripts/utils/dev.sh setup    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ venv –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
./scripts/utils/dev.sh local    # –ó–∞–ø—É—Å–∫ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã –ª–æ–∫–∞–ª—å–Ω–æ
./scripts/utils/dev.sh api      # –¢–æ–ª—å–∫–æ FastAPI —Å–µ—Ä–≤–µ—Ä
./scripts/utils/dev.sh bot      # –¢–æ–ª—å–∫–æ Telegram –±–æ—Ç
./scripts/utils/dev.sh test     # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
```

**–ê–ª–∏–∞—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –ª—é–±–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:**

–î–æ–±–∞–≤—å—Ç–µ –≤ `~/.bashrc`:
```bash
# Telethon Development Aliases
alias telethon-rebuild='/path/to/telethon/scripts/utils/dev.sh rebuild'
alias telethon-restart='/path/to/telethon/scripts/utils/dev.sh restart'
alias telethon-logs='/path/to/telethon/scripts/utils/dev.sh logs'
alias telethon-stop='/path/to/telethon/scripts/utils/dev.sh stop'
alias telethon-shell='/path/to/telethon/scripts/utils/dev.sh shell'
alias telethon-local='/path/to/telethon/scripts/utils/dev.sh local'
alias telethon-test='/path/to/telethon/scripts/utils/dev.sh test'
alias telethon-cd='cd /path/to/telethon'
alias telethon-help='/path/to/telethon/scripts/utils/dev.sh help'
```

–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ –ª—é–±–æ–≥–æ –º–µ—Å—Ç–∞:
```bash
telethon-rebuild  # –ü–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å
telethon-logs     # –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏
telethon-cd       # –ë—ã—Å—Ç—Ä–æ –ø–µ—Ä–µ–π—Ç–∏ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
```

### –ü—Ä–∞–≤–∏–ª–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–æ–≤
- Shebang –¥–ª—è Python: `#!/usr/bin/env python3`
- Shebang –¥–ª—è Bash: `#!/bin/bash`
- –ü–æ–¥—Ä–æ–±–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
- –ü–æ–Ω—è—Ç–Ω—ã–π –≤—ã–≤–æ–¥ (—ç–º–æ–¥–∑–∏ + —Ü–≤–µ—Ç–∞)
- README.md —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –≤ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

### –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
```python
# –í –Ω–∞—á–∞–ª–µ –∫–∞–∂–¥–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:
if not os.path.exists('.env'):
    print("‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    sys.exit(1)

# –ë—ç–∫–∞–ø –ø–µ—Ä–µ–¥ –º–∏–≥—Ä–∞—Ü–∏–µ–π:
shutil.copy('data/telethon_bot.db', f'data/backup_{timestamp}.db')
```

## üåç –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è

### –ö–æ—Ä–Ω–µ–≤–æ–π .env (–æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–µ–∫—Ç)
```env
# –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è telethon —Å–µ—Ä–≤–∏—Å–æ–º:
TELEGRAM_DATABASE_URL=sqlite:///./telethon/data/telethon_bot.db
ENCRYPTION_KEY=...
POSTGRES_PASSWORD=...
DEFAULT_RETENTION_DAYS=30
CLEANUP_SCHEDULE_TIME=03:00
```

### telethon/.env (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
```env
# –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞:
BOT_TOKEN=...
PARSER_INTERVAL_MINUTES=30
MAX_POSTS_PER_CHANNEL=50
HOST=0.0.0.0
PORT=8010
AUTH_BASE_URL=https://telegram-auth.produman.studio
OPENROUTER_API_KEY=...
OPENROUTER_MODEL=google/gemini-2.0-flash-exp:free
TAGGING_BATCH_SIZE=10
```

### –ü—Ä–∞–≤–∏–ª–∞
- –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –∫–æ–º–º–∏—Ç—å—Ç–µ .env —Ñ–∞–π–ª—ã
- –û–±–Ω–æ–≤–ª—è–π—Ç–µ .env.example –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `python-dotenv` –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
- –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ

## üê≥ Docker –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è

### –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ—Ä–Ω–µ–≤–æ–π docker-compose
```yaml
# docker-compose.override.yml –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
services:
  telethon:
    build: ./telethon
    ports:
      - "8010:8010"  # API
      - "8001:8001"  # Auth web
    volumes:
      - ./telethon/sessions:/app/sessions
      - ./telethon/data:/app/data
      - ./telethon/logs:/app/logs
```

### Dockerfile
- `Dockerfile.telethon` –≤ –∫–æ—Ä–Ω–µ telethon/
- –ë–∞–∑–æ–≤—ã–π –æ–±—Ä–∞–∑: `python:3.11-slim`
- –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ: —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π, —Ä–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è

### –ó–∞–ø—É—Å–∫
```bash
# –ò–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞ n8n-installer:
python start_services.py
```

## üîÑ Workflow —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏

### –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
1. –°–æ–∑–¥–∞–π—Ç–µ –≤–µ—Ç–∫—É: `git checkout -b feature/–Ω–∞–∑–≤–∞–Ω–∏–µ`
2. –†–µ–∞–ª–∏–∑—É–π—Ç–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–∞—Ö
3. **–ü–µ—Ä–µ—Å–æ–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã:** `telethon-rebuild`
4. **–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏:** `telethon-logs`
5. –î–æ–±–∞–≤—å—Ç–µ —Ç–µ—Å—Ç—ã –≤ `tests/`
6. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç—ã: `telethon-test` (–∏–ª–∏ `pytest tests/`)
7. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–∏–Ω—Ç–µ—Ä—ã: `ruff check .`
8. –û–±–Ω–æ–≤–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –≤ `docs/features/`
9. –û–±–Ω–æ–≤–∏—Ç–µ `README.md` –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
10. –°–æ–∑–¥–∞–π—Ç–µ PR

### –¢–∏–ø–∏—á–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Å Docker

```bash
# 1. –í–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–æ–¥
vim telethon/bot.py

# 2. –ü–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å
telethon-rebuild

# 3. –°–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏
telethon-logs

# 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ API/–±–æ—Ç–∞
curl http://localhost:8010/docs

# 5. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤–æ–π—Ç–∏ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
telethon-shell

# 6. –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Ü–∏–∫–ª
```

### –ë—ã—Å—Ç—Ä–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –±–µ–∑ Docker (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞)

```bash
# –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ (–æ–¥–∏–Ω —Ä–∞–∑)
telethon-cd
./scripts/utils/dev.sh setup

# –ó–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω–æ (–º–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è)
./scripts/utils/dev.sh local

# –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ Ctrl+C –∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
```

### –ú–∏–≥—Ä–∞—Ü–∏—è –ë–î
1. –°–æ–∑–¥–∞–π—Ç–µ —Å–∫—Ä–∏–ø—Ç –≤ `scripts/migrations/`
2. –î–æ–∫—É–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –≤ `docs/migrations/`
3. –¢–µ—Å—Ç–∏—Ä—É–π—Ç–µ –Ω–∞ SQLite –∏ PostgreSQL
4. –î–æ–±–∞–≤—å—Ç–µ –≤ `MIGRATION_FILES_LIST.md`
5. –û–±–Ω–æ–≤–∏—Ç–µ CHANGELOG

### –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
1. –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: quickstart/features/migrations/troubleshooting
2. –°–æ–∑–¥–∞–π—Ç–µ –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç–µ .md —Ñ–∞–π–ª
3. –î–æ–±–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –≤ `docs/README.md`
4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç–º–æ–¥–∑–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
5. –ü—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏

## üö® –ß–∞—Å—Ç—ã–µ –æ—à–∏–±–∫–∏

### –ù–ï –¥–µ–ª–∞–π—Ç–µ —Ç–∞–∫:
```python
‚ùå # –ì–ª–æ–±–∞–ª—å–Ω—ã–µ API –∫–ª—é—á–∏ (—Å—Ç–∞—Ä—ã–π –ø–æ–¥—Ö–æ–¥)
API_ID = os.getenv('API_ID')

‚ùå # –ó–∞–ø—Ä–æ—Å—ã –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ user_id
posts = db.query(Post).all()

‚ùå # Plaintext credentials
user.api_key = request.api_key

‚ùå # –•–∞—Ä–¥–∫–æ–¥ –ø—É—Ç–µ–π
db_path = "/home/user/telethon/data/db.sqlite"

‚ùå # –°–∫—Ä–∏–ø—Ç—ã –≤ –∫–æ—Ä–Ω–µ
telethon/my_script.py
```

### ‚úÖ –î–µ–ª–∞–π—Ç–µ —Ç–∞–∫:
```python
‚úÖ # API –∫–ª—é—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_api_id = user.get_decrypted_api_id()

‚úÖ # –í—Å–µ–≥–¥–∞ —Ñ–∏–ª—å—Ç—Ä—É–π—Ç–µ –ø–æ user_id
posts = db.query(Post).filter(Post.user_id == user_id).all()

‚úÖ # –®–∏—Ñ—Ä—É–π—Ç–µ credentials
user.api_key = encrypt_data(request.api_key)

‚úÖ # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø—É—Ç–∏
db_path = os.path.join(BASE_DIR, "data", "db.sqlite")

‚úÖ # –°–∫—Ä–∏–ø—Ç—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø–∞–ø–∫–∞—Ö
telethon/scripts/utils/my_script.py
```

### Troubleshooting —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏

**–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –Ω–µ –∑–∞–ø—É—Å–∫–∞—é—Ç—Å—è:**
```bash
# –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å
docker ps -a | grep telethon

# –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—à–∏–±–∫–∏ –∑–∞–ø—É—Å–∫–∞
docker logs telethon
docker logs telethon-bot

# –ü–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å —Å –Ω—É–ª—è
telethon-stop
docker rm telethon telethon-bot
telethon-rebuild
```

**–õ–æ–≥–∏ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è:**
```bash
# –ü—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ –ª–æ–≥–∞–º
docker logs -f telethon

# –ò–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å—Ç—Ä–æ–∫
docker logs telethon --tail 100
```

**–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–æ–¥–µ –Ω–µ –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è:**
```bash
# –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—Å–æ–±–∏—Ä–∞–π—Ç–µ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π!
telethon-rebuild  # –ù–µ –ø—Ä–æ—Å—Ç–æ restart!
```

**–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è Docker Compose:**
```bash
# GIGACHAT warnings - –µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ GigaChat:
# –î–æ–±–∞–≤—å—Ç–µ –≤ .env –ø—É—Å—Ç—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é:
GIGACHAT_CREDENTIALS=
```

## üîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å n8n

### API endpoints –¥–ª—è n8n workflows
```
GET  /posts                    # –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å—Ç—ã
GET  /posts/{post_id}          # –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–æ—Å—Ç
GET  /channels                 # –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
POST /tags/generate            # –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–≥–∏
GET  /users/{user_id}/settings # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
```

### –ü—Ä–∏–º–µ—Ä—ã workflows
- –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ: `examples/`
- –§–æ—Ä–º–∞—Ç: JSON –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –≤ n8n
- –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ: –æ–ø–∏—Å–∞–Ω–∏–µ –≤ `examples/README.md`
- –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ Notes —É–∑–ª–æ–≤

### Webhook –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
```python
# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏–π –≤ n8n –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤
async def notify_n8n_webhook(post_data: dict):
    webhook_url = user.n8n_webhook_url
    if webhook_url:
        await http_client.post(webhook_url, json=post_data)
```

## üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –ª–æ–≥–∏

### –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
```python
import logging

logger = logging.getLogger(__name__)
logger.info("Parser started")
logger.error("Failed to parse channel", exc_info=True)
```

### –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ª–æ–≥–æ–≤
- –ü–∞–ø–∫–∞: `logs/`
- –§–æ—Ä–º–∞—Ç: `telethon_YYYY-MM-DD.log`
- –†–æ—Ç–∞—Ü–∏—è: –µ–∂–µ–¥–Ω–µ–≤–Ω–æ, —Ö—Ä–∞–Ω–∏—Ç—å 30 –¥–Ω–µ–π

### –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ Docker

**–ß–µ—Ä–µ–∑ –∞–ª–∏–∞—Å—ã:**
```bash
telethon-logs     # Live –ª–æ–≥–∏ –æ–±–æ–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
```

**–ü—Ä—è–º—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
```bash
# –ü–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å—Ç—Ä–æ–∫
docker logs telethon --tail 50
docker logs telethon-bot --tail 50

# Live –ª–æ–≥–∏
docker logs -f telethon
docker logs -f telethon-bot

# –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –º–∏–Ω—É—Ç
docker logs --since 10m telethon

# –ü–æ–∏—Å–∫ –≤ –ª–æ–≥–∞—Ö
docker logs telethon 2>&1 | grep "ERROR"
docker logs telethon 2>&1 | grep "ParserService"
```

**–¢–∏–ø–∏—á–Ω—ã–µ –ª–æ–≥–∏ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π —Ä–∞–±–æ—Ç–µ:**
```
‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞
‚úÖ FastAPI –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://0.0.0.0:8010
‚úÖ Parser Service –∑–∞–ø—É—â–µ–Ω (–∏–Ω—Ç–µ—Ä–≤–∞–ª: 30 –º–∏–Ω—É—Ç)
‚úÖ Cleanup Service –∑–∞–ø—É—â–µ–Ω (–æ—á–∏—Å—Ç–∫–∞ –≤ 03:00)
‚úÖ Telegram Bot –∑–∞–ø—É—â–µ–Ω
üîÑ ParserService: –ü–∞—Ä—Å–∏–Ω–≥ 1 –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...
‚úÖ ParserService: @channel_name - –¥–æ–±–∞–≤–ª–µ–Ω–æ 2 –ø–æ—Å—Ç–æ–≤
üè∑Ô∏è TaggingService: –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É 2 –ø–æ—Å—Ç–æ–≤
‚úÖ TaggingService: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ 5 —Ç–µ–≥–æ–≤
```

### –ú–µ—Ç—Ä–∏–∫–∏
- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
- –í—Ä–µ–º—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞–Ω–∞–ª–∞
- –£—Å–ø–µ—à–Ω–æ—Å—Ç—å —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
- –û—à–∏–±–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏

### –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã

```bash
# –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
docker ps | grep telethon

# API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
curl http://localhost:8010/docs

# –ü–æ—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
curl http://localhost:8010/users/{user_id}/posts?limit=5

# –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ –≤—Ä—É—á–Ω—É—é
curl -X POST http://localhost:8010/parse_all_channels

# –í–æ–π—Ç–∏ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
telethon-shell
```

## üéØ Performance

### –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ bulk_insert –¥–ª—è –ø–æ—Å—Ç–æ–≤
- –ò–Ω–¥–µ–∫—Å—ã –Ω–∞ –≤–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏
- Connection pooling –¥–ª—è –ë–î
- –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
- Batch processing –¥–ª—è —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è

### Limits
```python
MAX_POSTS_PER_CHANNEL = 50      # –ó–∞ –æ–¥–∏–Ω –ø–∞—Ä—Å–∏–Ω–≥
PARSER_INTERVAL_MINUTES = 30    # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
TAGGING_BATCH_SIZE = 10         # –ü–æ—Å—Ç–æ–≤ –∑–∞ —Ä–∞–∑ –¥–ª—è AI
MAX_CHANNELS_PER_USER = 100     # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤
```

## üóÑÔ∏è Supabase –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è

### –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
```
supabase/
‚îú‚îÄ‚îÄ docker/                    # Docker –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
‚îÇ   ‚îú‚îÄ‚îÄ docker-compose.yml    # –û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Supabase
‚îÇ   ‚îú‚îÄ‚îÄ docker-compose.s3.yml # S3-—Å–æ–≤–º–µ—Å—Ç–∏–º–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ (MinIO)
‚îÇ   ‚îú‚îÄ‚îÄ .env.example          # –ü—Ä–∏–º–µ—Ä—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
‚îÇ   ‚îú‚îÄ‚îÄ reset.sh              # –°–∫—Ä–∏–ø—Ç —Å–±—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö
‚îÇ   ‚îî‚îÄ‚îÄ volumes/              # –î–∞–Ω–Ω—ã–µ Supabase (–ë–î, storage, —Ñ—É–Ω–∫—Ü–∏–∏)
```

### –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã Supabase

**–û—Å–Ω–æ–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã** (–∏–∑ `docker-compose.yml`):
1. **PostgreSQL** (`db`) - –æ—Å–Ω–æ–≤–Ω–∞—è –ë–î —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏
2. **Studio** - Web UI –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ë–î (–ø–æ—Ä—Ç 3000)
3. **Kong** - API Gateway (–ø–æ—Ä—Ç—ã 8000/8443)
4. **GoTrue** (`auth`) - —Å–µ—Ä–≤–µ—Ä –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
5. **PostgREST** (`rest`) - REST API –¥–ª—è –ë–î
6. **Realtime** - WebSocket –ø–æ–¥–ø–∏—Å–∫–∏
7. **Storage** - —Ñ–∞–π–ª–æ–≤–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
8. **Edge Functions** - serverless —Ñ—É–Ω–∫—Ü–∏–∏
9. **Supavisor** (`pooler`) - connection pooling
10. **Analytics** (`logflare`) - –ª–æ–≥–∏ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞

**–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã**:
- **imgproxy** - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
- **vector** - —Å–±–æ—Ä –ª–æ–≥–æ–≤
- **meta** - –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ë–î

### –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø—Ä–æ–µ–∫—Ç–æ–º

**–ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ start_services.py:**
```python
# Supabase –≤–∫–ª—é—á–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ COMPOSE_PROFILES –≤ .env
COMPOSE_PROFILES="n8n,flowise,monitoring,supabase"

# start_services.py –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:
# 1. –ö–ª–æ–Ω–∏—Ä—É–µ—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π supabase (sparse checkout)
# 2. –ö–æ–ø–∏—Ä—É–µ—Ç –∫–æ—Ä–Ω–µ–≤–æ–π .env –≤ supabase/docker/.env
# 3. –ó–∞–ø—É—Å–∫–∞–µ—Ç Supabase –ø–µ—Ä–≤—ã–º
# 4. –ñ–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (10 —Å–µ–∫—É–Ω–¥)
# 5. –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
```

**–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ Telegram Parser:**
```python
# –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ Supabase –≤–º–µ—Å—Ç–æ SQLite
# –í –∫–æ—Ä–Ω–µ–≤–æ–º .env:
TELEGRAM_DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@db:5432/postgres

# –í telethon –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ docker-compose.override.yml
```

### Docker Compose –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è

**docker-compose.yml (–æ—Å–Ω–æ–≤–Ω–æ–π):**
- –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã Supabase –≤ –æ–¥–Ω–æ–π —Å–µ—Ç–∏
- Volumes –¥–ª—è –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
- Healthchecks –¥–ª—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
- –ï–¥–∏–Ω—ã–π –ø—Ä–æ–µ–∫—Ç: `name: supabase`

**docker-compose.s3.yml (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):**
- –î–æ–±–∞–≤–ª—è–µ—Ç MinIO –¥–ª—è S3-—Å–æ–≤–º–µ—Å—Ç–∏–º–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
- –ó–∞–º–µ–Ω—è–µ—Ç file-based storage –Ω–∞ S3
- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  ```bash
  docker compose -f docker-compose.yml -f docker-compose.s3.yml up
  ```

**–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –æ—Å–Ω–æ–≤–Ω—ã–º –ø—Ä–æ–µ–∫—Ç–æ–º:**
```yaml
# start_services.py –∏—Å–ø–æ–ª—å–∑—É–µ—Ç:
docker compose -p localai -f supabase/docker/docker-compose.yml up -d
docker compose -p localai -f docker-compose.yml up -d

# –ï–¥–∏–Ω—ã–π –ø—Ä–æ–µ–∫—Ç "localai" –¥–ª—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
# –û–±—â–∞—è —Å–µ—Ç—å: localai_default
```

### –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Supabase

**–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ (–≤ –∫–æ—Ä–Ω–µ–≤–æ–º .env):**
```env
# Secrets
POSTGRES_PASSWORD=...              # –ü–∞—Ä–æ–ª—å PostgreSQL
JWT_SECRET=...                     # JWT —Ç–æ–∫–µ–Ω (–º–∏–Ω–∏–º—É–º 32 —Å–∏–º–≤–æ–ª–∞)
ANON_KEY=...                       # –ü—É–±–ª–∏—á–Ω—ã–π API –∫–ª—é—á
SERVICE_ROLE_KEY=...               # –°–ª—É–∂–µ–±–Ω—ã–π API –∫–ª—é—á
DASHBOARD_USERNAME=...             # –õ–æ–≥–∏–Ω –¥–ª—è Supabase Studio
DASHBOARD_PASSWORD=...             # –ü–∞—Ä–æ–ª—å –¥–ª—è Studio

# Pooler
POOLER_TENANT_ID=1000             # ID —Ç–µ–Ω–∞–Ω—Ç–∞ –¥–ª—è pooler
SECRET_KEY_BASE=...               # –ë–∞–∑–∞ –¥–ª—è —Å–µ–∫—Ä–µ—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π
VAULT_ENC_KEY=...                 # –ö–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è vault
```

**–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ:**
```env
# Database
POSTGRES_HOST=db                   # –•–æ—Å—Ç –ë–î (default: db)
POSTGRES_DB=postgres               # –ò–º—è –ë–î (default: postgres)
POSTGRES_PORT=5432                 # –ü–æ—Ä—Ç –ë–î (default: 5432)

# API
KONG_HTTP_PORT=8000               # Kong HTTP –ø–æ—Ä—Ç
KONG_HTTPS_PORT=8443              # Kong HTTPS –ø–æ—Ä—Ç

# Studio
STUDIO_DEFAULT_ORGANIZATION=...   # –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
STUDIO_DEFAULT_PROJECT=...        # –ü—Ä–æ–µ–∫—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
SUPABASE_PUBLIC_URL=...           # –ü—É–±–ª–∏—á–Ω—ã–π URL

# Auth
SITE_URL=http://localhost:3000    # URL —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
DISABLE_SIGNUP=false              # –û—Ç–∫–ª—é—á–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
ENABLE_EMAIL_SIGNUP=true          # Email —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
ENABLE_PHONE_SIGNUP=true          # Phone —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
```

### –ü—Ä–∞–≤–∏–ª–∞ —Ä–∞–±–æ—Ç—ã —Å Supabase

**–í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ:**
```bash
# –í–∫–ª—é—á–∏—Ç—å –≤ .env:
COMPOSE_PROFILES="n8n,flowise,monitoring,supabase"

# –í—ã–∫–ª—é—á–∏—Ç—å - —É–¥–∞–ª–∏—Ç—å supabase –∏–∑ —Å–ø–∏—Å–∫–∞:
COMPOSE_PROFILES="n8n,flowise,monitoring"
```

**–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î:**
```python
# –ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ (–≤–Ω—É—Ç—Ä–∏ Docker —Å–µ—Ç–∏):
DATABASE_URL = "postgresql://postgres:{password}@db:5432/postgres"

# –ß–µ—Ä–µ–∑ pooler (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω–∞):
DATABASE_URL = "postgresql://postgres:{password}@db:6543/postgres"

# –ò–∑ —Ö–æ—Å—Ç–∞ (—á–µ—Ä–µ–∑ –ø—Ä–æ–±—Ä–æ—à–µ–Ω–Ω—ã–π –ø–æ—Ä—Ç):
DATABASE_URL = "postgresql://postgres:{password}@localhost:5432/postgres"
```

**REST API –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:**
```bash
# –ë–∞–∑–æ–≤—ã–π URL
SUPABASE_URL=http://localhost:8000

# –ó–∞–ø—Ä–æ—Å —Å ANON_KEY:
curl -X GET "http://localhost:8000/rest/v1/your_table" \
  -H "apikey: YOUR_ANON_KEY" \
  -H "Authorization: Bearer YOUR_ANON_KEY"

# –ó–∞–ø—Ä–æ—Å —Å SERVICE_ROLE_KEY (–ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø):
curl -X GET "http://localhost:8000/rest/v1/your_table" \
  -H "apikey: YOUR_SERVICE_ROLE_KEY" \
  -H "Authorization: Bearer YOUR_SERVICE_ROLE_KEY"
```

**Storage –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:**
```bash
# –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞:
curl -X POST "http://localhost:8000/storage/v1/object/bucket-name/file.jpg" \
  -H "Authorization: Bearer YOUR_SERVICE_ROLE_KEY" \
  -F "file=@/path/to/file.jpg"

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–∞:
http://localhost:8000/storage/v1/object/public/bucket-name/file.jpg
```

### Volumes –∏ –¥–∞–Ω–Ω—ã–µ

**–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ volumes:**
```yaml
volumes:
  - ./volumes/db/data:/var/lib/postgresql/data  # –ë–î –¥–∞–Ω–Ω—ã–µ
  - ./volumes/storage:/var/lib/storage          # –§–∞–π–ª—ã
  - ./volumes/functions:/home/deno/functions    # Edge Functions
  - db-config:/etc/postgresql-custom            # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ë–î
```

**Backup –¥–∞–Ω–Ω—ã—Ö:**
```bash
# Backup PostgreSQL:
docker exec supabase-db pg_dump -U postgres postgres > backup.sql

# Backup –≤—Å–µ—Ö volumes:
cd supabase/docker
tar -czf backup-$(date +%Y%m%d).tar.gz volumes/

# –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ:
docker exec -i supabase-db psql -U postgres postgres < backup.sql
```

**–°–±—Ä–æ—Å –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö:**
```bash
cd supabase/docker
./reset.sh
# –ò–ª–∏ –≤—Ä—É—á–Ω—É—é:
docker compose down -v --remove-orphans
rm -rf volumes/db/data
docker compose up -d
```

### –ú–∏–≥—Ä–∞—Ü–∏–∏ –ë–î

**–°–æ–∑–¥–∞–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏:**
```bash
# –í telethon/scripts/migrations/ —Å–æ–∑–¥–∞–π—Ç–µ —Å–∫—Ä–∏–ø—Ç:
# migrate_to_supabase.py

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase:
DATABASE_URL = os.getenv('TELEGRAM_DATABASE_URL') or \
               f"postgresql://postgres:{password}@localhost:5432/postgres"

engine = create_engine(DATABASE_URL)
```

**–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ Supabase:**
```bash
# 1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ Supabase
python start_services.py

# 2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ DATABASE_URL
export TELEGRAM_DATABASE_URL="postgresql://postgres:password@localhost:5432/postgres"

# 3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏—é
cd telethon
python scripts/migrations/migrate_to_supabase.py

# 4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤ Studio
# http://localhost:3000
```

### –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –æ—Ç–ª–∞–¥–∫–∞

**–õ–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–æ–≤:**
```bash
# –í—Å–µ –ª–æ–≥–∏ Supabase:
docker compose -p localai -f supabase/docker/docker-compose.yml logs -f

# –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–µ—Ä–≤–∏—Å:
docker logs -f supabase-db
docker logs -f supabase-studio
docker logs -f supabase-kong
```

**–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è:**
```bash
# Healthcheck –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤:
docker ps --filter "name=supabase" --format "table {{.Names}}\t{{.Status}}"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ë–î:
docker exec supabase-db pg_isready -U postgres

# –ü—Ä–æ–≤–µ—Ä–∫–∞ API:
curl http://localhost:8000/rest/v1/
```

**Analytics –∏ –º–µ—Ç—Ä–∏–∫–∏:**
- –õ–æ–≥–∏: http://localhost:4000 (Logflare)
- –ú–µ—Ç—Ä–∏–∫–∏ –≤ Studio: http://localhost:3000

### –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å Supabase

**–í–ê–ñ–ù–û –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω–∞:**
1. **–ò–∑–º–µ–Ω–∏—Ç–µ –≤—Å–µ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ —Å–µ–∫—Ä–µ—Ç—ã** –≤ .env:
   - `POSTGRES_PASSWORD`
   - `JWT_SECRET`
   - `DASHBOARD_PASSWORD`
   - `SECRET_KEY_BASE`
   - `VAULT_ENC_KEY`

2. **–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ JWT –∫–ª—é—á–∏:**
   ```bash
   # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ https://supabase.com/docs/guides/self-hosting/docker#generate-api-keys
   # –ò–ª–∏ —Å–∫—Ä–∏–ø—Ç –∏–∑ scripts/03_generate_secrets.sh
   ```

3. **RLS (Row Level Security):**
   ```sql
   -- –í—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–∞–π—Ç–µ RLS –¥–ª—è —Ç–∞–±–ª–∏—Ü:
   ALTER TABLE your_table ENABLE ROW LEVEL SECURITY;
   
   -- –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –ø–æ–ª–∏—Ç–∏–∫–∏:
   CREATE POLICY "Users can view own data" ON your_table
     FOR SELECT USING (auth.uid() = user_id);
   ```

4. **–û–≥—Ä–∞–Ω–∏—á—å—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –ø–æ—Ä—Ç–∞–º:**
   ```yaml
   # –í –ø—Ä–æ–¥–∞–∫—à–Ω–µ –Ω–µ –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–π—Ç–µ –≤—Å–µ –ø–æ—Ä—Ç—ã –Ω–∞—Ä—É–∂—É
   # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ Kong (8000/8443) —á–µ—Ä–µ–∑ Caddy reverse proxy
   ```

### Troubleshooting

**Supabase –Ω–µ —Å—Ç–∞—Ä—Ç—É–µ—Ç:**
```bash
# –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
docker compose -p localai ps

# –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ analytics (—á–∞—Å—Ç–æ –æ–Ω –ø–µ—Ä–≤—ã–π –ø–∞–¥–∞–µ—Ç):
docker logs supabase-analytics

# –ü–µ—Ä–µ—Å–æ–∑–¥–∞–π—Ç–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã:
docker compose -p localai -f supabase/docker/docker-compose.yml down
docker compose -p localai -f supabase/docker/docker-compose.yml up -d
```

**–û—à–∏–±–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:**
```bash
# –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –ë–î –∑–∞–ø—É—â–µ–Ω–∞:
docker exec supabase-db pg_isready -U postgres

# –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–æ–ª—å –≤ .env:
docker exec supabase-db psql -U postgres -c "SELECT version();"

# –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–µ—Ç—å:
docker network inspect localai_default
```

**Studio –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è:**
```bash
# –ü—Ä–æ–≤–µ—Ä—å—Ç–µ healthcheck:
docker inspect supabase-studio | grep -A 10 Health

# –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—Ä—Ç 3000:
netstat -tulpn | grep 3000

# –ü–µ—Ä–µ—Å–æ–∑–¥–∞–π—Ç–µ Studio:
docker compose -p localai restart studio
```

## üìö –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏

### –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞
- [–û—Å–Ω–æ–≤–Ω–æ–π README](telethon/README.md)
- [–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è Telegram Parser](telethon/docs/README.md)
- [–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç](telethon/docs/quickstart/QUICK_START.md)
- [–û—Ç—á–µ—Ç –æ —Ä–µ–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏](telethon/REORGANIZATION_SUMMARY.md)

### –í–Ω–µ—à–Ω—è—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
- [Supabase Self-Hosting Docs](https://supabase.com/docs/guides/hosting/docker)
- [Supabase API Reference](https://supabase.com/docs/reference)
- [PostgreSQL Documentation](https://www.postgresql.org/docs/)
- [Telegram API Docs](https://core.telegram.org/api)
- [FastAPI Docs](https://fastapi.tiangolo.com/)
- [SQLAlchemy Docs](https://docs.sqlalchemy.org/)
- [n8n Documentation](https://docs.n8n.io/)

## ‚ú® Best Practices

1. **–ö–æ–¥:** –ß–∏—Å—Ç—ã–π, —á–∏—Ç–∞–µ–º—ã–π, —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
2. **–¢–∏–ø–∏–∑–∞—Ü–∏—è:** –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ type hints –≤–µ–∑–¥–µ
3. **Async:** –í—Å–µ I/O –æ–ø–µ—Ä–∞—Ü–∏–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ
4. **Errors:** –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è, –ª–æ–≥–∏—Ä—É–π—Ç–µ
5. **Security:** –®–∏—Ñ—Ä—É–π—Ç–µ credentials, –≤–∞–ª–∏–¥–∏—Ä—É–π—Ç–µ input
6. **Testing:** –ü–æ–∫—Ä—ã—Ç–∏–µ >80%, —Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ edge cases
7. **Docs:** –û–±–Ω–æ–≤–ª—è–π—Ç–µ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏ API
8. **Git:** –û—Å–º—ã—Å–ª–µ–Ω–Ω—ã–µ –∫–æ–º–º–∏—Ç—ã, –Ω–µ –∫–æ–º–º–∏—Ç—å—Ç–µ .env

---

**–í–µ—Ä—Å–∏—è –ø—Ä–∞–≤–∏–ª:** 2.1  
**–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:** 10 –æ–∫—Ç—è–±—Ä—è 2025  
**–ü—Ä–æ–µ–∫—Ç:** n8n-server / Telegram Channel Parser + Supabase + GPT2Giga

## üÜï –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏ 2.1

### –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
- ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω `scripts/utils/dev.sh` - helper —Å–∫—Ä–∏–ø—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
- ‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (–±–µ–∑ Docker) –∏ Docker-based —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
- ‚úÖ –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∏, —Ä–µ—Å—Ç–∞—Ä—Ç–∞, –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤
- ‚úÖ –ê–ª–∏–∞—Å—ã –≤ `~/.bashrc` –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –ª—é–±–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
- ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –ø—É—Ç–∏ –≤ dev.sh –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å docker-compose

### –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
- ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π —á–µ—Ä–µ–∑ `start_services.py`
- ‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è gpt2giga-proxy (OpenAI-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π API –¥–ª—è GigaChat)
- ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è gpt2giga: `GIGACHAT_CREDENTIALS` (–µ–¥–∏–Ω—ã–π API –∫–ª—é—á)
- ‚úÖ –ï–¥–∏–Ω–∞—è —Å–µ—Ç—å `localai_default` –¥–ª—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
- ‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ `.env`
- ‚úÖ –£—Å—Ç—Ä–∞–Ω–µ–Ω—ã –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è Docker Compose

### –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
- ‚úÖ –î–≤–æ–π–Ω–æ–π —É—Ä–æ–≤–µ–Ω—å –∑–∞—â–∏—Ç—ã `.gitignore` (–∫–æ—Ä–Ω–µ–≤–æ–π + –ª–æ–∫–∞–ª—å–Ω—ã–π)
- ‚úÖ –ó–∞—â–∏—Ç–∞ `.session` —Ñ–∞–π–ª–æ–≤, –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö, –ª–æ–≥–æ–≤
- ‚úÖ –Ø–≤–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è SQLite —Ñ–∞–π–ª–æ–≤ –∏ Telegram —Å–µ—Å—Å–∏–π
- ‚úÖ –°–æ–∑–¥–∞–Ω `telethon/.gitignore` –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π –∑–∞—â–∏—Ç—ã

### –°–∫—Ä–∏–ø—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–∫–∏
- ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω `scripts/03_generate_secrets.sh` - –∑–∞–ø—Ä–æ—Å BOT_TOKEN, OPENROUTER_API_KEY, GIGACHAT_CREDENTIALS
- ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω `scripts/04_wizard.sh` - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö
- ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω `scripts/06_final_report.sh` - –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ telethon –∏ gpt2giga
- ‚úÖ –£–ø—Ä–æ—â–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è GigaChat (–æ–¥–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –≤–º–µ—Å—Ç–æ 5)

### –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
- ‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω—ã –ø—Ä–∞–≤–∏–ª–∞ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è dev.sh –∏ –∞–ª–∏–∞—Å–æ–≤
- ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ gpt2giga
- ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω `scripts/README.md` —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –ø–æ dev.sh
- ‚úÖ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∞–ª–∏–∞—Å–æ–≤ –≤ ~/.bashrc

### –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
- ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ `logs` –≤ dev.sh (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä—è–º—ã–µ docker –∫–æ–º–∞–Ω–¥—ã)
- ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø—É—Ç–∏ –≤ dev.sh –Ω–∞ –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ
- ‚úÖ dev.sh –ø–µ—Ä–µ–º–µ—â–µ–Ω –∏–∑ –∫–æ—Ä–Ω—è –≤ `scripts/utils/` —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∏–ª–∞–º
