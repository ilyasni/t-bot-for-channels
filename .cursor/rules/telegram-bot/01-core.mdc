---
title: "Telegram Bot Core Rules"
description: "–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ Telegram Channel Parser Bot"
tags: ["telegram", "core", "structure", "postgres", "timezone", "context7"]
version: "3.4"
priority: critical
autoAttach: true
scope:
  - "telethon/**/*.py"
  - "!telethon/tests/**"
  - "!telethon/scripts/**"
---

# Telegram Channel Parser Bot - Core Rules

## üéØ High-Level Overview

Telegram Channel Parser Bot - –º–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Telegram –∫–∞–Ω–∞–ª–æ–≤ —Å:
- REST API –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å n8n
- AI —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º (OpenRouter)
- RAG-—Å–∏—Å—Ç–µ–º–æ–π –¥–ª—è –ø–æ–∏—Å–∫–∞
- QR-–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π (–±–µ–∑ SMS)
- Admin Panel —á–µ—Ä–µ–∑ Mini App

**–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ:** `/home/ilyasni/n8n-server/n8n-installer/telethon/`

## üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞

```
telethon/
‚îú‚îÄ‚îÄ README.md                  # –ì–ª–∞–≤–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
‚îú‚îÄ‚îÄ TESTING_GUIDE.md           # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RAG
‚îú‚îÄ‚îÄ QUICK_REFERENCE.md         # –®–ø–∞—Ä–≥–∞–ª–∫–∞ –∫–æ–º–∞–Ω–¥
‚îú‚îÄ‚îÄ docs/                      # –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
‚îÇ   ‚îú‚îÄ‚îÄ quickstart/           # –ë—ã—Å—Ç—Ä—ã–µ —Å—Ç–∞—Ä—Ç—ã
‚îÇ   ‚îú‚îÄ‚îÄ features/             # –§—É–Ω–∫—Ü–∏–∏
‚îÇ   ‚îî‚îÄ‚îÄ archive/              # –ê—Ä—Ö–∏–≤ –æ—Ç—á–µ—Ç–æ–≤
‚îú‚îÄ‚îÄ rag_service/              # RAG –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å
‚îú‚îÄ‚îÄ maintenance/              # Unified retention service
‚îú‚îÄ‚îÄ scripts/                   # –°–∫—Ä–∏–ø—Ç—ã
‚îÇ   ‚îú‚îÄ‚îÄ setup/
‚îÇ   ‚îú‚îÄ‚îÄ migrations/
‚îÇ   ‚îî‚îÄ‚îÄ utils/
‚îú‚îÄ‚îÄ tests/                     # –¢–µ—Å—Ç—ã
‚îî‚îÄ‚îÄ [*.py —Ñ–∞–π–ª—ã]              # –ö–æ–¥ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
```

## üêç –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã

### Core —Ñ–∞–π–ª—ã (–∫–æ—Ä–µ–Ω—å telethon/)
```python
bot.py                    # Telegram –±–æ—Ç
main.py                   # FastAPI —Å–µ—Ä–≤–µ—Ä
parser_service.py         # –ü–∞—Ä—Å–µ—Ä –∫–∞–Ω–∞–ª–æ–≤
models.py                 # SQLAlchemy –º–æ–¥–µ–ª–∏
database.py               # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
tagging_service.py        # AI —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
# cleanup_service.py.deprecated  # –£—Å—Ç–∞—Ä–µ–≤—à–∏–π retention —Å–µ—Ä–≤–∏—Å
qr_auth_manager.py        # QR Login –º–µ–Ω–µ–¥–∂–µ—Ä
admin_panel_manager.py    # Admin sessions
shared_auth_manager.py    # Telethon –∫–ª–∏–µ–Ω—Ç—ã
```

### Maintenance Services
```python
maintenance/
‚îú‚îÄ‚îÄ unified_retention_service.py  # –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
‚îú‚îÄ‚îÄ cleanup_scheduler.py          # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—á–∏—Å—Ç–∫–∏
‚îî‚îÄ‚îÄ data_retention.py.deprecated  # –£—Å—Ç–∞—Ä–µ–≤—à–∏–π —Å–µ—Ä–≤–∏—Å
```

## ‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ù–´–ï –ü–†–ê–í–ò–õ–ê

### 0. –í–°–ï–ì–î–ê –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Context7 –ø–µ—Ä–µ–¥ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–æ–π

**–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û:** –ü–µ—Ä–µ–¥ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–µ–π –ª—é–±–æ–π –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π:

```python
# ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–´–ô WORKFLOW:
# 1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Context7 –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–µ—à–µ–Ω–∏–π
#    - Telegram Bot API best practices
#    - FastAPI async patterns
#    - SQLAlchemy relationship patterns
#    - Pydantic validation examples

# 2. –ò–∑—É—á–∏—Ç–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é —á–µ—Ä–µ–∑ Context7
#    - –ù–∞–π–¥–∏—Ç–µ –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
#    - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ API
#    - –£–∑–Ω–∞–π—Ç–µ best practices

# 3. –¢–û–õ–¨–ö–û –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –ø–∏—à–∏—Ç–µ –∫–æ–¥

# ‚ùå –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û:
# - –ù–∞—á–∏–Ω–∞—Ç—å –∫–æ–¥–∏—Ç—å –±–µ–∑ –∏–∑—É—á–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
# - –ü–æ–ª–∞–≥–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ memory/–ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏—è
# - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
```

**Auto-integration hint:**
```python
# If uncertain about library usage, AI should automatically query:
# Context7("library-name best practices")
# Context7("library-name current API version")
```

**–ü—Ä–∏–º–µ—Ä—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:**

```bash
# –ü–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º Telegram Mini App
‚Üí Context7: "Telegram Mini Apps WebAppInfo best practices"
‚Üí Context7: "Telegram Bot API WebApp methods"

# –ü–µ—Ä–µ–¥ —Ä–∞–±–æ—Ç–æ–π —Å FastAPI
‚Üí Context7: "FastAPI background tasks async"
‚Üí Context7: "FastAPI dependency injection patterns"

# –ü–µ—Ä–µ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º SQLAlchemy –º–æ–¥–µ–ª–µ–π
‚Üí Context7: "SQLAlchemy relationships many-to-many"
‚Üí Context7: "SQLAlchemy timezone aware datetime PostgreSQL"

# –ü–µ—Ä–µ–¥ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –≤–Ω–µ—à–Ω–µ–≥–æ API
‚Üí Context7: "Qdrant Python client async"
‚Üí Context7: "GigaChat embeddings API"
```

**Consequences:**
- ‚ùå –ë–ï–ó Context7: —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã, –±–∞–≥–∏, –Ω–µ–æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –∫–æ–¥
- ‚úÖ –° Context7: –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ best practices, –º–µ–Ω—å—à–µ –æ—à–∏–±–æ–∫, –±—ã—Å—Ç—Ä–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞

### 1. PostgreSQL –¢–û–õ–¨–ö–û (–ë–ï–ó SQLite!)

```python
# ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ
def get_database_url() -> str:
    database_url = os.getenv("TELEGRAM_DATABASE_URL")
    
    if not database_url:
        raise ValueError(
            "TELEGRAM_DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\n"
            "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å: postgresql://postgres:password@db:5432/postgres"
        )
    
    if "sqlite" in database_url.lower():
        raise ValueError(
            "SQLite –ù–ï –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è!\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ PostgreSQL (Supabase)"
        )
    
    return database_url

# ‚ùå –ù–ò–ö–û–ì–î–ê —Ç–∞–∫ –Ω–µ –¥–µ–ª–∞–π—Ç–µ
db_url = os.getenv("DATABASE_URL", "sqlite:///fallback.db")  # –ù–ï–¢!
```

### 2. Timezone-Aware DateTime –í–°–ï–ì–î–ê

```python
from datetime import datetime, timezone
from zoneinfo import ZoneInfo

# ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ - UTC –≤ –ë–î
now = datetime.now(timezone.utc)
user.created_at = datetime.now(timezone.utc)

# ‚úÖ Europe/Moscow –¥–ª—è display
LOCAL_TZ = ZoneInfo('Europe/Moscow')
display_time = user.created_at.astimezone(LOCAL_TZ)

# ‚úÖ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å timezone check
if expires.tzinfo is None:
    expires = expires.replace(tzinfo=timezone.utc)

# ‚ùå Naive datetime - –ù–ò–ö–û–ì–î–ê!
user.created_at = datetime.now()  # –ù–ï–¢!
```

### 3. Redis –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω (–±–µ–∑ –ø–∞—Ä–æ–ª—è!)

```python
# ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ - Valkey default –±–µ–∑ –ø–∞—Ä–æ–ª—è
import redis

redis_client = redis.Redis(
    host=os.getenv("REDIS_HOST", "redis"),
    port=int(os.getenv("REDIS_PORT", 6379)),
    decode_responses=True
)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
redis_client.ping()

# ‚ùå –ù–ï —É–∫–∞–∑—ã–≤–∞–π—Ç–µ password!
redis_client = redis.Redis(host='redis', password='...')  # –ù–ï–¢!
```

### 4. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–æ–≤

**–í–°–ï–ì–î–ê:**
- –û—Å–Ω–æ–≤–Ω—ã–µ .py ‚Üí –∫–æ—Ä–µ–Ω—å `telethon/`
- –°–∫—Ä–∏–ø—Ç—ã ‚Üí `scripts/{setup|migrations|utils}/`
- –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è ‚Üí `docs/{quickstart|features|migrations|troubleshooting}/`
- –ê—Ä—Ö–∏–≤ ‚Üí `docs/archive/{reports|testing}/`
- –¢–æ–ª—å–∫–æ 3 MD –≤ –∫–æ—Ä–Ω–µ: `README.md`, `TESTING_GUIDE.md`, `QUICK_REFERENCE.md`

**–ù–ò–ö–û–ì–î–ê:**
- ‚ùå –ù–ï —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ MD –≤ –∫–æ—Ä–Ω–µ telethon/ (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ docs/)
- ‚ùå –ù–ï —Ä–∞–∑–º–µ—â–∞–π—Ç–µ —Å–∫—Ä–∏–ø—Ç—ã –≤ –∫–æ—Ä–Ω–µ
- ‚ùå –ù–ï —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ standalone docker-compose.yml

## üîß Code Style

### Type Hints –≤–µ–∑–¥–µ

```python
async def generate_answer(
    user_id: int,
    query: str,
    top_k: int = 10
) -> Dict[str, Any]:
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º RAG
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        query: –í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        top_k: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        
    Returns:
        Dict —Å answer, sources, metadata
        
    Raises:
        HTTPException: –ï—Å–ª–∏ —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
    """
    pass
```

### Async Everywhere

```python
# ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ
async with httpx.AsyncClient() as client:
    response = await client.get(url)

# ‚ùå –ë–ª–æ–∫–∏—Ä—É–µ—Ç event loop
response = requests.get(url)  # –ù–ï–¢!
```

## üìã –ú–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ä–µ–∂–∏–º

**–í–°–ï–ì–î–ê —Ñ–∏–ª—å—Ç—Ä—É–π—Ç–µ –ø–æ user_id:**

```python
# ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ
posts = db.query(Post).filter(
    Post.user_id == user_id  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!
).all()

# ‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ - –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –¥–∞–Ω–Ω—ã–º
posts = db.query(Post).all()  # –ù–ï–¢!
```

## üîê –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å

### –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ credentials

```python
from crypto_utils import encrypt_data, decrypt_data

# ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ
user.api_key = encrypt_data(request.api_key)

# ‚ùå Plaintext - –ù–ò–ö–û–ì–î–ê!
user.api_key = request.api_key  # –ù–ï–¢!
```

### –ó–∞—â–∏—Ç–∞ .gitignore

**–ö—Ä–∏—Ç–∏—á–Ω–æ –∑–∞—â–∏—â–µ–Ω–Ω—ã–µ:**
```gitignore
# Telegram tokens
sessions/
*.session
*.session-journal

# Databases
data/
*.db
*.sqlite*

# Environment
.env
**/.env

# Logs
logs/
*.log
```

## ‚úÖ Verification Steps

–ü–µ—Ä–µ–¥ –∫–æ–º–º–∏—Ç–æ–º –ø—Ä–æ–≤–µ—Ä—å—Ç–µ:

1. **Context7 –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω**: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –∏–∑—É—á–∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é —á–µ—Ä–µ–∑ Context7
   - –ï—Å—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö
   - –ü–∞—Ç—Ç–µ—Ä–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç best practices –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
   - –í–µ—Ä—Å–∏–∏ API –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ
2. **PostgreSQL –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è**: `grep -r "sqlite" database.py` ‚Üí –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å 0 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
3. **Timezone-aware datetime**: –í—Å–µ `datetime.now()` ‚Üí `datetime.now(timezone.utc)`
4. **Redis –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ**: `redis_client.ping()` —É—Å–ø–µ—à–µ–Ω
5. **–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è user_id**: –í—Å–µ queries —Å–æ–¥–µ—Ä–∂–∞—Ç `.filter(... user_id == ...)`
6. **Type hints**: –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è–º–∏ —Ç–∏–ø–æ–≤
7. **Async functions**: HTTP –∑–∞–ø—Ä–æ—Å—ã —á–µ—Ä–µ–∑ `httpx.AsyncClient()`

## üö® –ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –Ω–∞—Ä—É—à–µ–Ω–∏—è

**–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ Context7:**
- ‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö API –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
- ‚ùå –ë–∞–≥–∏ –∏–∑-–∑–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–∏–±–ª–∏–æ—Ç–µ–∫
- ‚ùå –ù–µ–æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –∫–æ–¥, –Ω–µ —Å–ª–µ–¥—É—é—â–∏–π best practices
- ‚ùå –ü–æ—Ç–µ—Ä—è –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫
- ‚ùå –ù–µ—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –≤–µ—Ä—Å–∏—è–º–∏

**PostgreSQL fallback –Ω–∞ SQLite:**
- ‚ùå –ö–æ–¥ –Ω–µ –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è –≤ production
- ‚ùå –ú–∏–≥—Ä–∞—Ü–∏–∏ —É–ø–∞–¥—É—Ç —Å –æ—à–∏–±–∫–∞–º–∏
- ‚ùå –ü–æ—Ç–µ—Ä—è timezone awareness

**–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ timezone:**
- ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è expires_at
- ‚ùå –û—à–∏–±–∫–∏ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ PostgreSQL
- ‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

**–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ user_id —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:**
- ‚ùå –£—Ç–µ—á–∫–∞ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
- ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —É—è–∑–≤–∏–º–æ—Å—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

## üîÄ Conflict Resolution

**If both core and database rules apply:**
- Follow `01-core.mdc` for PostgreSQL requirement
- Follow `03-database.mdc` for specific model implementations

**If both core and security rules apply:**
- Follow `01-core.mdc` for timezone-aware datetime
- Follow `05-security.mdc` for auth logic and encryption

## üìù Quick Examples

### ‚úÖ Correct: PostgreSQL only
```python
# Good - raises error if SQLite
if "sqlite" in database_url.lower():
    raise ValueError("SQLite NOT supported!")
```

### ‚ùå Bad: SQLite fallback
```python
# Bad - allows SQLite
db_url = os.getenv("DB_URL", "sqlite:///fallback.db")
```

### ‚úÖ Correct: Timezone-aware datetime
```python
# Good - always timezone-aware
user.created_at = datetime.now(timezone.utc)
```

### ‚ùå Bad: Naive datetime
```python
# Bad - timezone-naive
user.created_at = datetime.now()
```

### ‚úÖ Correct: User filtering
```python
# Good - filters by user_id
posts = db.query(Post).filter(Post.user_id == user_id).all()
```

### ‚ùå Bad: No user filtering
```python
# Bad - returns all users' data
posts = db.query(Post).all()
```

### ‚úÖ Correct: Redis prefix
```python
# Good - uses prefix for isolation
redis.setex(f"qr_session:{session_id}", 300, data)
```

### ‚ùå Bad: No Redis prefix
```python
# Bad - potential key conflicts
redis.setex(session_id, 300, data)
```

### ‚úÖ Correct: Async HTTP
```python
# Good - non-blocking
async with httpx.AsyncClient() as client:
    response = await client.get(url)
```

### ‚ùå Bad: Sync HTTP
```python
# Bad - blocks event loop
response = requests.get(url)
```

## üìö –°–≤—è–∑–∞–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞

- `02-architecture.mdc` ‚Äî –ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
- `03-database.mdc` ‚Äî PostgreSQL, Redis, –º–æ–¥–µ–ª–∏
- `05-security.mdc` ‚Äî QR-login, authentication
