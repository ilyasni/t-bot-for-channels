---
title: "Development Workflow"
description: "–ü—Ä–æ—Ü–µ—Å—Å—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏, —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ CI/CD"
tags: ["development", "testing", "workflow", "devtools"]
version: "3.1"
---

# Development Workflow

## üéØ High-Level Overview

–ë—ã—Å—Ç—Ä–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π:
- Docker-based workflow (–ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –∑–∞ 30 —Å–µ–∫)
- –õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ (–±–µ–∑ Docker)
- Helper —Å–∫—Ä–∏–ø—Ç `dev.sh`
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ

## üîß Helper Script: dev.sh

**–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ:** `scripts/utils/dev.sh`

### Docker Commands

```bash
cd /home/ilyasni/n8n-server/n8n-installer/telethon

# –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ + –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ (–æ—Å–Ω–æ–≤–Ω–æ–π workflow)
./scripts/utils/dev.sh rebuild

# –†–µ—Å—Ç–∞—Ä—Ç –±–µ–∑ –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∏
./scripts/utils/dev.sh restart

# –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤
./scripts/utils/dev.sh logs

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞
./scripts/utils/dev.sh stop

# Bash –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
./scripts/utils/dev.sh shell
```

### Local Development

```bash
# –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ (–æ–¥–∏–Ω —Ä–∞–∑)
./scripts/utils/dev.sh setup

# –ó–∞–ø—É—Å–∫ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã –ª–æ–∫–∞–ª—å–Ω–æ
./scripts/utils/dev.sh local

# –¢–æ–ª—å–∫–æ FastAPI —Å–µ—Ä–≤–µ—Ä
./scripts/utils/dev.sh api

# –¢–æ–ª—å–∫–æ Telegram –±–æ—Ç
./scripts/utils/dev.sh bot

# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
./scripts/utils/dev.sh test
```

### –ê–ª–∏–∞—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞

**–î–æ–±–∞–≤—å—Ç–µ –≤ `~/.bashrc`:**

```bash
# Telethon Development Aliases
TELETHON_PATH="/home/ilyasni/n8n-server/n8n-installer/telethon"

alias telethon-rebuild="$TELETHON_PATH/scripts/utils/dev.sh rebuild"
alias telethon-restart="$TELETHON_PATH/scripts/utils/dev.sh restart"
alias telethon-logs="$TELETHON_PATH/scripts/utils/dev.sh logs"
alias telethon-stop="$TELETHON_PATH/scripts/utils/dev.sh stop"
alias telethon-shell="$TELETHON_PATH/scripts/utils/dev.sh shell"
alias telethon-local="$TELETHON_PATH/scripts/utils/dev.sh local"
alias telethon-test="$TELETHON_PATH/scripts/utils/dev.sh test"
alias telethon-cd="cd $TELETHON_PATH"
alias telethon-help="$TELETHON_PATH/scripts/utils/dev.sh help"
```

**–ü—Ä–∏–º–µ–Ω–∏—Ç—å:**
```bash
source ~/.bashrc

# –¢–µ–ø–µ—Ä—å –∏–∑ –ª—é–±–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:
telethon-rebuild  # –ü–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å
telethon-logs     # –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏
telethon-cd       # –ü–µ—Ä–µ–π—Ç–∏ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
```

## üîÑ Development Cycle

### –¢–∏–ø–∏—á–Ω—ã–π —Ü–∏–∫–ª —Å Docker

```bash
# 0. –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û: –ò–∑—É—á–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é —á–µ—Ä–µ–∑ Context7
# ‚Üí Context7: "Feature name best practices"
# ‚Üí Context7: "Library name API documentation"

# 1. –í–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
vim telethon/qr_auth_manager.py

# 2. –ü–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å
telethon-rebuild

# 3. –°–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏
telethon-logs

# 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ API/–±–æ—Ç–∞
curl http://localhost:8010/docs

# 5. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤–æ–π—Ç–∏ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
telethon-shell

# 6. –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Ü–∏–∫–ª
```

### Context7 Workflow (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û)

**–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –ª—é–±–æ–π –∑–∞–¥–∞—á–∏:**

```bash
# 1. –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—é/–±–∏–±–ª–∏–æ—Ç–µ–∫—É
# Telegram Bot API, FastAPI, SQLAlchemy, Qdrant, etc.

# 2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Context7 –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è
Context7: "Technology name best practices"
Context7: "Technology name current API version"
Context7: "Technology name common patterns"

# 3. –ù–∞–π–¥–∏—Ç–µ –ø—Ä–∏–º–µ—Ä—ã
Context7: "Technology name example code"
Context7: "Technology name async patterns"  # –¥–ª—è async code

# 4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å
# –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤–µ—Ä—Å–∏—è –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –≤–∞—à–µ–π

# 5. –¢–û–õ–¨–ö–û –ü–û–¢–û–ú –ø–∏—à–∏—Ç–µ –∫–æ–¥
```

**–ü—Ä–∏–º–µ—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∑–∞–¥–∞—á:**

```bash
# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ Telegram Mini App
‚Üí Context7: "Telegram Mini Apps API documentation"
‚Üí Context7: "Telegram WebAppInfo best practices"
‚Üí Context7: "Telegram Mini Apps dark theme support"

# –†–∞–±–æ—Ç–∞ —Å FastAPI
‚Üí Context7: "FastAPI background tasks async"
‚Üí Context7: "FastAPI dependency injection patterns"
‚Üí Context7: "FastAPI middleware CORS configuration"

# SQLAlchemy –º–æ–¥–µ–ª–∏
‚Üí Context7: "SQLAlchemy relationships many-to-many"
‚Üí Context7: "SQLAlchemy timezone aware datetime PostgreSQL"
‚Üí Context7: "SQLAlchemy async queries best practices"

# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Qdrant
‚Üí Context7: "Qdrant Python client async examples"
‚Üí Context7: "Qdrant vector search filters"
‚Üí Context7: "Qdrant batch operations performance"
```

### –õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ (–±–µ–∑ Docker)

**–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:** –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è, –Ω–µ—Ç –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∏

```bash
# –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ (–æ–¥–∏–Ω —Ä–∞–∑)
telethon-cd
./scripts/utils/dev.sh setup

# –°–æ–∑–¥–∞—Å—Ç:
# - venv/
# - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç dependencies
# - –°–∫–æ–ø–∏—Ä—É–µ—Ç .env

# –ó–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω–æ
./scripts/utils/dev.sh local

# –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ Ctrl+C –∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
```

## üß™ Testing

### –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–µ—Å—Ç–æ–≤

```
tests/
‚îú‚îÄ‚îÄ test_models.py              # SQLAlchemy –º–æ–¥–µ–ª–∏
‚îú‚îÄ‚îÄ test_many_to_many.py        # Relationships
‚îú‚îÄ‚îÄ test_retention_system.py    # Cleanup service
‚îú‚îÄ‚îÄ test_qr_auth.py             # QR Login
‚îú‚îÄ‚îÄ test_admin_panel.py         # Admin API
‚îú‚îÄ‚îÄ test_rag_pipeline.py        # RAG integration
‚îú‚îÄ‚îÄ test_evaluation_schemas.py  # Evaluation data models
‚îú‚îÄ‚îÄ test_golden_dataset_manager.py  # Dataset management
‚îú‚îÄ‚îÄ test_bot_evaluator.py       # LLM evaluation logic
‚îî‚îÄ‚îÄ test_evaluation_runner.py   # Batch evaluation orchestration
```

### –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤

```bash
# –í—Å–µ —Ç–µ—Å—Ç—ã
telethon-test

# –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ñ–∞–π–ª
pytest tests/test_qr_auth.py -v

# –° coverage
pytest tests/ --cov=. --cov-report=html

# –¢–æ–ª—å–∫–æ –±—ã—Å—Ç—Ä—ã–µ
pytest -m "not slow" tests/

# Evaluation —Ç–µ—Å—Ç—ã
pytest tests/test_evaluation_*.py -v

# –° coverage –¥–ª—è evaluation
pytest tests/test_evaluation_*.py --cov=evaluation --cov-report=html
```

### –ü—Ä–∏–º–µ—Ä —Ç–µ—Å—Ç–∞

```python
# tests/test_qr_auth.py
import pytest
from unittest.mock import AsyncMock, patch
from datetime import datetime, timezone

@pytest.mark.asyncio
async def test_qr_session_creation():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è QR session"""
    # Mock Redis
    with patch('redis.Redis') as mock_redis:
        mock_redis_instance = mock_redis.return_value
        mock_redis_instance.setex.return_value = True
        
        # Create session
        session_id = await qr_auth_manager.create_qr_session(
            telegram_id=123,
            invite_code="ABC123"
        )
        
        # Verify
        assert session_id is not None
        assert len(session_id) == 36  # UUID format
        
        # Verify Redis call
        mock_redis_instance.setex.assert_called_once()
        call_args = mock_redis_instance.setex.call_args
        assert call_args[0][1] == 600  # TTL 10 –º–∏–Ω—É—Ç

@pytest.mark.asyncio
async def test_qr_session_expiry():
    """–¢–µ—Å—Ç –∏—Å—Ç–µ—á–µ–Ω–∏—è QR session"""
    # Setup expired session
    session_id = "test-session-123"
    redis_client.setex(
        f"qr_session:{session_id}",
        1,  # 1 —Å–µ–∫—É–Ω–¥–∞
        json.dumps({"status": "waiting"})
    )
    
    # Wait for expiry
    await asyncio.sleep(2)
    
    # Verify
    session = await qr_auth_manager.get_qr_session(session_id)
    assert session is None  # Expired
```

### –ü—Ä–∏–º–µ—Ä —Ç–µ—Å—Ç–∞ –¥–ª—è Evaluation —Å–∏—Å—Ç–µ–º—ã

```python
# tests/test_evaluation_schemas.py
import pytest
from datetime import datetime, timezone
from evaluation.schemas import GoldenDatasetItem, TelegramContext, ContextType, DifficultyLevel, ToneType

def test_golden_dataset_item_creation():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è GoldenDatasetItem"""
    # Arrange
    telegram_context = TelegramContext(
        user_id=12345,
        channels=["automotive_news"],
        context_type=ContextType.SINGLE_CHANNEL
    )
    
    # Act
    item = GoldenDatasetItem(
        item_id="test_001",
        dataset_name="test_dataset",
        category="automotive",
        input={"message_text": "Test query"},
        query="Test query",
        telegram_context=telegram_context,
        expected_output="Expected response",
        difficulty=DifficultyLevel.BEGINNER,
        tone=ToneType.TECHNICAL,
        requires_multi_source=False
    )
    
    # Assert
    assert item.item_id == "test_001"
    assert item.telegram_context.user_id == 12345
    assert item.difficulty == DifficultyLevel.BEGINNER
    assert item.tone == ToneType.TECHNICAL
    assert item.created_at.tzinfo is not None  # timezone-aware

@pytest.mark.asyncio
async def test_golden_dataset_manager_crud():
    """–¢–µ—Å—Ç CRUD –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è GoldenDatasetManager"""
    from evaluation.golden_dataset_manager import GoldenDatasetManager
    from unittest.mock import AsyncMock
    
    # Mock asyncpg pool
    mock_pool = AsyncMock()
    mock_conn = AsyncMock()
    mock_pool.acquire.return_value.__aenter__.return_value = mock_conn
    
    manager = GoldenDatasetManager(mock_pool)
    
    # Test add_item
    item = GoldenDatasetItem(
        item_id="test_001",
        dataset_name="test_dataset",
        category="automotive",
        input={"message_text": "Test"},
        query="Test query",
        telegram_context=TelegramContext(
            user_id=12345,
            channels=["test_channel"],
            context_type=ContextType.SINGLE_CHANNEL
        ),
        expected_output="Test response"
    )
    
    await manager.add_item(item)
    
    # Verify database call
    mock_conn.execute.assert_called_once()
    
    # Test get_dataset_stats
    mock_conn.fetchrow.return_value = {"total": 10, "categories": {"automotive": 5}}
    stats = await manager.get_dataset_stats("test_dataset")
    
    assert stats["total"] == 10
    assert stats["categories"]["automotive"] == 5

@pytest.mark.asyncio
async def test_bot_evaluator_metrics():
    """–¢–µ—Å—Ç BotEvaluator —Å –º–æ–∫–∏—Ä–æ–≤–∞–Ω–∏–µ–º Ragas"""
    from evaluation.bot_evaluator import BotEvaluator
    from unittest.mock import AsyncMock, patch
    
    # Mock LLM
    mock_llm = AsyncMock()
    
    # Mock Ragas metrics
    with patch('evaluation.bot_evaluator.RAGAS_AVAILABLE', True):
        with patch('evaluation.bot_evaluator.AnswerCorrectness') as mock_metric:
            evaluator = BotEvaluator(
                model_provider="openrouter",
                model_name="gpt-4o-mini",
                evaluator_llm=mock_llm
            )
            
            # Test evaluation
            mock_metric.return_value.ascore.return_value = 0.85
            
            result = await evaluator.evaluate_item(
                item_id="test_001",
                query="Test query",
                context=["Test context"],
                response="Test response",
                reference_answer="Reference answer"
            )
            
            assert result["overall_score"] == 0.85
            assert "answer_correctness" in result["scores"]
```

## üìù Linting & Formatting

### Ruff (–ª–∏–Ω—Ç–µ—Ä)

```bash
# –ü—Ä–æ–≤–µ—Ä–∫–∞
ruff check .

# –ê–≤—Ç–æ—Ñ–∏–∫—Å
ruff check . --fix

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤ pyproject.toml:
[tool.ruff]
line-length = 100
target-version = "py311"
```

### Type Checking

```bash
# mypy
mypy telethon/ --ignore-missing-imports

# pyright
pyright telethon/
```

## üìä Monitoring Logs

### Docker Logs

```bash
# –ü–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å—Ç—Ä–æ–∫
docker logs telethon --tail 50
docker logs telethon-bot --tail 50

# Live –ª–æ–≥–∏
docker logs -f telethon

# –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –º–∏–Ω—É—Ç
docker logs --since 10m telethon

# –ü–æ–∏—Å–∫ –≤ –ª–æ–≥–∞—Ö
docker logs telethon 2>&1 | grep "ERROR"
docker logs telethon 2>&1 | grep "QRAuthManager"
```

### –¢–∏–ø–∏—á–Ω—ã–µ –ª–æ–≥–∏ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π —Ä–∞–±–æ—Ç–µ

```
‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞
‚úÖ FastAPI –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://0.0.0.0:8010
‚úÖ Parser Service –∑–∞–ø—É—â–µ–Ω (–∏–Ω—Ç–µ—Ä–≤–∞–ª: 30 –º–∏–Ω—É—Ç)
‚úÖ Cleanup Service –∑–∞–ø—É—â–µ–Ω (–æ—á–∏—Å—Ç–∫–∞ –≤ 03:00)
‚úÖ Telegram Bot –∑–∞–ø—É—â–µ–Ω
‚úÖ QRAuthManager –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ Redis
üîÑ ParserService: –ü–∞—Ä—Å–∏–Ω–≥ 1 –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...
‚úÖ ParserService: @channel_name - –¥–æ–±–∞–≤–ª–µ–Ω–æ 2 –ø–æ—Å—Ç–æ–≤
üè∑Ô∏è TaggingService: –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É 2 –ø–æ—Å—Ç–æ–≤
‚úÖ TaggingService: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ 5 —Ç–µ–≥–æ–≤
```

## üêõ Debugging

### –í–æ–π—Ç–∏ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä

```bash
# Bash –≤ telethon
telethon-shell

# Python REPL
docker exec -it telethon python

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ë–î
docker exec -it supabase-db psql -U postgres -d postgres

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis
docker exec -it redis redis-cli
```

### Debug —Ä–µ–∂–∏–º

```python
# main.py
import logging

# DEBUG –ª–æ–≥–∏
logging.basicConfig(level=logging.DEBUG)

# SQLAlchemy queries
engine = create_engine(
    database_url,
    echo=True  # –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç SQL –∑–∞–ø—Ä–æ—Å—ã
)
```

## üîÑ Git Workflow

### Branch Strategy

```bash
# Feature branch
git checkout -b feature/qr-login-improvements

# Bug fix
git checkout -b fix/timezone-handling

# Documentation
git checkout -b docs/update-admin-guide
```

### Commit Messages

```bash
# ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ - –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–µ –∫–æ–º–º–∏—Ç—ã
git commit -m "feat(qr-auth): Add QR session expiry check"
git commit -m "fix(parser): Handle timezone-aware datetime"
git commit -m "docs(admin): Update Admin Panel quickstart"
git commit -m "test(rag): Add RAG pipeline integration test"

# ‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ
git commit -m "fix"
git commit -m "updated code"
git commit -m "changes"
```

### Pre-commit Checks

```bash
# –ü–µ—Ä–µ–¥ –∫–æ–º–º–∏—Ç–æ–º:

# 1. –õ–∏–Ω—Ç–µ—Ä
ruff check .

# 2. –¢–µ—Å—Ç—ã
pytest tests/ -v

# 3. Type check
mypy telethon/

# 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –Ω–µ—Ç —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
git diff --cached | grep -i "password\|secret\|token"
```

## ‚úÖ Verification Steps

1. **dev.sh —Ä–∞–±–æ—Ç–∞–µ—Ç:**
```bash
./scripts/utils/dev.sh help
# –î–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑–∞—Ç—å help message
```

2. **Docker rebuild —É—Å–ø–µ—à–µ–Ω:**
```bash
telethon-rebuild
docker ps | grep telethon
# –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã
```

3. **–¢–µ—Å—Ç—ã –ø—Ä–æ—Ö–æ–¥—è—Ç:**
```bash
telethon-test
# All tests passed
```

4. **–õ–æ–≥–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –æ—à–∏–±–æ–∫:**
```bash
telethon-logs | grep ERROR
# –ü—É—Å—Ç–æ–π output
```

5. **–õ–∏–Ω—Ç–µ—Ä —á–∏—Å—Ç—ã–π:**
```bash
ruff check .
# All checks passed
```

## üö® Troubleshooting

### –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –Ω–µ –∑–∞–ø—É—Å–∫–∞—é—Ç—Å—è

```bash
# –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å
docker ps -a | grep telethon

# –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—à–∏–±–∫–∏
docker logs telethon
docker logs telethon-bot

# –ü–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å —Å –Ω—É–ª—è
telethon-stop
docker rm telethon telethon-bot
telethon-rebuild
```

### –ò–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è

```bash
# –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—Å–æ–±–∏—Ä–∞–π—Ç–µ!
telethon-rebuild  # –ù–µ –ø—Ä–æ—Å—Ç–æ restart!

# –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ volumes —Å–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω—ã
docker inspect telethon | grep -A 10 Mounts
```

### –¢–µ—Å—Ç—ã –ø–∞–¥–∞—é—Ç

```bash
# –ü—Ä–æ–≤–µ—Ä—å—Ç–µ environment
pytest tests/ -v -s  # -s –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç print

# –ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç
pytest tests/test_qr_auth.py::test_qr_session_creation -v

# Debug mode
pytest tests/ --pdb  # –û—Ç–∫—Ä–æ–µ—Ç debugger –Ω–∞ –æ—à–∏–±–∫–µ
```

## üìö –°–≤—è–∑–∞–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞

- `01-core.mdc` ‚Äî –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞
- `02-architecture.mdc` ‚Äî Docker setup
- `08-api.mdc` ‚Äî API testing
