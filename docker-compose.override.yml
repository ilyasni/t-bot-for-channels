services:
  telethon:
    env_file:
      - ./telethon/.env
    build:
      context: ./telethon
      dockerfile: Dockerfile.telethon
    container_name: telethon

    ports:
      - "8010:8010"
      - "8001:8001"
    volumes:
      # Монтируем сессии Telegram для сохранения аутентификации
      - ./telethon/sessions:/app/sessions
      # Монтируем базу данных для сохранения данных
      - ./telethon/data:/app/data
      # Монтируем логи
      - ./telethon/logs:/app/logs
      # Монтируем .env файл
      - ./telethon/.env:/app/.env
    environment:
      # Переменные окружения (будут переопределены из .env файла)
      - HOST=0.0.0.0
      - PORT=8010
      - PARSER_INTERVAL_MINUTES=30
      # База данных - по умолчанию SQLite, можно переопределить на PostgreSQL
      - DATABASE_URL=${TELEGRAM_DATABASE_URL:-sqlite:///./data/telethon_bot.db}
      # Telegram Bot Token
      - BOT_TOKEN=${BOT_TOKEN}
      # Ключ шифрования (общий для всего проекта)
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      # Система хранения постов
      - DEFAULT_RETENTION_DAYS=${DEFAULT_RETENTION_DAYS:-30}
      - CLEANUP_SCHEDULE_TIME=${CLEANUP_SCHEDULE_TIME:-03:00}
      # Часовой пояс
      - TZ=Europe/Moscow
    restart: unless-stopped
    networks:
      - localai_default

  telethon-bot:
    env_file:
      - ./telethon/.env
    build:
      context: ./telethon
      dockerfile: Dockerfile.telethon
    container_name: telethon-bot
    command: ["python", "bot_standalone.py"]
    volumes:
      # Монтируем сессии Telegram для сохранения аутентификации
      - ./telethon/sessions:/app/sessions
      # Монтируем базу данных для сохранения данных
      - ./telethon/data:/app/data
      # Монтируем логи
      - ./telethon/logs:/app/logs
      # Монтируем .env файл
      - ./telethon/.env:/app/.env
    environment:
      # База данных - по умолчанию SQLite, можно переопределить на PostgreSQL
      - DATABASE_URL=${TELEGRAM_DATABASE_URL:-sqlite:///./data/telethon_bot.db}
      # Telegram Bot Token
      - BOT_TOKEN=${BOT_TOKEN}
      # Ключ шифрования (общий для всего проекта)
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
    restart: unless-stopped
    networks:
      - localai_default

  gpt2giga-proxy:
    build:
      context: ./gpt2giga
      dockerfile: Dockerfile.gpt2giga
    container_name: gpt2giga-proxy
    ports:
      - "8090:8090"
    environment:
      # GigaChat API credentials (get from Sber)
      - GIGACHAT_CREDENTIALS=${GIGACHAT_CREDENTIALS}
      - PROXY_HOST=0.0.0.0
    restart: unless-stopped
    networks:
      - localai_default

networks:
  localai_default:
    external: true
