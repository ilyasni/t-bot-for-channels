"""
–°–µ—Ä–≤–∏—Å –æ—á–∏—Å—Ç–∫–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –ø–æ—Å—Ç–æ–≤

–≠—Ç–æ—Ç —Å–µ—Ä–≤–∏—Å —É–¥–∞–ª—è–µ—Ç –ø–æ—Å—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã—Ö–æ–¥—è—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –ø–µ—Ä–∏–æ–¥–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è (retention_days)
–¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–µ—Ä–∏–æ–¥ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –æ—Ç –¥–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞
–≤ –∫–∞–∂–¥–æ–º –∫–∞–Ω–∞–ª–µ.

–õ–æ–≥–∏–∫–∞:
- –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –Ω–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç
- –£–¥–∞–ª—è–µ–º –ø–æ—Å—Ç—ã —Å—Ç–∞—Ä—à–µ (last_post_date - retention_days)
- –ü—Ä–∏–º–µ—Ä: –µ—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ—Å—Ç –æ—Ç 2025-10-10 –∏ retention_days=30,
  —É–¥–∞–ª—è–µ–º –ø–æ—Å—Ç—ã –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –¥–æ 2025-09-10
"""

import logging
from datetime import datetime, timezone, timedelta
from sqlalchemy import func
from sqlalchemy.orm import Session
from database import SessionLocal
from models import User, Channel, Post

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class CleanupService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –ø–æ—Å—Ç–æ–≤"""
    
    def __init__(self):
        self.min_retention_days = 1  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥ —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–ª—è –∑–∞—â–∏—Ç—ã
        self.max_retention_days = 3650  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥ (10 –ª–µ—Ç)
    
    async def cleanup_old_posts(self) -> dict:
        """
        –£–¥–∞–ª–µ–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        
        Returns:
            dict: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–∏—Å—Ç–∫–∏
        """
        db = SessionLocal()
        
        try:
            logger.info("üßπ –ó–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –ø–æ—Å—Ç–æ–≤...")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users = db.query(User).filter(User.is_active == True).all()
            
            if not users:
                logger.info("üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—á–∏—Å—Ç–∫–∏")
                return {
                    "status": "success",
                    "users_processed": 0,
                    "total_posts_deleted": 0,
                    "message": "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
                }
            
            total_users_processed = 0
            total_posts_deleted = 0
            user_stats = []
            
            for user in users:
                try:
                    user_result = await self.cleanup_user_posts(user, db)
                    total_users_processed += 1
                    total_posts_deleted += user_result["posts_deleted"]
                    
                    if user_result["posts_deleted"] > 0:
                        user_stats.append({
                            "user_id": user.id,
                            "telegram_id": user.telegram_id,
                            "retention_days": user.retention_days,
                            "posts_deleted": user_result["posts_deleted"],
                            "channels_processed": user_result["channels_processed"]
                        })
                        logger.info(
                            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.telegram_id}: —É–¥–∞–ª–µ–Ω–æ {user_result['posts_deleted']} –ø–æ—Å—Ç–æ–≤ "
                            f"–∏–∑ {user_result['channels_processed']} –∫–∞–Ω–∞–ª–æ–≤"
                        )
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}: {str(e)}")
                    continue
            
            logger.info(
                f"‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users_processed}, "
                f"—É–¥–∞–ª–µ–Ω–æ –ø–æ—Å—Ç–æ–≤: {total_posts_deleted}"
            )
            
            return {
                "status": "success",
                "users_processed": total_users_processed,
                "total_posts_deleted": total_posts_deleted,
                "user_stats": user_stats,
                "timestamp": datetime.now(timezone.utc).isoformat()
            }
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {str(e)}")
            return {
                "status": "error",
                "error": str(e),
                "timestamp": datetime.now(timezone.utc).isoformat()
            }
        finally:
            db.close()
    
    async def cleanup_user_posts(self, user: User, db: Session) -> dict:
        """
        –£–¥–∞–ª–µ–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user: –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            
        Returns:
            dict: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º retention_days
            retention_days = user.retention_days or 30
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–µ—Ä–∏–æ–¥–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è
            if retention_days < self.min_retention_days:
                logger.warning(
                    f"‚ö†Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.telegram_id}: retention_days={retention_days} –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º—É–º–∞. "
                    f"–ò—Å–ø–æ–ª—å–∑—É–µ–º {self.min_retention_days}"
                )
                retention_days = self.min_retention_days
            
            if retention_days > self.max_retention_days:
                logger.warning(
                    f"‚ö†Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.telegram_id}: retention_days={retention_days} –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º—É–º–∞. "
                    f"–ò—Å–ø–æ–ª—å–∑—É–µ–º {self.max_retention_days}"
                )
                retention_days = self.max_retention_days
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞–Ω–∞–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤–∫–ª—é—á–∞—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ)
            channels_with_info = user.get_all_channels(db)
            
            if not channels_with_info:
                return {
                    "posts_deleted": 0,
                    "channels_processed": 0
                }
            
            total_posts_deleted = 0
            channels_processed = 0
            
            for channel, sub_info in channels_with_info:
                try:
                    posts_deleted = await self.cleanup_channel_posts(
                        channel, user, retention_days, db
                    )
                    total_posts_deleted += posts_deleted
                    channels_processed += 1
                    
                    if posts_deleted > 0:
                        logger.debug(
                            f"  üìä –ö–∞–Ω–∞–ª @{channel.channel_username}: —É–¥–∞–ª–µ–Ω–æ {posts_deleted} –ø–æ—Å—Ç–æ–≤"
                        )
                    
                except Exception as e:
                    logger.error(
                        f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–∞–Ω–∞–ª–∞ @{channel.channel_username}: {str(e)}"
                    )
                    continue
            
            return {
                "posts_deleted": total_posts_deleted,
                "channels_processed": channels_processed
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–æ—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}: {str(e)}")
            raise
    
    async def cleanup_channel_posts(
        self, channel: Channel, user, retention_days: int, db: Session
    ) -> int:
        """
        –£–¥–∞–ª–µ–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            channel: –û–±—ä–µ–∫—Ç –∫–∞–Ω–∞–ª–∞
            user: –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            retention_days: –ü–µ—Ä–∏–æ–¥ —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –¥–Ω—è—Ö
            db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            
        Returns:
            int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
        """
        try:
            # –ù–∞—Ö–æ–¥–∏–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            last_post = db.query(func.max(Post.posted_at)).filter(
                Post.channel_id == channel.id,
                Post.user_id == user.id
            ).scalar()
            
            if not last_post:
                # –ù–µ—Ç –ø–æ—Å—Ç–æ–≤ –≤ –∫–∞–Ω–∞–ª–µ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                return 0
            
            # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ last_post –∏–º–µ–µ—Ç timezone
            if last_post.tzinfo is None:
                last_post = last_post.replace(tzinfo=timezone.utc)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É –æ—Ç—Å–µ—á–µ–Ω–∏—è: last_post_date - retention_days
            cutoff_date = last_post - timedelta(days=retention_days)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç—ã —Å—Ç–∞—Ä—à–µ cutoff_date –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            old_posts = db.query(Post).filter(
                Post.channel_id == channel.id,
                Post.user_id == user.id,
                Post.posted_at < cutoff_date
            ).all()
            
            posts_count = len(old_posts)
            
            if posts_count > 0:
                logger.debug(
                    f"  üóëÔ∏è  –ö–∞–Ω–∞–ª @{channel.channel_username}: "
                    f"–ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ—Å—Ç {last_post.isoformat()}, "
                    f"—É–¥–∞–ª—è–µ–º –ø–æ—Å—Ç—ã –¥–æ {cutoff_date.isoformat()}, "
                    f"–Ω–∞–π–¥–µ–Ω–æ –ø–æ—Å—Ç–æ–≤: {posts_count}"
                )
                
                # –£–¥–∞–ª—è–µ–º –ø–æ—Å—Ç—ã
                for post in old_posts:
                    db.delete(post)
                
                db.commit()
            
            return posts_count
            
        except Exception as e:
            db.rollback()
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤ –∫–∞–Ω–∞–ª–∞ {channel.id}: {str(e)}")
            raise
    
    async def cleanup_user_posts_immediately(self, user_id: int) -> dict:
        """
        –ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ retention_days
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            dict: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–∏—Å—Ç–∫–∏
        """
        db = SessionLocal()
        
        try:
            user = db.query(User).filter(User.id == user_id).first()
            
            if not user:
                return {
                    "status": "error",
                    "error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
                }
            
            result = await self.cleanup_user_posts(user, db)
            
            return {
                "status": "success",
                "user_id": user.id,
                "telegram_id": user.telegram_id,
                "retention_days": user.retention_days,
                "posts_deleted": result["posts_deleted"],
                "channels_processed": result["channels_processed"],
                "timestamp": datetime.now(timezone.utc).isoformat()
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(e)}")
            return {
                "status": "error",
                "error": str(e),
                "timestamp": datetime.now(timezone.utc).isoformat()
            }
        finally:
            db.close()


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
cleanup_service = CleanupService()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ—á–∏—Å—Ç–∫–∏ (–¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö)
async def run_cleanup():
    """–ó–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –ø–æ—Å—Ç–æ–≤"""
    return await cleanup_service.cleanup_old_posts()


if __name__ == "__main__":
    import asyncio
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏
    async def test_cleanup():
        result = await cleanup_service.cleanup_old_posts()
        print("\n" + "=" * 60)
        print("–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—á–∏—Å—Ç–∫–∏:")
        print("=" * 60)
        for key, value in result.items():
            print(f"{key}: {value}")
        print("=" * 60)
    
    asyncio.run(test_cleanup())

