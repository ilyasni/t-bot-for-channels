from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler, 
    ContextTypes, filters, PicklePersistence
)
from sqlalchemy.orm import Session
from database import get_db, SessionLocal
from models import User, Channel, Post, user_group
from auth import create_auth_session, get_auth_url, check_user_auth_status, logout_user
from datetime import datetime, timedelta, timezone
from typing import List, Dict, Optional
import re
import os
import time
import logging
import httpx
import asyncio
from dotenv import load_dotenv

# –ò–º–ø–æ—Ä—Ç—ã –Ω–æ–≤—ã—Ö –º–æ–¥—É–ª–µ–π
from bot_login_handlers_qr import get_login_conversation_handler, subscription_command
from bot_admin_handlers import (
    admin_invite_command, admin_users_command, admin_user_command,
    admin_grant_command, admin_stats_command, get_admin_callback_handler,
    admin_panel_command
)
from bot_debug_commands import (
    debug_test_phone_command, debug_check_sessions_command, debug_force_auth_command,
    debug_reset_auth_command, debug_delete_user_command
)
from voice_transcription_service import voice_transcription_service
from subscription_config import SUBSCRIPTION_TIERS

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

load_dotenv()

# DEBUG –ª–æ–≥–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (—É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è)
# –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ DEBUG_LOGS=true –≤ .env –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –ª–æ–≥–æ–≤
if os.getenv('DEBUG_LOGS', 'false').lower() == 'true':
    logger.info("üêõ DEBUG –ª–æ–≥–∏ –≤–∫–ª—é—á–µ–Ω—ã (telegram.ext, ConversationHandler, httpx)")
    logging.getLogger('telegram.ext.ConversationHandler').setLevel(logging.DEBUG)
    logging.getLogger('telegram.ext').setLevel(logging.DEBUG)
    logging.getLogger('telethon').setLevel(logging.DEBUG)
    logging.getLogger('httpx').setLevel(logging.DEBUG)
else:
    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Ç–æ–ª—å–∫–æ WARNING –¥–ª—è –±–∏–±–ª–∏–æ—Ç–µ–∫
    logging.getLogger('telegram.ext').setLevel(logging.WARNING)
    logging.getLogger('telethon').setLevel(logging.WARNING)
    logging.getLogger('httpx').setLevel(logging.WARNING)

BOT_TOKEN = os.getenv("BOT_TOKEN")

class TelegramBot:
    def __init__(self):
        # –°–æ–∑–¥–∞–µ–º persistence –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
        persistence = PicklePersistence(filepath='data/bot_persistence.pkl')
        
        # –°–æ–∑–¥–∞–µ–º application —Å persistence
        self.application = (
            Application.builder()
            .token(BOT_TOKEN)
            .persistence(persistence)
            .build()
        )
        self.setup_handlers()
        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.user_states = {}
        # –¢–∞–π–º–∞—É—Ç –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π (30 –º–∏–Ω—É—Ç)
        self.state_timeout = 30 * 60  # 30 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        
        logger.info("‚úÖ TelegramBot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å Persistence –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ updates")
    
    def _cleanup_expired_states(self):
        """–û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        current_time = time.time()
        expired_users = []
        
        for user_id, state in self.user_states.items():
            if isinstance(state, dict) and 'timestamp' in state:
                if current_time - state['timestamp'] > self.state_timeout:
                    expired_users.append(user_id)
        
        for user_id in expired_users:
            del self.user_states[user_id]
        
        if expired_users:
            logger.info(f"üßπ –û—á–∏—â–µ–Ω–æ {len(expired_users)} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π")
    
    async def _process_auth_code(self, user, code: str, update: Update = None):
        """–û–±—â–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–¥–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        db = SessionLocal()
        
        try:
            db_user = db.query(User).filter(User.telegram_id == user.id).first()
            if not db_user:
                message = "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
                if update:
                    await update.message.reply_text(message)
                return
            
            if db_user.is_authenticated:
                message = "‚úÖ –í—ã —É–∂–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã!"
                if update:
                    await update.message.reply_text(message)
                return
            
            # –ö–æ–¥ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            result = False  # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
            
            if result:
                message = (
                    "‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!\n"
                    "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞.\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add_channel –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤."
                )
                if update:
                    await update.message.reply_text(message)
                # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if user.id in self.user_states:
                    del self.user_states[user.id]
            else:
                message = (
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ —Å /auth"
                )
                if update:
                    await update.message.reply_text(message)
            
        except Exception as e:
            message = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
            if update:
                await update.message.reply_text(message)
        finally:
            db.close()
    
    async def _call_rag_service(self, endpoint: str, method: str = "POST", **kwargs) -> Optional[Dict]:
        """
        –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–∑–æ–≤–∞ RAG service
        
        Args:
            endpoint: Endpoint RAG service (–Ω–∞–ø—Ä–∏–º–µ—Ä, "/rag/query")
            method: HTTP –º–µ—Ç–æ–¥ (GET, POST, PUT)
            **kwargs: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ (–¥–ª—è POST/PUT - json, –¥–ª—è GET - params)
            
        Returns:
            Dict —Å –æ—Ç–≤–µ—Ç–æ–º –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        rag_url = os.getenv("RAG_SERVICE_URL", "http://rag-service:8020")
        rag_enabled = os.getenv("RAG_SERVICE_ENABLED", "true").lower() == "true"
        
        if not rag_enabled:
            logger.warning("RAG service –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return None
        
        try:
            async with httpx.AsyncClient(timeout=30.0) as client:
                method_upper = method.upper()
                
                if method_upper == "GET":
                    response = await client.get(
                        f"{rag_url}{endpoint}",
                        params=kwargs
                    )
                elif method_upper == "PUT":
                    response = await client.put(
                        f"{rag_url}{endpoint}",
                        json=kwargs
                    )
                else:  # POST
                    response = await client.post(
                        f"{rag_url}{endpoint}",
                        json=kwargs
                    )
                
                if response.status_code == 200:
                    return response.json()
                else:
                    logger.error(f"RAG service error {response.status_code}: {response.text[:200]}")
                    return None
                    
        except httpx.TimeoutException:
            logger.error(f"RAG service timeout: {endpoint}")
            return None
        except httpx.ConnectError:
            logger.error(f"RAG service –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {endpoint}")
            return None
        except Exception as e:
            logger.error(f"RAG service error: {e}")
            return None
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        logger.info("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥...")
        
        # ‚úÖ –ù–û–í–û–ï: ConversationHandler –¥–ª—è /login (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–≤—ã–º!)
        self.application.add_handler(get_login_conversation_handler())
        logger.info("  ‚úÖ ConversationHandler –¥–ª—è /login –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("auth", self.auth_command))
        self.application.add_handler(CommandHandler("auth_status", self.auth_status_command))
        self.application.add_handler(CommandHandler("logout", self.logout_command))
        self.application.add_handler(CommandHandler("clear_auth", self.clear_auth_command))
        self.application.add_handler(CommandHandler("reset_auth", self.reset_auth_command))
        self.application.add_handler(CommandHandler("add_channel", self.add_channel_command))
        self.application.add_handler(CommandHandler("my_channels", self.my_channels_command))
        self.application.add_handler(CommandHandler("remove_channel", self.remove_channel_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        
        # ‚úÖ –ù–û–í–û–ï: –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –≥—Ä—É–ø–ø
        self.application.add_handler(CommandHandler("add_group", self.add_group_command))
        self.application.add_handler(CommandHandler("my_groups", self.my_groups_command))
        self.application.add_handler(CommandHandler("group_digest", self.group_digest_command))
        self.application.add_handler(CommandHandler("group_settings", self.group_settings_command))
        logger.info("  ‚úÖ –ö–æ–º–∞–Ω–¥—ã –≥—Ä—É–ø–ø –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        
        # ‚úÖ –ù–û–í–û–ï: –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥–ø–∏—Å–∫–∏
        self.application.add_handler(CommandHandler("subscription", subscription_command))
        
        # ‚úÖ –ù–û–í–û–ï: –ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("admin", admin_panel_command))  # Mini App –ø–∞–Ω–µ–ª—å
        self.application.add_handler(CommandHandler("admin_invite", admin_invite_command))
        self.application.add_handler(CommandHandler("admin_users", admin_users_command))
        self.application.add_handler(CommandHandler("admin_user", admin_user_command))
        self.application.add_handler(CommandHandler("admin_grant", admin_grant_command))
        self.application.add_handler(CommandHandler("admin_stats", admin_stats_command))
        
        # ‚úÖ –ù–û–í–û–ï: Debug –∫–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("debug_status", self.debug_status_command))
        self.application.add_handler(CommandHandler("debug_unblock", self.debug_unblock_command))
        self.application.add_handler(CommandHandler("debug_reset", self.debug_reset_command))
        self.application.add_handler(CommandHandler("debug_test_phone", debug_test_phone_command))
        self.application.add_handler(CommandHandler("debug_check_sessions", debug_check_sessions_command))
        self.application.add_handler(CommandHandler("debug_force_auth", debug_force_auth_command))
        self.application.add_handler(CommandHandler("debug_reset_auth", debug_reset_auth_command))
        self.application.add_handler(CommandHandler("debug_delete_user", debug_delete_user_command))
        
        # ‚úÖ –ù–û–í–û–ï: Debug –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≥—Ä—É–ø–ø
        from bot_group_debug import debug_group_digest_command, debug_n8n_test_command
        self.application.add_handler(CommandHandler("debug_group_digest", debug_group_digest_command))
        self.application.add_handler(CommandHandler("debug_n8n", debug_n8n_test_command))
        logger.info("  ‚úÖ –ê–¥–º–∏–Ω –∏ Debug –∫–æ–º–∞–Ω–¥—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        
        # RAG –∫–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("ask", self.ask_command))
        self.application.add_handler(CommandHandler("search", self.search_command))
        self.application.add_handler(CommandHandler("recommend", self.recommend_command))
        self.application.add_handler(CommandHandler("digest", self.digest_command))
        
        # Callback handlers
        self.application.add_handler(get_admin_callback_handler())  # ‚úÖ –ù–û–í–û–ï: –ê–¥–º–∏–Ω callbacks
        self.application.add_handler(CallbackQueryHandler(self.button_callback))
        
        # ‚úÖ –ù–û–í–û–ï: –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è /ask –∏ /search (Premium)
        self.application.add_handler(MessageHandler(
            filters.VOICE & ~filters.COMMAND,
            self.handle_voice_command
        ))
        logger.info("  ‚úÖ Handler –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
        
        # –ö–æ–º–∞–Ω–¥–∞ —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
        self.application.add_handler(CommandHandler("reset", self.reset_command))
        
        # –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º!)
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text))
        
        logger.info("‚úÖ –í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã (–≤–∫–ª—é—á–∞—è –≥–æ–ª–æ—Å–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ Persistence)")
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º last_command —á—Ç–æ–±—ã –≥–æ–ª–æ—Å–æ–≤—ã–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ AI –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä
        context.user_data.pop('last_command', None)
        
        user = update.effective_user
        db = SessionLocal()
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            db_user = db.query(User).filter(User.telegram_id == user.id).first()
            
            if not db_user:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                db_user = User(
                    telegram_id=user.id,
                    username=user.username,
                    first_name=user.first_name,
                    last_name=user.last_name
                )
                db.add(db_user)
                db.commit()
                db.refresh(db_user)
                
                welcome_text = f"""
ü§ñ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Telegram Channel Parser Bot!**

–Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø–æ—Å—Ç—ã –∏–∑ –≤–∞—à–∏—Ö –ª—é–±–∏–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –∏ –∏—Å–∫–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å –ø–æ–º–æ—â—å—é AI.

üé´ **–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω—É–∂–µ–Ω –∏–Ω–≤–∞–π—Ç –∫–æ–¥**

–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω–≤–∞–π—Ç –∫–æ–¥–∞, –∑–∞—Ç–µ–º:

üì± **–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è (QR –∫–æ–¥ - –ë–ï–ó SMS!):**
/login INVITE_CODE

**–ü—Ä–∏–º–µ—Ä:**
`/login ABC123XYZ`

‚ú® **–ü—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:**
1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ /login —Å –≤–∞—à–∏–º –∫–æ–¥–æ–º
2Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üîê –û—Ç–∫—Ä—ã—Ç—å QR –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é"
3Ô∏è‚É£ –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR –∫–æ–¥ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Å—ã–ª–∫—É
4Ô∏è‚É£ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤ Telegram
5Ô∏è‚É£ –ì–æ—Ç–æ–≤–æ! ‚úÖ

üìã **–ü–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã:**
‚Ä¢ /add_channel - –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
‚Ä¢ /my_channels - –°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∫–∞–Ω–∞–ª–æ–≤
‚Ä¢ /ask - –ü–æ–∏—Å–∫ –æ—Ç–≤–µ—Ç–∞ –≤ –ø–æ—Å—Ç–∞—Ö (RAG)
‚Ä¢ /subscription - –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏ –ª–∏–º–∏—Ç—ã
‚Ä¢ /help - –ü–æ–ª–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞

‚ö° **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:**
‚Ä¢ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞ 30 —Å–µ–∫—É–Ω–¥ (–ë–ï–ó SMS –∫–æ–¥–æ–≤!)
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥ –∫–∞–Ω–∞–ª–æ–≤ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
‚Ä¢ AI –ø–æ–∏—Å–∫ –ø–æ –ø–æ—Å—Ç–∞–º
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–π–¥–∂–µ—Å—Ç—ã

ü§ñ RAG & AI –∫–æ–º–∞–Ω–¥—ã:
‚Ä¢ /ask - –ü–æ–∏—Å–∫ –æ—Ç–≤–µ—Ç–∞ –≤ –ø–æ—Å—Ç–∞—Ö
‚Ä¢ /search - –ì–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–∏—Å–∫
‚Ä¢ /recommend - –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
‚Ä¢ /digest - AI-–¥–∞–π–¥–∂–µ—Å—Ç—ã

/help - –ü–æ–ª–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞
                """
            else:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                is_admin = db_user.is_admin()
                role_badge = "üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" if is_admin else "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                
                if db_user.is_authenticated:
                    # –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—Å–µ—Ö
                    base_commands = f"""
üìã **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏:**
/add_channel - –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª
/my_channels - –í–∞—à–∏ –∫–∞–Ω–∞–ª—ã ({len(db_user.channels)}/{db_user.max_channels})

ü§ñ **RAG & AI:**
/ask <–≤–æ–ø—Ä–æ—Å> - –ü–æ–∏—Å–∫ –æ—Ç–≤–µ—Ç–∞ –≤ –ø–æ—Å—Ç–∞—Ö
/search <–∑–∞–ø—Ä–æ—Å> - –ì–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–∏—Å–∫
/recommend - –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
/digest - AI-–¥–∞–π–¥–∂–µ—Å—Ç—ã

üíé **–ü–æ–¥–ø–∏—Å–∫–∞:**
/subscription - –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ ({db_user.subscription_type})
"""
                    
                    # –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
                    admin_commands = """
üëë **–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:**
/admin - –û—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å (—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏)
/admin_invite - –°–æ–∑–¥–∞—Ç—å –∏–Ω–≤–∞–π—Ç –∫–æ–¥
/admin_stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
/admin_users - –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
/admin_grant - –í—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞–ø—Ä—è–º—É—é
""" if is_admin else ""
                    
                    welcome_text = f"""
ü§ñ **–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user.first_name}!** {role_badge}

‚úÖ –°—Ç–∞—Ç—É—Å: –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
üíé –ü–æ–¥–ø–∏—Å–∫–∞: {db_user.subscription_type}

{base_commands}
{admin_commands}
/help - –ü–æ–ª–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞
                    """
                else:
                    welcome_text = f"""
ü§ñ **–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user.first_name}!** {role_badge}

‚ö†Ô∏è **–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è:**

üì± **–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ QR –∫–æ–¥ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è):**
/login INVITE_CODE

**–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± (—Å–≤–æ–∏ API –∫–ª—é—á–∏):**
/auth - –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ –≤–µ–±-—Ñ–æ—Ä–º—É
/auth_status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å

üí° –ò–Ω–≤–∞–π—Ç –∫–æ–¥ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                    """
            
            await update.message.reply_text(welcome_text)
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        finally:
            db.close()
    
    async def auth_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /auth - –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
        user = update.effective_user
        db = SessionLocal()
        
        try:
            db_user = db.query(User).filter(User.telegram_id == user.id).first()
            if not db_user:
                await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
                return
            
            if db_user.is_authenticated:
                await update.message.reply_text("‚úÖ –í—ã —É–∂–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã!")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
            if db_user.is_blocked and db_user.block_expires and db_user.block_expires > datetime.now():
                await update.message.reply_text(
                    f"üö´ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–æ {db_user.block_expires.strftime('%d.%m.%Y %H:%M')}\n"
                    f"–ü—Ä–∏—á–∏–Ω–∞: –ø—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"
                )
                return
            
            # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            session_id = await create_auth_session(db_user)
            if not session_id:
                await update.message.reply_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.\n"
                    "–í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º URL –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            auth_url = await get_auth_url(session_id)
            if not auth_url:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
                return
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å —Å—Å—ã–ª–∫–æ–π
            keyboard = [[InlineKeyboardButton("üîê –û—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏", url=auth_url)]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                "üîê –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è\n\n"
                "–î–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–∞—â–∏—â–µ–Ω–Ω—É—é –≤–µ–±-—Ñ–æ—Ä–º—É:\n\n"
                "‚ö†Ô∏è **–í–ê–ñ–ù–û:** –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –≤–≤–æ–¥–∏—Ç–µ –∫–æ–¥—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ Telegram —á–∞—Ç!\n\n"
                "üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n"
                "1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ\n"
                "2. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ API –¥–∞–Ω–Ω—ã–µ\n"
                "3. –ü–æ–ª—É—á–∏—Ç–µ –∫–æ–¥ –≤ Telegram\n"
                "4. –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –≤ –≤–µ–±-—Ñ–æ—Ä–º–µ\n\n"
                "üîó –°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 10 –º–∏–Ω—É—Ç",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        finally:
            db.close()
    
    async def auth_code_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /auth_code - –û–¢–ö–õ–Æ–ß–ï–ù–ê –ø–æ —Å–æ–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        await update.message.reply_text(
            "üö´ **–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –ø–æ —Å–æ–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏**\n\n"
            "‚ö†Ô∏è –í–≤–æ–¥ –∫–æ–¥–æ–≤ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ Telegram —á–∞—Ç –Ω–µ–±–µ–∑–æ–ø–∞—Å–µ–Ω!\n\n"
            "‚úÖ **–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Å–ø–æ—Å–æ–±:**\n"
            "1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /auth\n"
            "2. –û—Ç–∫—Ä–æ–π—Ç–µ –∑–∞—â–∏—â–µ–Ω–Ω—É—é –≤–µ–±-—Ñ–æ—Ä–º—É\n"
            "3. –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Ç–∞–º\n\n"
            "üîê –í–µ–±-—Ñ–æ—Ä–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç HTTPS —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ",
            parse_mode='Markdown'
        )
    
    async def auth_status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /auth_status - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        user = update.effective_user
        db = SessionLocal()
        
        try:
            db_user = db.query(User).filter(User.telegram_id == user.id).first()
            if not db_user:
                await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            if db_user.is_authenticated:
                status_text = f"""
‚úÖ –°—Ç–∞—Ç—É—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: –ê–£–¢–ï–ù–¢–ò–§–ò–¶–ò–†–û–í–ê–ù

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {db_user.first_name} {db_user.last_name or ''}
üÜî Telegram ID: {db_user.telegram_id}
üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {db_user.last_auth_check.strftime('%d.%m.%Y %H:%M') if db_user.last_auth_check else '–ù–µ –ø—Ä–æ–≤–æ–¥–∏–ª–∞—Å—å'}

–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞.
                """
            else:
                status_text = f"""
‚ùå –°—Ç–∞—Ç—É—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: –ù–ï –ê–£–¢–ï–ù–¢–ò–§–ò–¶–ò–†–û–í–ê–ù

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {db_user.first_name} {db_user.last_name or ''}
üÜî Telegram ID: {db_user.telegram_id}
üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {db_user.last_auth_check.strftime('%d.%m.%Y %H:%M') if db_user.last_auth_check else '–ù–µ –ø—Ä–æ–≤–æ–¥–∏–ª–∞—Å—å'}

–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π –ø—Ä–æ–π–¥–∏—Ç–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é: /auth
                """
                
                if db_user.auth_error:
                    status_text += f"\n‚ö†Ô∏è –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {db_user.auth_error}"
            
            await update.message.reply_text(status_text)
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        finally:
            db.close()
    
    async def logout_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /logout - –≤—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
        user = update.effective_user
        db = SessionLocal()
        
        try:
            db_user = db.query(User).filter(User.telegram_id == user.id).first()
            if not db_user:
                await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            if not db_user.is_authenticated:
                await update.message.reply_text("‚ùå –í—ã –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã")
                return
            
            # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Å–∏—Å—Ç–µ–º—ã (–æ–±–Ω–æ–≤–ª—è–µ—Ç user –æ–±—ä–µ–∫—Ç)
            await logout_user(db_user)
            
            # –í–ê–ñ–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ë–î
            db.commit()
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user.id in self.user_states:
                del self.user_states[user.id]
            
            await update.message.reply_text(
                "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.\n\n"
                "–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:\n"
                "‚Ä¢ `/login INVITE_CODE` - QR –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è\n"
                "‚Ä¢ `/auth` - –í–µ–±-—Ñ–æ—Ä–º–∞ (—Å–≤–æ–∏ API –∫–ª—é—á–∏)"
            )
            
        except Exception as e:
            db.rollback()
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            logger.error(f"Logout error: {e}", exc_info=True)
        finally:
            db.close()
    
    async def clear_auth_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /clear_auth - –ø–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        user = update.effective_user
        db = SessionLocal()
        
        try:
            db_user = db.query(User).filter(User.telegram_id == user.id).first()
            if not db_user:
                await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user.id in self.user_states:
                del self.user_states[user.id]
            
            # –ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            db_user.is_authenticated = False
            db_user.auth_error = None
            db_user.api_id = None
            db_user.api_hash = None
            db_user.phone_number = None
            db_user.auth_session_id = None
            db_user.auth_session_expires = None
            db_user.failed_auth_attempts = 0
            db_user.last_auth_attempt = None
            db_user.is_blocked = False
            db_user.block_expires = None
            db_user.last_auth_check = None
            db.commit()
            
            logger.info(f"üßπ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –æ—á–∏—Å—Ç–∏–ª –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
            
            await update.message.reply_text(
                "üßπ **–ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!**\n\n"
                "‚úÖ –£–¥–∞–ª–µ–Ω–æ:\n"
                "‚Ä¢ API –¥–∞–Ω–Ω—ã–µ (ID, Hash, —Ç–µ–ª–µ—Ñ–æ–Ω)\n"
                "‚Ä¢ –°–µ—Å—Å–∏–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏\n"
                "‚Ä¢ –°—á–µ—Ç—á–∏–∫–∏ –ø–æ–ø—ã—Ç–æ–∫\n"
                "‚Ä¢ –°—Ç–∞—Ç—É—Å—ã –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏\n\n"
                "üîÑ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /auth –¥–ª—è –Ω–æ–≤–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {str(e)}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        finally:
            db.close()
    
    async def reset_auth_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /reset_auth - –∞–ª–∏–∞—Å –¥–ª—è /clear_auth"""
        await self.clear_auth_command(update, context)
    
    async def add_channel_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞"""
        user = update.effective_user
        args = context.args
        
        if not args:
            await update.message.reply_text(
                "üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_channel @channel_name\n"
                "–ü—Ä–∏–º–µ—Ä: /add_channel @example_channel"
            )
            return
        
        channel_username = args[0].lstrip('@')
        db = SessionLocal()
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            db_user = db.query(User).filter(User.telegram_id == user.id).first()
            if not db_user:
                await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
            if not db_user.is_authenticated:
                await update.message.reply_text(
                    "‚ùå –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é.\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /auth"
                )
                return
            
            # ‚úÖ –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏
            if not db_user.can_add_channel():
                tier_name = db_user.subscription_type
                from subscription_config import get_subscription_info
                tier = get_subscription_info(tier_name)
                
                await update.message.reply_text(
                    f"‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ **{tier['name']}**: {db_user.max_channels}\n\n"
                    f"üíé –î–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É\n"
                    f"–¢–µ–∫—É—â–∞—è –ø–æ–¥–ø–∏—Å–∫–∞: /subscription",
                    parse_mode='Markdown'
                )
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª
            if db_user.channels:
                for channel in db_user.channels:
                    if channel.channel_username == channel_username:
                        await update.message.reply_text(f"‚ùå –ö–∞–Ω–∞–ª @{channel_username} —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à —Å–ø–∏—Å–æ–∫")
                        return
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∫–∞–Ω–∞–ª (–º–æ–∂–µ—Ç –±—ã—Ç—å —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –¥—Ä—É–≥–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏)
            channel = Channel.get_or_create(db, channel_username)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –∫–∞–Ω–∞–ª—É
            channel.add_user(db, db_user, is_active=True)
            db.commit()
            
            await update.message.reply_text(
                f"‚úÖ –ö–∞–Ω–∞–ª @{channel_username} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n"
                f"–¢–µ–ø–µ—Ä—å —è –±—É–¥—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã –∏–∑ —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞."
            )
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞: {str(e)}")
        finally:
            db.close()
    
    async def my_channels_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞–Ω–∞–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º last_command —á—Ç–æ–±—ã –≥–æ–ª–æ—Å–æ–≤—ã–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ AI –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä
        context.user_data.pop('last_command', None)
        
        user = update.effective_user
        db = SessionLocal()
        
        try:
            db_user = db.query(User).filter(User.telegram_id == user.id).first()
            if not db_user:
                await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
            if not db_user.is_authenticated:
                await update.message.reply_text(
                    "‚ùå –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞–Ω–∞–ª–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é.\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /auth"
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–¥–ø–∏—Å–∫–µ
            channels_with_info = db_user.get_all_channels(db)
            
            if not channels_with_info:
                await update.message.reply_text(
                    "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.\n"
                    "–î–æ–±–∞–≤—å—Ç–µ –∫–∞–Ω–∞–ª –∫–æ–º–∞–Ω–¥–æ–π /add_channel @channel_name"
                )
                return
            
            text = "üìã –í–∞—à–∏ –∫–∞–Ω–∞–ª—ã:\n\n"
            keyboard = []
            
            for i, (channel, sub_info) in enumerate(channels_with_info):
                status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if sub_info['is_active'] else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
                text += f"{i+1}. @{channel.channel_username} - {status}\n"
                
                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                keyboard.append([
                    InlineKeyboardButton(
                        f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å @{channel.channel_username}",
                        callback_data=f"remove_{channel.id}"
                    )
                ])
            
            text += "\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤"
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(text, reply_markup=reply_markup)
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        finally:
            db.close()
    
    async def remove_channel_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞"""
        await self.my_channels_command(update, context)
    
    async def add_group_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–î–æ–±–∞–≤–∏—Ç—å Telegram –≥—Ä—É–ø–ø—É –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        user = update.effective_user
        args = context.args
        
        db = SessionLocal()
        try:
            db_user = db.query(User).filter(User.telegram_id == user.id).first()
            if not db_user:
                await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /login")
                return
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            if not db_user.is_authenticated:
                await update.message.reply_text(
                    "‚ùå –í—ã –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /login –¥–ª—è QR-–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç
            from shared_auth_manager import shared_auth_manager
            client = await shared_auth_manager.get_user_client(user.id)
            
            if not client:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram")
                return
            
            # –ï—Å–ª–∏ –Ω–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø
            if not args:
                await update.message.reply_text("‚è≥ –ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –≥—Ä—É–ø–ø...")
                
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∏–∞–ª–æ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                from telethon.tl.types import Chat, Channel as TelegramChannel
                
                user_groups = []
                async for dialog in client.iter_dialogs(limit=100):
                    entity = dialog.entity
                    # –¢–æ–ª—å–∫–æ –≥—Ä—É–ø–ø—ã –∏ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã (–Ω–µ –∫–∞–Ω–∞–ª—ã, –Ω–µ –ª–∏—á–Ω—ã–µ —á–∞—Ç—ã)
                    if isinstance(entity, (Chat, TelegramChannel)):
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –≥—Ä—É–ø–ø–∞ (–Ω–µ –∫–∞–Ω–∞–ª)
                        if isinstance(entity, TelegramChannel) and not entity.broadcast:
                            # –°—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞
                            user_groups.append({
                                'id': entity.id,
                                'title': entity.title,
                                'username': getattr(entity, 'username', None)
                            })
                        elif isinstance(entity, Chat):
                            # –û–±—ã—á–Ω–∞—è –≥—Ä—É–ø–ø–∞
                            user_groups.append({
                                'id': entity.id,
                                'title': entity.title,
                                'username': None
                            })
                
                if not user_groups:
                    await update.message.reply_text(
                        "üì≠ –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–µ\n\n"
                        "–î–æ–±–∞–≤—å—Ç–µ –≥—Ä—É–ø–ø—É –ø–æ ID: `/add_group -1001234567890`"
                    )
                    return
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫
                text = f"üë• **–í–∞—à–∏ –≥—Ä—É–ø–ø—ã** ({len(user_groups)}):\n\n"
                text += "–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ ID –≥—Ä—É–ø–ø—ã:\n\n"
                
                for i, g in enumerate(user_groups[:20], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ 20
                    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã Markdown –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
                    safe_title = g['title'].replace('_', '\\_').replace('*', '\\*').replace('[', '\\[').replace('`', '\\`')
                    text += f"{i}. **{safe_title}**\n"
                    text += f"   `/add_group {g['id']}`\n\n"
                
                if len(user_groups) > 20:
                    text += f"... –∏ –µ—â–µ {len(user_groups) - 20} –≥—Ä—É–ø–ø\n\n"
                
                text += "üí° –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ"
                
                await update.message.reply_text(text, parse_mode='Markdown')
                return
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –≥—Ä—É–ø–ø
            if not db_user.can_add_group():
                from subscription_config import get_subscription_info
                current_tier = get_subscription_info(db_user.subscription_type)
                max_groups = current_tier.get('max_groups', 0)
                
                await update.message.reply_text(
                    f"‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≥—Ä—É–ø–ø ({max_groups})\n\n"
                    f"–¢–µ–∫—É—â–∞—è –ø–æ–¥–ø–∏—Å–∫–∞: {current_tier['name']}\n"
                    f"–î–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"
                )
                return
            
            # –ü–∞—Ä—Å–∏–º input (—Å—Å—ã–ª–∫–∞ –∏–ª–∏ ID)
            group_input = args[0]
            group_id = None
            group_entity = None
            
            # –ï—Å–ª–∏ —ç—Ç–æ —á–∏—Å–ª–æ - —ç—Ç–æ group_id
            if group_input.lstrip('-').isdigit():
                group_id = int(group_input)
                
                await update.message.reply_text("‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é –¥–æ—Å—Ç—É–ø –∫ –≥—Ä—É–ø–ø–µ...")
                
                # –ü–æ–ª—É—á–∞–µ–º entity
                try:
                    group_entity = await client.get_entity(group_id)
                except Exception as e:
                    # –í–æ–∑–º–æ–∂–Ω–æ –≥—Ä—É–ø–ø–∞ –ø—Ä–∏–≤–∞—Ç–Ω–∞—è - –∏—â–µ–º –≤ –¥–∏–∞–ª–æ–≥–∞—Ö
                    logger.info(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å entity –ø–æ ID {group_id}, –∏—â–µ–º –≤ –¥–∏–∞–ª–æ–≥–∞—Ö...")
                    
                    from telethon.tl.types import Chat, Channel as TelegramChannel
                    async for dialog in client.iter_dialogs(limit=200):
                        if dialog.entity.id == group_id:
                            group_entity = dialog.entity
                            break
                    
                    if not group_entity:
                        await update.message.reply_text(
                            f"‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞\n\n"
                            f"–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                            f"‚Ä¢ –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ\n"
                            f"‚Ä¢ ID –≥—Ä—É–ø–ø—ã –Ω–µ–≤–µ—Ä–Ω—ã–π\n\n"
                            f"üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/add_group` –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –≥—Ä—É–ø–ø"
                        )
                        return
            
            # –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
            elif 't.me/' in group_input or 'telegram.me/' in group_input:
                parts = group_input.rstrip('/').split('/')
                last_part = parts[-1]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–≤–∞—Ç–Ω–∞—è –ª–∏ –≥—Ä—É–ø–ø–∞ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å +)
                if last_part.startswith('+'):
                    # –ü—Ä–∏–≤–∞—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞ - –∏—â–µ–º –≤ –¥–∏–∞–ª–æ–≥–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    await update.message.reply_text(
                        "üîç –ü—Ä–∏–≤–∞—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞\n"
                        "–ò—â—É –≤ –≤–∞—à–∏—Ö –¥–∏–∞–ª–æ–≥–∞—Ö..."
                    )
                    
                    # Invite hash –¥–ª—è –ø–æ–∏—Å–∫–∞
                    invite_hash = last_part[1:]  # –£–±–∏—Ä–∞–µ–º +
                    
                    from telethon.tl.types import Chat, Channel as TelegramChannel
                    
                    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≥—Ä—É–ø–ø—ã –∏ –∏—â–µ–º
                    found_groups = []
                    async for dialog in client.iter_dialogs(limit=200):
                        entity = dialog.entity
                        if isinstance(entity, (Chat, TelegramChannel)):
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –≥—Ä—É–ø–ø–∞ (–Ω–µ –∫–∞–Ω–∞–ª)
                            if isinstance(entity, TelegramChannel) and not entity.broadcast:
                                found_groups.append(entity)
                            elif isinstance(entity, Chat):
                                found_groups.append(entity)
                    
                    if not found_groups:
                        await update.message.reply_text(
                            "üì≠ –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–µ\n\n"
                            "üí° –°–Ω–∞—á–∞–ª–∞ –≤—Å—Ç—É–ø–∏—Ç–µ –≤ –≥—Ä—É–ø–ø—É —á–µ—Ä–µ–∑ invite link –≤ Telegram,\n"
                            "–∑–∞—Ç–µ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/add_group` –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞"
                        )
                        return
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞
                    text = f"üë• **–ù–∞–π–¥–µ–Ω–æ –≥—Ä—É–ø–ø:** {len(found_groups)}\n\n"
                    text += "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –≥—Ä—É–ø–ø—É:\n\n"
                    
                    for i, g in enumerate(found_groups[:20], 1):
                        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã Markdown
                        safe_title = g.title.replace('_', '\\_').replace('*', '\\*').replace('[', '\\[').replace('`', '\\`')
                        text += f"{i}. **{safe_title}**\n"
                        text += f"   `/add_group {g.id}`\n\n"
                    
                    if len(found_groups) > 20:
                        text += f"... –∏ –µ—â–µ {len(found_groups) - 20} –≥—Ä—É–ø–ø\n\n"
                    
                    text += "üí° –ù–∞–π–¥–∏—Ç–µ –Ω—É–∂–Ω—É—é –≥—Ä—É–ø–ø—É –∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É"
                    
                    await update.message.reply_text(text, parse_mode='Markdown')
                    return
                
                elif last_part.lstrip('-').isdigit():
                    # ID –≤ —Å—Å—ã–ª–∫–µ
                    group_id = int(last_part)
                    group_entity = await client.get_entity(group_id)
                else:
                    # –ü—É–±–ª–∏—á–Ω—ã–π username
                    await update.message.reply_text("‚è≥ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ...")
                    try:
                        group_entity = await client.get_entity(last_part)
                        group_id = group_entity.id
                    except Exception as e:
                        await update.message.reply_text(
                            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≥—Ä—É–ø–ø—É: {str(e)}\n\n"
                            f"üí° –î–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –≥—Ä—É–ø–ø –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/add_group` –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"
                        )
                        return
            else:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏ –∏–ª–∏ ID")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ entity
            if not group_entity and group_id:
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å entity –ø–æ ID
                try:
                    group_entity = await client.get_entity(group_id)
                except Exception as e:
                    await update.message.reply_text(
                        f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ\n\n"
                        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/add_group` –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞"
                    )
                    return
            
            if not group_entity:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ")
                return
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            group_title = getattr(group_entity, 'title', 'Unknown')
            group_username = getattr(group_entity, 'username', None)
            final_group_id = group_entity.id
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –≥—Ä—É–ø–ø–∞
            from telethon.tl.types import Chat, Channel as TelegramChannel
            if isinstance(group_entity, TelegramChannel) and group_entity.broadcast:
                await update.message.reply_text(
                    "‚ùå –≠—Ç–æ –∫–∞–Ω–∞–ª, –Ω–µ –≥—Ä—É–ø–ø–∞\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add_channel –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤"
                )
                return
            
            # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—É –≤ –ë–î
            from models import Group
            group = Group.get_or_create(
                db, 
                group_id=final_group_id,
                group_title=group_title,
                group_username=group_username
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ª–∏ —É–∂–µ
            if db_user in group.users:
                safe_title = group_title.replace('_', '\\_').replace('*', '\\*').replace('[', '\\[').replace('`', '\\`')
                await update.message.reply_text(
                    f"‚ÑπÔ∏è –ì—Ä—É–ø–ø–∞ **{safe_title}** —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞\n\n"
                    f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /my_groups –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞",
                    parse_mode='Markdown'
                )
                return
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –≥—Ä—É–ø–ø–µ
            group.add_user(db, db_user, is_active=True, mentions_enabled=True)
            db.commit()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            from group_monitor_service import group_monitor_service
            await group_monitor_service.start_monitoring(user.id)
            
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã Markdown
            safe_title = group_title.replace('_', '\\_').replace('*', '\\*').replace('[', '\\[').replace('`', '\\`')
            
            await update.message.reply_text(
                f"‚úÖ –ì—Ä—É–ø–ø–∞ **{safe_title}** –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n"
                f"üîî –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω\n"
                f"üìä –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /group_digest –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—é–º–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤\n\n"
                f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏: /group_settings",
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ add_group: {e}", exc_info=True)
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞: {str(e)}\n\n"
                "üí° –î–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –≥—Ä—É–ø–ø:\n"
                "1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/add_group` –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤\n"
                "2. –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –∏–∑ —Å–ø–∏—Å–∫–∞\n"
                "3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É —Å ID"
            )
        finally:
            db.close()
    
    async def my_groups_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –≥—Ä—É–ø–ø"""
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º last_command —á—Ç–æ–±—ã –≥–æ–ª–æ—Å–æ–≤—ã–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ AI –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä
        context.user_data.pop('last_command', None)
        
        user = update.effective_user
        db = SessionLocal()
        
        try:
            db_user = db.query(User).filter(User.telegram_id == user.id).first()
            if not db_user:
                await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            from models import Group
            groups = db.query(Group).join(
                user_group,
                Group.id == user_group.c.group_id
            ).filter(
                user_group.c.user_id == db_user.id
            ).all()
            
            if not groups:
                await update.message.reply_text(
                    "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –≥—Ä—É–ø–ø\n\n"
                    "–î–æ–±–∞–≤—å—Ç–µ –≥—Ä—É–ø–ø—É: /add_group <—Å—Å—ã–ª–∫–∞>"
                )
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫
            from subscription_config import get_subscription_info
            tier = get_subscription_info(db_user.subscription_type)
            max_groups = tier.get('max_groups', 0)
            
            text = f"üìä **–í–∞—à–∏ –≥—Ä—É–ø–ø—ã** ({len(groups)}/{max_groups}):\n\n"
            
            for i, group in enumerate(groups, 1):
                # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã
                subscription = db.execute(
                    user_group.select().where(
                        (user_group.c.user_id == db_user.id) &
                        (user_group.c.group_id == group.id)
                    )
                ).fetchone()
                
                status = "üü¢" if subscription.is_active else "üî¥"
                mentions = "üîî" if subscription.mentions_enabled else "üîï"
                
                # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã Markdown –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
                display_name = group.group_title or str(group.group_id)
                safe_name = display_name.replace('_', '\\_').replace('*', '\\*').replace('[', '\\[').replace('`', '\\`')
                
                text += f"{i}. {status} **{safe_name}**\n"
                text += f"   {mentions} –£–ø–æ–º–∏–Ω–∞–Ω–∏—è | ID: `{group.group_id}`\n"
            
            text += f"\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /group_settings –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"
            
            await update.message.reply_text(text, parse_mode='Markdown')
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        finally:
            db.close()
    
    async def group_digest_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –≤ –≥—Ä—É–ø–ø–µ"""
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º last_command —á—Ç–æ–±—ã –≥–æ–ª–æ—Å–æ–≤—ã–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ AI –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä
        context.user_data.pop('last_command', None)
        
        user = update.effective_user
        args = context.args
        
        db = SessionLocal()
        try:
            db_user = db.query(User).filter(User.telegram_id == user.id).first()
            if not db_user:
                await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            if not db_user.is_authenticated:
                await update.message.reply_text(
                    "‚ùå –í—ã –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /login –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            from models import Group
            groups = db.query(Group).join(
                user_group,
                Group.id == user_group.c.group_id
            ).filter(
                user_group.c.user_id == db_user.id,
                user_group.c.is_active == True
            ).all()
            
            if not groups:
                await update.message.reply_text(
                    "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä—É–ø–ø\n\n"
                    "–î–æ–±–∞–≤—å—Ç–µ –≥—Ä—É–ø–ø—É: /add_group <—Å—Å—ã–ª–∫–∞>"
                )
                return
            
            # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
            hours = 24
            target_group = None
            
            if len(args) == 1:
                # /group_digest 24
                if args[0].isdigit():
                    hours = int(args[0])
                else:
                    # /group_digest group_name - –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º
                    await update.message.reply_text(
                        "üí° –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤: `/group_digest 24`",
                        parse_mode='Markdown'
                    )
                    return
            elif len(args) == 2:
                # /group_digest group_name 24 - –±—É–¥—É—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è
                pass
            
            # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–¥–Ω–∞ –≥—Ä—É–ø–ø–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
            if len(groups) == 1:
                target_group = groups[0]
            else:
                # –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≥—Ä—É–ø–ø - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞
                text = "üìä –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –¥–∞–π–¥–∂–µ—Å—Ç–∞:\n\n"
                for i, group in enumerate(groups, 1):
                    display = group.group_title or str(group.group_id)
                    safe_display = display.replace('_', '\\_').replace('*', '\\*').replace('[', '\\[').replace('`', '\\`')
                    text += f"{i}. {safe_display}\n"
                text += f"\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/group_digest <–Ω–æ–º–µ—Ä> <—á–∞—Å—ã>`"
                
                await update.message.reply_text(text, parse_mode='Markdown')
                return
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–π–¥–∂–µ—Å—Ç
            safe_group_title = (target_group.group_title or str(target_group.group_id)).replace('_', '\\_').replace('*', '\\*').replace('[', '\\[').replace('`', '\\`')
            await update.message.reply_text(
                f"‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã **{safe_group_title}**...\n"
                f"–ü–µ—Ä–∏–æ–¥: {hours} —á–∞—Å–æ–≤\n\n"
                "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 20-30 —Å–µ–∫—É–Ω–¥ ‚è∞",
                parse_mode='Markdown'
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç
            from shared_auth_manager import shared_auth_manager
            client = await shared_auth_manager.get_user_client(user.id)
            
            if not client:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≥—Ä—É–ø–ø—ã
            from datetime import timedelta
            date_from = datetime.now(timezone.utc) - timedelta(hours=hours)
            
            logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –≥—Ä—É–ø–ø—ã {target_group.group_id}")
            logger.info(f"   –ü–µ—Ä–∏–æ–¥: —Å {date_from} –¥–æ {datetime.now(timezone.utc)}")
            logger.info(f"   –ß–∞—Å–æ–≤: {hours}")
            
            messages = []
            total_fetched = 0
            async for msg in client.iter_messages(
                target_group.group_id,
                limit=200,  # –õ–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
                offset_date=datetime.now(timezone.utc)
            ):
                total_fetched += 1
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º msg.date –≤ timezone-aware –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                msg_date = msg.date
                if msg_date.tzinfo is None:
                    msg_date = msg_date.replace(tzinfo=timezone.utc)
                else:
                    msg_date = msg_date.astimezone(timezone.utc)
                
                if msg_date < date_from:
                    break
                    
                if msg.text:  # –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                    messages.append(msg)
            
            logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_fetched} –≤—Å–µ–≥–æ, {len(messages)} —Å —Ç–µ–∫—Å—Ç–æ–º")
            
            if not messages:
                await update.message.reply_text(
                    f"üì≠ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {hours} —á–∞—Å–æ–≤ –≤ –≥—Ä—É–ø–ø–µ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π\n\n"
                    f"–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_fetched}"
                )
                return
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–π–¥–∂–µ—Å—Ç —á–µ—Ä–µ–∑ n8n workflow
            from group_digest_generator import group_digest_generator
            
            try:
                digest = await group_digest_generator.generate_digest(
                    user_id=db_user.id,
                    group_id=target_group.id,
                    messages=messages,
                    hours=hours
                )
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è Telegram
                formatted = group_digest_generator.format_digest_for_telegram(
                    digest=digest,
                    group_title=target_group.group_title or str(target_group.group_id)
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                await update.message.reply_text(formatted, parse_mode='Markdown')
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {e}")
                await update.message.reply_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {str(e)}\n\n"
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n"
                    "‚Ä¢ n8n workflows –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –∏ –∞–∫—Ç–∏–≤–Ω—ã\n"
                    "‚Ä¢ gpt2giga-proxy –¥–æ—Å—Ç—É–ø–µ–Ω"
                )
                
        finally:
            db.close()
    
    async def group_settings_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –≥—Ä—É–ø–ø"""
        user = update.effective_user
        db = SessionLocal()
        
        try:
            db_user = db.query(User).filter(User.telegram_id == user.id).first()
            if not db_user:
                await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            from models import GroupSettings
            settings = db.query(GroupSettings).filter(
                GroupSettings.user_id == db_user.id
            ).first()
            
            if not settings:
                # –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                settings = GroupSettings(
                    user_id=db_user.id,
                    mentions_enabled=True,
                    mention_context_messages=5,
                    digest_default_hours=24,
                    digest_max_messages=200
                )
                db.add(settings)
                db.commit()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            text = "‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø:**\n\n"
            text += f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É–ø–æ–º–∏–Ω–∞–Ω–∏—è—Ö: {'‚úÖ –í–∫–ª—é—á–µ–Ω—ã' if settings.mentions_enabled else '‚ùå –í—ã–∫–ª—é—á–µ–Ω—ã'}\n"
            text += f"üì® –ö–æ–Ω—Ç–µ–∫—Å—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏–π: {settings.mention_context_messages} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
            text += f"‚è∞ –ü–µ—Ä–∏–æ–¥ –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {settings.digest_default_hours} —á–∞—Å–æ–≤\n"
            text += f"üìä –ú–∞–∫—Å. —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {settings.digest_max_messages}\n\n"
            text += "üí° –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            text += "‚Ä¢ `/group_settings mentions on|off` - –≤–∫–ª/–≤—ã–∫–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
            text += "‚Ä¢ `/group_settings context <N>` - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞\n"
            text += "‚Ä¢ `/group_settings digest_hours <N>` - –ø–µ—Ä–∏–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
            args = context.args
            if args:
                setting = args[0].lower()
                
                if setting == "mentions" and len(args) > 1:
                    value = args[1].lower() in ['on', 'true', '1', 'yes']
                    settings.mentions_enabled = value
                    db.commit()
                    text = f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É–ø–æ–º–∏–Ω–∞–Ω–∏—è—Ö: {'–≤–∫–ª—é—á–µ–Ω—ã' if value else '–≤—ã–∫–ª—é—á–µ–Ω—ã'}"
                    
                elif setting == "context" and len(args) > 1 and args[1].isdigit():
                    value = int(args[1])
                    if 1 <= value <= 20:
                        settings.mention_context_messages = value
                        db.commit()
                        text = f"‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {value} —Å–æ–æ–±—â–µ–Ω–∏–π"
                    else:
                        text = "‚ùå –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 20 —Å–æ–æ–±—â–µ–Ω–∏–π"
                
                elif setting == "digest_hours" and len(args) > 1 and args[1].isdigit():
                    value = int(args[1])
                    if 1 <= value <= 168:  # –ú–∞–∫—Å–∏–º—É–º –Ω–µ–¥–µ–ª—è
                        settings.digest_default_hours = value
                        db.commit()
                        text = f"‚úÖ –ü–µ—Ä–∏–æ–¥ –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {value} —á–∞—Å–æ–≤"
                    else:
                        text = "‚ùå –ü–µ—Ä–∏–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 168 —á–∞—Å–æ–≤ (–Ω–µ–¥–µ–ª—è)"
            
            await update.message.reply_text(text, parse_mode='Markdown')
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        finally:
            db.close()
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        user = query.from_user
        
        logger.info(f"üîò –ü–æ–ª—É—á–µ–Ω callback –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {query.data}")
        
        await query.answer()
        
        if query.data.startswith("remove_"):
            logger.info(f"  ‚Üí –û–±—Ä–∞–±–æ—Ç–∫–∞ remove_channel: {query.data}")
            channel_id = int(query.data.split("_")[1])
            await self.remove_channel_by_id(query, channel_id)
        elif query.data.startswith("voice_ask:"):
            logger.info(f"  ‚Üí –û–±—Ä–∞–±–æ—Ç–∫–∞ voice_ask callback")
            await self.handle_voice_ask_callback(query, context)
        elif query.data.startswith("voice_search:"):
            logger.info(f"  ‚Üí –û–±—Ä–∞–±–æ—Ç–∫–∞ voice_search callback")
            await self.handle_voice_search_callback(query, context)
        elif query.data.startswith("digest_"):
            logger.info(f"  ‚Üí –û–±—Ä–∞–±–æ—Ç–∫–∞ digest callback: {query.data}")
            await self.handle_digest_callback(query, context)
        elif query.data.startswith("search_"):
            logger.info(f"  ‚Üí –û–±—Ä–∞–±–æ—Ç–∫–∞ search callback: {query.data}")
            await self.handle_search_callback(query, context)
        else:
            logger.warning(f"  ‚Üí –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback: {query.data}")
    
    async def remove_channel_by_id(self, query, channel_id: int):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ (–æ—Ç–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç –∫–∞–Ω–∞–ª–∞)"""
        user = query.from_user
        db = SessionLocal()
        
        try:
            db_user = db.query(User).filter(User.telegram_id == user.id).first()
            if not db_user:
                await query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª
            channel = db.query(Channel).filter(Channel.id == channel_id).first()
            
            if not channel:
                await query.edit_message_text("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª
            if channel not in db_user.channels:
                await query.edit_message_text("‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª")
                return
            
            channel_username = channel.channel_username
            
            # –û—Ç–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç –∫–∞–Ω–∞–ª–∞
            channel.remove_user(db, db_user)
            db.commit()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –µ—â–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ —É –∫–∞–Ω–∞–ª–∞
            if not channel.users:
                # –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–¥–ø–∏—Å—á–∏–∫, —É–¥–∞–ª—è–µ–º –∫–∞–Ω–∞–ª
                db.delete(channel)
                db.commit()
                await query.edit_message_text(
                    f"‚úÖ –ö–∞–Ω–∞–ª @{channel_username} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!\n"
                    f"(–ë–æ–ª—å—à–µ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –Ω–∞ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª)"
                )
            else:
                await query.edit_message_text(f"‚úÖ –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –∫–∞–Ω–∞–ª–∞ @{channel_username}!")
            
        except Exception as e:
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {str(e)}")
        finally:
            db.close()
    
    async def handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user = update.effective_user
        text = update.message.text
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ —Ä–µ–∂–∏–º–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
        if text in ["ü§ñ AI —Ä–µ–∂–∏–º", "üí° Ask —Ä–µ–∂–∏–º", "üîç Search —Ä–µ–∂–∏–º"]:
            if text == "ü§ñ AI —Ä–µ–∂–∏–º":
                context.user_data['voice_mode'] = 'ai'
                context.user_data.pop('last_command', None)
                context.user_data.pop('last_command_time', None)
                await update.message.reply_text(
                    "‚úÖ –†–µ–∂–∏–º: ü§ñ **AI –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä**\n\n"
                    "–ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å—Å—è –∫–∞–∫ /ask –∏–ª–∏ /search",
                    reply_markup=self.get_voice_mode_keyboard()
                )
            elif text == "üí° Ask —Ä–µ–∂–∏–º":
                context.user_data['voice_mode'] = 'ask'
                context.user_data['last_command'] = '/ask'
                context.user_data['last_command_time'] = datetime.now(timezone.utc)
                await update.message.reply_text(
                    "‚úÖ –†–µ–∂–∏–º: üí° **Ask**\n\n"
                    "–í—Å–µ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –∫–∞–∫ /ask",
                    reply_markup=self.get_voice_mode_keyboard()
                )
            elif text == "üîç Search —Ä–µ–∂–∏–º":
                context.user_data['voice_mode'] = 'search'
                context.user_data['last_command'] = '/search'
                context.user_data['last_command_time'] = datetime.now(timezone.utc)
                await update.message.reply_text(
                    "‚úÖ –†–µ–∂–∏–º: üîç **Search**\n\n"
                    "–í—Å–µ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –∫–∞–∫ /search",
                    reply_markup=self.get_voice_mode_keyboard()
                )
            return
        
        # –û—á–∏—â–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self._cleanup_expired_states()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user.id in self.user_states:
            state = self.user_states[user.id]
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–º –¥–ª—è –¥–∞–π–¥–∂–µ—Å—Ç–∞
            if state.get('action') == 'digest_topics_input':
                # –ü–∞—Ä—Å–∏–º —Ç–µ–º—ã
                topics = [topic.strip() for topic in text.split(',') if topic.strip()]
                
                if not topics:
                    await update.message.reply_text("‚ùå –¢–µ–º—ã –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                    return
                
                db = SessionLocal()
                try:
                    db_user = db.query(User).filter(User.telegram_id == user.id).first()
                    if not db_user:
                        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                        return
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                    result = await self._call_rag_service(
                        f"/rag/digest/settings/{db_user.id}",
                        method="GET"
                    )
                    
                    if result:
                        settings = result  # API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å –Ω–æ–≤—ã–º–∏ —Ç–µ–º–∞–º–∏
                        update_result = await self._call_rag_service(
                            f"/rag/digest/settings/{db_user.id}",
                            method="PUT",
                            enabled=settings.get("enabled", True),
                            frequency=settings.get("frequency", "daily"),
                            time=settings.get("time", "09:00"),
                            ai_summarize=settings.get("ai_summarize", False),
                            summary_style=settings.get("summary_style", "concise"),
                            preferred_topics=topics
                        )
                        
                        if update_result:
                            await update.message.reply_text(
                                f"‚úÖ –¢–µ–º—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {', '.join(topics)}\n\n"
                                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /digest –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫."
                            )
                        else:
                            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–º")
                    
                    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    del self.user_states[user.id]
                    
                finally:
                    db.close()
                
                return
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—ã—Ç–∞–µ—Ç—Å—è –≤–≤–µ—Å—Ç–∏ –∫–æ–¥ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ —á–∞—Ç
        if text.isdigit() and len(text) == 5:
            await update.message.reply_text(
                "üö´ **–ù–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ!**\n\n"
                "‚ö†Ô∏è –ù–µ –≤–≤–æ–¥–∏—Ç–µ –∫–æ–¥—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ Telegram —á–∞—Ç!\n\n"
                "‚úÖ **–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Å–ø–æ—Å–æ–±:**\n"
                "1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /auth\n"
                "2. –û—Ç–∫—Ä–æ–π—Ç–µ –≤–µ–±-—Ñ–æ—Ä–º—É –ø–æ —Å—Å—ã–ª–∫–µ\n"
                "3. –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Ç–∞–º\n\n"
                "üîê –í–µ–±-—Ñ–æ—Ä–º–∞ –∑–∞—â–∏—â–µ–Ω–∞ HTTPS —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ–º",
                parse_mode='Markdown'
            )
            return
        
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å @, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª
        if text.startswith('@'):
            await update.message.reply_text(
                f"üí° –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª {text} –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è?\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: /add_channel {text}"
            )
        else:
            await update.message.reply_text(
                "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "/auth - –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è\n"
                "/add_channel - –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª\n"
                "/my_channels - –í–∞—à–∏ –∫–∞–Ω–∞–ª—ã\n"
                "/ask - –ü–æ–∏—Å–∫ –æ—Ç–≤–µ—Ç–∞ –≤ –ø–æ—Å—Ç–∞—Ö (RAG)\n"
                "/search - –ì–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–∏—Å–∫\n"
                "/help - –°–ø—Ä–∞–≤–∫–∞\n\n"
                "‚ö†Ô∏è –î–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-—Ñ–æ—Ä–º—É –∏–∑ –∫–æ–º–∞–Ω–¥—ã /auth"
            )
    
    async def ask_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /ask - RAG-–ø–æ–∏—Å–∫ –æ—Ç–≤–µ—Ç–∞ –≤ –ø–æ—Å—Ç–∞—Ö"""
        user = update.effective_user
        args = context.args
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—Å —Ç–∞–π–º—Å—Ç–∞–º–ø–æ–º)
        context.user_data['last_command'] = '/ask'
        context.user_data['last_command_time'] = datetime.now(timezone.utc)
        
        if not args:
            await update.message.reply_text(
                "üí° **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** `/ask <–≤–∞—à –≤–æ–ø—Ä–æ—Å>`\n\n"
                "**–ü—Ä–∏–º–µ—Ä—ã:**\n"
                "‚Ä¢ `/ask –ß—Ç–æ –ø–∏—Å–∞–ª–∏ –ø—Ä–æ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ?`\n"
                "‚Ä¢ `/ask –ö–∞–∫–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø—Ä–æ Tesla?`\n"
                "‚Ä¢ `/ask –†–∞—Å—Å–∫–∞–∂–∏ –æ –±–ª–æ–∫—á–µ–π–Ω —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö`\n\n"
                "üé§ **–ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥ (Premium/Enterprise):**\n"
                "1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É `/ask`\n"
                "2Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º\n"
                "   ‚Üí –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è –ø–æ–∏—Å–∫!\n\n"
                "üí° **–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞:**\n"
                "‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ –ë–ï–ó –∫–æ–º–∞–Ω–¥—ã\n"
                "‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"üí° /ask\"",
                parse_mode='Markdown'
            )
            return
        
        query_text = " ".join(args)
        db = SessionLocal()
        
        try:
            db_user = db.query(User).filter(User.telegram_id == user.id).first()
            if not db_user:
                await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
                return
            
            if not db_user.is_authenticated:
                await update.message.reply_text(
                    "‚ùå –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è RAG-–ø–æ–∏—Å–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é.\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /auth"
                )
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ—Å—Ç–æ–≤
            posts_count = db.query(Post).filter(Post.user_id == db_user.id).count()
            if posts_count == 0:
                await update.message.reply_text(
                    "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ—Å—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n\n"
                    "üí° –î–æ–±–∞–≤—å—Ç–µ –∫–∞–Ω–∞–ª—ã –∫–æ–º–∞–Ω–¥–æ–π `/add_channel @channel_name`\n"
                    "–ü–∞—Ä—Å–∏–Ω–≥ –Ω–∞—á–Ω–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.",
                    parse_mode='Markdown'
                )
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º "–ø–µ—á–∞—Ç–∞–µ—Ç..." –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
            await update.message.chat.send_action(action="typing")
            
            # –í—ã–∑–æ–≤ RAG service
            result = await self._call_rag_service(
                "/rag/query",
                user_id=db_user.id,
                query=query_text,
                top_k=5,
                min_score=0.7
            )
            
            if not result:
                await update.message.reply_text(
                    "‚ùå RAG-—Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n\n"
                    "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                )
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
            if "error" in result:
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {result['error']}")
                return
            
            answer = result.get("answer", "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç")
            sources = result.get("sources", [])
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response_text = f"üí° **–û—Ç–≤–µ—Ç:**\n\n{answer}\n\n"
            
            if sources:
                response_text += "üìö **–ò—Å—Ç–æ—á–Ω–∏–∫–∏:**\n"
                for i, source in enumerate(sources[:5], 1):
                    channel = source.get("channel", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª")
                    url = source.get("url", "#")
                    score = source.get("score", 0) * 100
                    response_text += f"{i}. [{channel}]({url}) (—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {score:.0f}%)\n"
            else:
                response_text += "\nüí° –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å."
            
            await update.message.reply_text(
                response_text,
                parse_mode='Markdown',
                disable_web_page_preview=True
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /ask: {e}")
            await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        finally:
            db.close()
    
    async def recommend_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /recommend - –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
        user = update.effective_user
        db = SessionLocal()
        
        try:
            db_user = db.query(User).filter(User.telegram_id == user.id).first()
            if not db_user:
                await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
                return
            
            if not db_user.is_authenticated:
                await update.message.reply_text(
                    "‚ùå –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é.\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /auth"
                )
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º "–ø–µ—á–∞—Ç–∞–µ—Ç..." –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
            await update.message.chat.send_action(action="typing")
            
            # –í—ã–∑–æ–≤ RAG service
            result = await self._call_rag_service(
                f"/rag/recommend/{db_user.id}",
                method="GET",
                limit=5
            )
            
            if not result:
                await update.message.reply_text(
                    "‚ùå –°–µ—Ä–≤–∏—Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n\n"
                    "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
                return
            
            recommendations = result.get("recommendations", [])
            
            if not recommendations:
                await update.message.reply_text(
                    "üí° **–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π**\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/ask` –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.\n"
                    "–°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã –∏ –Ω–∞—á–Ω–µ—Ç –¥–∞–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.\n\n"
                    "**–ü—Ä–∏–º–µ—Ä:**\n"
                    "‚Ä¢ `/ask –ß—Ç–æ –Ω–æ–≤–æ–≥–æ –≤ AI?`\n"
                    "‚Ä¢ `/ask –†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –±–ª–æ–∫—á–µ–π–Ω`",
                    parse_mode='Markdown'
                )
                return
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response_text = "üéØ **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –≤–∞—Å:**\n\n"
            
            for i, rec in enumerate(recommendations, 1):
                channel = rec.get("channel", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª")
                title = rec.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
                url = rec.get("url", "#")
                score = rec.get("score", 0) * 100
                
                # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π title
                if len(title) > 100:
                    title = title[:97] + "..."
                
                response_text += f"{i}. **[{channel}]({url})**\n"
                response_text += f"   {title}\n"
                response_text += f"   –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {score:.0f}%\n\n"
            
            response_text += "üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ –≤–∞—à–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤"
            
            await update.message.reply_text(
                response_text,
                parse_mode='Markdown',
                disable_web_page_preview=True
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /recommend: {e}")
            await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        finally:
            db.close()
    
    async def search_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /search - –≥–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–∏—Å–∫ (–ø–æ—Å—Ç—ã + –≤–µ–±)"""
        user = update.effective_user
        args = context.args
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—Å —Ç–∞–π–º—Å—Ç–∞–º–ø–æ–º)
        context.user_data['last_command'] = '/search'
        context.user_data['last_command_time'] = datetime.now(timezone.utc)
        
        if not args:
            await update.message.reply_text(
                "üîç **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** `/search <–∑–∞–ø—Ä–æ—Å>`\n\n"
                "**–ü—Ä–∏–º–µ—Ä—ã:**\n"
                "‚Ä¢ `/search –∫–≤–∞–Ω—Ç–æ–≤—ã–µ –∫–æ–º–ø—å—é—Ç–µ—Ä—ã`\n"
                "‚Ä¢ `/search –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç`\n"
                "‚Ä¢ `/search –±–ª–æ–∫—á–µ–π–Ω —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏`\n\n"
                "–ü–æ–∏—Å–∫ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –≤ –≤–∞—à–∏—Ö –ø–æ—Å—Ç–∞—Ö + –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ —á–µ—Ä–µ–∑ Searxng\n\n"
                "üé§ **–ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥ (Premium/Enterprise):**\n"
                "1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É `/search`\n"
                "2Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º\n"
                "   ‚Üí –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è –ø–æ–∏—Å–∫!\n\n"
                "üí° **–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞:**\n"
                "‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ –ë–ï–ó –∫–æ–º–∞–Ω–¥—ã\n"
                "‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"üîç /search\"",
                parse_mode='Markdown'
            )
            return
        
        query_text = " ".join(args)
        db = SessionLocal()
        
        try:
            db_user = db.query(User).filter(User.telegram_id == user.id).first()
            if not db_user:
                await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
                return
            
            if not db_user.is_authenticated:
                await update.message.reply_text(
                    "‚ùå –î–ª—è –ø–æ–∏—Å–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é.\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /auth"
                )
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º "–ø–µ—á–∞—Ç–∞–µ—Ç..." –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
            await update.message.chat.send_action(action="typing")
            
            # –í—ã–∑–æ–≤ RAG service (hybrid search)
            result = await self._call_rag_service(
                "/rag/hybrid_search",
                user_id=db_user.id,
                query=query_text,
                include_web=True,
                include_posts=True,
                limit=5
            )
            
            if not result:
                await update.message.reply_text(
                    "‚ùå –°–µ—Ä–≤–∏—Å –ø–æ–∏—Å–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n\n"
                    "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
                return
            
            posts = result.get("posts", [])
            web_results = result.get("web", [])
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è callback
            self.user_states[user.id] = {
                'action': 'search_query',
                'query': query_text,
                'timestamp': time.time()
            }
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response_text = f"üîç **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:** {query_text}\n\n"
            
            if posts:
                response_text += f"üì± **–í–∞—à–∏ –ø–æ—Å—Ç—ã ({len(posts)}):**\n"
                for i, post in enumerate(posts[:3], 1):
                    channel = post.get("channel", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª")
                    snippet = post.get("snippet", post.get("text", ""))[:100]
                    url = post.get("url", "#")
                    response_text += f"{i}. [{channel}]({url})\n   {snippet}...\n\n"
            else:
                response_text += "üì± **–í–∞—à–∏ –ø–æ—Å—Ç—ã:** –ù–µ –Ω–∞–π–¥–µ–Ω–æ\n\n"
            
            if web_results:
                response_text += f"üåê **–ò–Ω—Ç–µ—Ä–Ω–µ—Ç ({len(web_results)}):**\n"
                for i, web in enumerate(web_results[:3], 1):
                    title = web.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
                    url = web.get("url", "#")
                    response_text += f"{i}. [{title}]({url})\n\n"
            else:
                response_text += "üåê **–ò–Ω—Ç–µ—Ä–Ω–µ—Ç:** –ù–µ –Ω–∞–π–¥–µ–Ω–æ\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–±–µ–∑ —Ç–µ–∫—Å—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ callback_data)
            keyboard = [
                [
                    InlineKeyboardButton("üì± –¢–æ–ª—å–∫–æ –ø–æ—Å—Ç—ã", callback_data="search_posts"),
                    InlineKeyboardButton("üåê –¢–æ–ª—å–∫–æ –≤–µ–±", callback_data="search_web")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                response_text,
                parse_mode='Markdown',
                disable_web_page_preview=True,
                reply_markup=reply_markup
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /search: {e}")
            await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        finally:
            db.close()
    
    async def handle_search_callback(self, query, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /search"""
        user = query.from_user
        data = query.data
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø—Ä–æ—Å –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_state = self.user_states.get(user.id)
        if not user_state or user_state.get('action') != 'search_query':
            await query.answer("‚ùå –ó–∞–ø—Ä–æ—Å —É—Å—Ç–∞—Ä–µ–ª. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ /search", show_alert=True)
            return
        
        search_query = user_state.get('query')
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–∏—Å–∫–∞ –∏–∑ callback_data
        if data == "search_posts":
            search_type = "posts"
        elif data == "search_web":
            search_type = "web"
        elif data == "search_both":
            search_type = "both"
        else:
            await query.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ø–æ–∏—Å–∫–∞")
            return
        
        db = SessionLocal()
        
        try:
            db_user = db.query(User).filter(User.telegram_id == user.id).first()
            if not db_user:
                await query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            # –í—ã–∑–æ–≤ RAG service —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
            result = await self._call_rag_service(
                "/rag/hybrid_search",
                user_id=db_user.id,
                query=search_query,
                include_web=(search_type in ["web", "both"]),
                include_posts=(search_type in ["posts", "both"]),
                limit=5
            )
            
            if not result:
                await query.answer("‚ùå –°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return
            
            posts = result.get("posts", [])
            web_results = result.get("web", [])
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response_text = f"üîç **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:** {search_query}\n\n"
            
            if search_type == "posts" or search_type == "both":
                if posts:
                    response_text += f"üì± **–ü–æ—Å—Ç—ã ({len(posts)}):**\n"
                    for i, post in enumerate(posts[:3], 1):
                        channel = post.get("channel", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª")
                        snippet = post.get("snippet", post.get("text", ""))[:100]
                        url = post.get("url", "#")
                        response_text += f"{i}. [{channel}]({url})\n   {snippet}...\n\n"
                else:
                    response_text += "üì± **–ü–æ—Å—Ç—ã:** –ù–µ –Ω–∞–π–¥–µ–Ω–æ\n\n"
            
            if search_type == "web" or search_type == "both":
                if web_results:
                    response_text += f"üåê **–ò–Ω—Ç–µ—Ä–Ω–µ—Ç ({len(web_results)}):**\n"
                    for i, web in enumerate(web_results[:3], 1):
                        title = web.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
                        url = web.get("url", "#")
                        response_text += f"{i}. [{title}]({url})\n\n"
                else:
                    response_text += "üåê **–ò–Ω—Ç–µ—Ä–Ω–µ—Ç:** –ù–µ –Ω–∞–π–¥–µ–Ω–æ\n\n"
            
            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ (–±–µ–∑ —Ç–µ–∫—Å—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞)
            if search_type != "both":
                keyboard = [[
                    InlineKeyboardButton("üîÑ –ü–æ–ª–Ω—ã–π –ø–æ–∏—Å–∫", callback_data="search_both")
                ]]
            else:
                keyboard = [
                    [
                        InlineKeyboardButton("üì± –¢–æ–ª—å–∫–æ –ø–æ—Å—Ç—ã", callback_data="search_posts"),
                        InlineKeyboardButton("üåê –¢–æ–ª—å–∫–æ –≤–µ–±", callback_data="search_web")
                    ]
                ]
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                response_text,
                parse_mode='Markdown',
                disable_web_page_preview=True,
                reply_markup=reply_markup
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ search callback: {e}")
            await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        finally:
            db.close()
    
    async def digest_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /digest - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ AI-–¥–∞–π–¥–∂–µ—Å—Ç–æ–≤"""
        user = update.effective_user
        db = SessionLocal()
        
        try:
            db_user = db.query(User).filter(User.telegram_id == user.id).first()
            if not db_user:
                await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
                return
            
            if not db_user.is_authenticated:
                await update.message.reply_text(
                    "‚ùå –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é.\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /auth"
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ RAG service
            result = await self._call_rag_service(
                f"/rag/digest/settings/{db_user.id}",
                method="GET"
            )
            
            if not result:
                await update.message.reply_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞.\n\n"
                    "üí° RAG-—Å–µ—Ä–≤–∏—Å –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."
                )
                return
            
            # API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é (–Ω–µ –≤ "settings" –∫–ª—é—á–µ)
            settings = result
            enabled = settings.get("enabled", False)
            frequency = settings.get("frequency", "daily")
            time_str = settings.get("time", "09:00")
            ai_summarize = settings.get("ai_summarize", False)
            summary_style = settings.get("summary_style", "concise")
            preferred_topics = settings.get("preferred_topics", [])
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            freq_text = "üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ" if frequency == "daily" else "üìÖ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ"
            ai_text = "ü§ñ AI-—Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è: –í–∫–ª—é—á–µ–Ω–∞ ‚úÖ" if ai_summarize else "ü§ñ AI-—Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è: –û—Ç–∫–ª—é—á–µ–Ω–∞ ‚ö™"
            style_map = {"concise": "–ö—Ä–∞—Ç–∫–∏–π", "detailed": "–î–µ—Ç–∞–ª—å–Ω—ã–π", "executive": "Executive"}
            style_text = f"üìä {style_map.get(summary_style, summary_style)}"
            topics_text = f"üè∑Ô∏è –¢–µ–º—ã: {', '.join(preferred_topics)}" if preferred_topics else "üè∑Ô∏è –¢–µ–º—ã: –ù–µ –∑–∞–¥–∞–Ω—ã"
            
            status_text = "‚úÖ –í–∫–ª—é—á–µ–Ω" if enabled else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω"
            
            # –ü–æ—è—Å–Ω–µ–Ω–∏–µ AI-—Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
            ai_description = ""
            if ai_summarize:
                ai_description = "\nüí° AI —Å–æ–∑–¥–∞—Å—Ç –∫—Ä–∞—Ç–∫—É—é –≤—ã–∂–∏–º–∫—É –≤–º–µ—Å—Ç–æ —Å–ø–∏—Å–∫–∞ –ø–æ—Å—Ç–æ–≤"
            else:
                ai_description = "\nüí° –î–∞–π–¥–∂–µ—Å—Ç –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª–Ω—ã–µ –ø–æ—Å—Ç—ã —Å–ø–∏—Å–∫–æ–º"
            
            message_text = f"""
‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤**

üìä **–°—Ç–∞—Ç—É—Å:** {status_text}
{freq_text}
üïê –í—Ä–µ–º—è: {time_str}
{ai_text}{ai_description}
{style_text}
{topics_text}

üí° –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:
            """
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            ai_button_text = "ü§ñ AI-—Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è: –í—ã–∫–ª—é—á–∏—Ç—å ‚ùå" if ai_summarize else "ü§ñ AI-—Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è: –í–∫–ª—é—á–∏—Ç—å ‚úÖ"
            
            keyboard = [
                [InlineKeyboardButton("üìÖ –ò–∑–º–µ–Ω–∏—Ç—å —á–∞—Å—Ç–æ—Ç—É", callback_data="digest_frequency")],
                [InlineKeyboardButton("üïê –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è", callback_data="digest_time")],
                [InlineKeyboardButton(ai_button_text, callback_data="digest_ai_toggle")],
                [InlineKeyboardButton("üìä –°—Ç–∏–ª—å —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏", callback_data="digest_style")],
                [InlineKeyboardButton("üè∑Ô∏è –ú–æ–∏ —Ç–µ–º—ã", callback_data="digest_topics")],
            ]
            
            if enabled:
                keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç", callback_data="digest_disable")])
            else:
                keyboard.append([InlineKeyboardButton("‚úÖ –í–∫–ª—é—á–∏—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç", callback_data="digest_enable")])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                message_text,
                parse_mode='Markdown',
                reply_markup=reply_markup
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /digest: {e}")
            await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        finally:
            db.close()
    
    async def handle_voice_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–º–∞–Ω–¥ /ask –∏ /search
        
        Premium/Enterprise only feature
        """
        user = update.effective_user
        voice = update.message.voice
        
        db = SessionLocal()
        
        try:
            # 1. –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            db_user = db.query(User).filter(User.telegram_id == user.id).first()
            
            if not db_user:
                await update.message.reply_text(
                    "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"
                )
                return
            
            # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            if not db_user.is_authenticated:
                await update.message.reply_text(
                    "‚ùå –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é.\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /login <INVITE_CODE>"
                )
                return
            
            # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ (premium/enterprise only)
            tier = SUBSCRIPTION_TIERS.get(db_user.subscription_type, {})
            voice_enabled = tier.get("voice_transcription_enabled", False)
            
            if not voice_enabled:
                await update.message.reply_text(
                    "üé§ **–ì–æ–ª–æ—Å–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –¥–ª—è Premium/Enterprise –ø–æ–¥–ø–∏—Å–∫–∏**\n\n"
                    f"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞: {db_user.subscription_type}\n\n"
                    "üí° –û–±–Ω–æ–≤–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥:\n"
                    "/subscription",
                    parse_mode='Markdown'
                )
                return
            
            # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤
            voice_limit = tier.get("voice_queries_per_day", 0)
            
            # Reset —Å—á–µ—Ç—á–∏–∫–∞ –µ—Å–ª–∏ –Ω–æ–≤—ã–π –¥–µ–Ω—å
            now = datetime.now(timezone.utc)
            if db_user.voice_queries_reset_at is None or db_user.voice_queries_reset_at < now:
                db_user.voice_queries_today = 0
                db_user.voice_queries_reset_at = now.replace(
                    hour=0, minute=0, second=0, microsecond=0
                ) + timedelta(days=1)
                db.commit()
            
            if db_user.voice_queries_today >= voice_limit:
                await update.message.reply_text(
                    f"‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {voice_limit}\n\n"
                    f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞ –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É: /subscription",
                    parse_mode='Markdown'
                )
                return
            
            # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            duration = voice.duration
            max_duration = int(os.getenv("VOICE_MAX_DURATION_SEC", "60"))
            
            if duration > max_duration:
                await update.message.reply_text(
                    f"‚ùå –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ: {duration}s\n\n"
                    f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {max_duration} —Å–µ–∫—É–Ω–¥\n\n"
                    f"üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
                )
                return
            
            # 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞
            if not voice_transcription_service.is_enabled():
                await update.message.reply_text(
                    "‚ùå –°–µ—Ä–≤–∏—Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n\n"
                    "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã"
                )
                return
            
            # 7. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
            status_message = await update.message.reply_text(
                f"üé§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ({duration}s)...\n"
                "‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 5-10 —Å–µ–∫—É–Ω–¥"
            )
            
            try:
                # 8. –°–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ
                voice_file = await voice.get_file()
                voice_bytes = await voice_file.download_as_bytearray()
                
                # 9. –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è —á–µ—Ä–µ–∑ SaluteSpeech
                transcription = await voice_transcription_service.transcribe_voice_message(
                    bytes(voice_bytes),
                    duration
                )
                
                if not transcription:
                    await status_message.edit_text(
                        "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏\n\n"
                        "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                        "‚Ä¢ –ì–æ–≤–æ—Ä–∏—Ç—å —á–µ—Ç—á–µ –∏ –º–µ–¥–ª–µ–Ω–Ω–µ–µ\n"
                        "‚Ä¢ –ó–∞–ø–∏—Å–∞—Ç—å –≤ —Ç–∏—Ö–æ–º –º–µ—Å—Ç–µ\n"
                        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É"
                    )
                    return
                
                # 10. –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
                db_user.voice_queries_today += 1
                db.commit()
                
                # 11. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç (–ø–æ—Å–ª–µ–¥–Ω—è—è –∫–æ–º–∞–Ω–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
                last_command = context.user_data.get('last_command')
                last_command_time = context.user_data.get('last_command_time')
                
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º last_command –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 5 –º–∏–Ω—É—Ç (300 —Å–µ–∫—É–Ω–¥)
                if last_command_time and (datetime.now(timezone.utc) - last_command_time).total_seconds() > 300:
                    logger.info("‚è∞ –°–±—Ä–æ—Å last_command (–ø—Ä–æ—à–ª–æ >5 –º–∏–Ω—É—Ç)")
                    last_command = None
                    context.user_data.pop('last_command', None)
                    context.user_data.pop('last_command_time', None)
                
                if last_command in ['/ask', '/search']:
                    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∫–æ–º–∞–Ω–¥—É
                    await status_message.edit_text(
                        f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: \"{transcription[:100]}...\"\n\n"
                        f"üîç –í—ã–ø–æ–ª–Ω—è—é –∫–æ–º–∞–Ω–¥—É {last_command}..."
                    )
                    
                    # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
                    if last_command == '/ask':
                        await self._execute_ask_with_text(update, context, transcription, db_user)
                    else:  # /search
                        await self._execute_search_with_text(update, context, transcription, db_user)
                
                else:
                    # AI-–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ n8n
                    await status_message.edit_text(
                        f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: \"{transcription[:100]}...\"\n\n"
                        f"ü§ñ –û–ø—Ä–µ–¥–µ–ª—è—é –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–æ–º–∞–Ω–¥—É..."
                    )
                    
                    classification = await self._classify_voice_command(transcription, db_user.id)
                    
                    if classification and classification.get('command'):
                        command = classification['command']
                        confidence = classification.get('confidence', 0)
                        reasoning = classification.get('reasoning', '')
                        
                        logger.info(
                            f"ü§ñ AI –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è: {command} "
                            f"(confidence: {confidence:.0%}, reason: {reasoning})"
                        )
                        
                        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É
                        await status_message.edit_text(
                            f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: \"{transcription[:100]}...\"\n\n"
                            f"ü§ñ AI –≤—ã–±—Ä–∞–ª: /{command} ({confidence:.0%} —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏)\n"
                            f"üîç –í—ã–ø–æ–ª–Ω—è—é..."
                        )
                        
                        if command == 'ask':
                            await self._execute_ask_with_text(update, context, transcription, db_user)
                        elif command == 'search':
                            await self._execute_search_with_text(update, context, transcription, db_user)
                        else:
                            # Fallback –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
                            await self._execute_ask_with_text(update, context, transcription, db_user)
                    
                    else:
                        # Fallback: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –µ—Å–ª–∏ AI –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
                        logger.warning("‚ö†Ô∏è AI –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏")
                        keyboard = [
                            [InlineKeyboardButton("üí° /ask - RAG –ø–æ–∏—Å–∫", callback_data=f"voice_ask:{transcription[:200]}")],
                            [InlineKeyboardButton("üîç /search - –ì–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–∏—Å–∫", callback_data=f"voice_search:{transcription[:200]}")]
                        ]
                        reply_markup = InlineKeyboardMarkup(keyboard)
                        
                        await status_message.edit_text(
                            f"‚úÖ **–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ:**\n\n"
                            f"\"{transcription}\"\n\n"
                            f"ü§î –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:",
                            parse_mode='Markdown',
                            reply_markup=reply_markup
                        )
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
                        context.user_data['voice_transcription'] = transcription
            
            except ValueError as e:
                # –û—à–∏–±–∫–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                await status_message.edit_text(f"‚ùå {str(e)}")
            except TimeoutError:
                await status_message.edit_text(
                    "‚è∞ Timeout —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏\n\n"
                    "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
                )
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ: {e}")
                await status_message.edit_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è\n\n"
                    f"üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É"
                )
        
        finally:
            db.close()
    
    async def _classify_voice_command(self, transcription: str, user_id: int) -> Optional[Dict]:
        """
        –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É —á–µ—Ä–µ–∑ n8n AI –∞–≥–µ–Ω—Ç–∞
        
        Args:
            transcription: –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            Dict —Å –ø–æ–ª—è–º–∏: command, confidence, reasoning
            –∏–ª–∏ None –µ—Å–ª–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å
        """
        n8n_url = os.getenv("N8N_WEBHOOK_URL", "http://n8n:5678")
        n8n_enabled = os.getenv("VOICE_AI_CLASSIFIER_ENABLED", "true").lower() == "true"
        
        if not n8n_enabled:
            logger.info("ü§ñ AI –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return None
        
        try:
            async with httpx.AsyncClient(timeout=10.0) as client:
                response = await client.post(
                    f"{n8n_url}/webhook/voice-classify",
                    json={
                        "transcription": transcription,
                        "user_id": user_id
                    }
                )
                
                if response.status_code == 200:
                    result = response.json()
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ result —Å–æ–¥–µ—Ä–∂–∏—Ç command
                    if result and result.get('command'):
                        logger.info(
                            f"ü§ñ AI classification: {result.get('command')} "
                            f"({result.get('confidence', 0):.0%})"
                        )
                        return result
                    else:
                        logger.error(f"‚ùå n8n classifier returned invalid response: {result}")
                        return None
                else:
                    logger.error(f"‚ùå n8n classifier error {response.status_code}: {response.text}")
                    return None
        
        except httpx.TimeoutException:
            logger.error("‚è∞ n8n classifier timeout")
            return None
        except Exception as e:
            logger.error(f"‚ùå Error calling n8n classifier: {e}")
            return None
    
    async def _execute_ask_with_text(
        self,
        update: Update,
        context: ContextTypes.DEFAULT_TYPE,
        query_text: str,
        db_user: User
    ):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å /ask —Å —Ç–µ–∫—Å—Ç–æ–º –∑–∞–ø—Ä–æ—Å–∞"""
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ RAG service
            await update.message.reply_text("üîç –ò—â—É –æ—Ç–≤–µ—Ç –≤ –≤–∞—à–∏—Ö –ø–æ—Å—Ç–∞—Ö...")
            
            result = await self._call_rag_service(
                "/rag/ask",
                method="POST",
                user_id=db_user.id,
                query=query_text,
                top_k=5
            )
            
            if not result:
                await update.message.reply_text(
                    "‚ùå RAG-—Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n\n"
                    "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"
                )
                return
            
            answer = result.get("answer", "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç")
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç (–∏—Å—Ç–æ—á–Ω–∏–∫–∏ —É–∂–µ –≤–∫–ª—é—á–µ–Ω—ã –≤ answer –æ—Ç RAG service)
            # –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ–º parse_mode, —Ç–∞–∫ –∫–∞–∫ RAG –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã Markdown
            response_text = f"üí° –û—Ç–≤–µ—Ç:\n\n{answer}"
            
            await update.message.reply_text(response_text)
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ _execute_ask_with_text: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã")
    
    async def _execute_search_with_text(
        self,
        update: Update,
        context: ContextTypes.DEFAULT_TYPE,
        query_text: str,
        db_user: User
    ):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å /search —Å —Ç–µ–∫—Å—Ç–æ–º –∑–∞–ø—Ä–æ—Å–∞"""
        try:
            await update.message.reply_text("üîç –ò—â—É –≤ –≤–∞—à–∏—Ö –ø–æ—Å—Ç–∞—Ö –∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ...")
            
            # –ì–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–∏—Å–∫ (–ø–æ—Å—Ç—ã + –≤–µ–± —á–µ—Ä–µ–∑ SearXNG)
            hybrid_result = await self._call_rag_service(
                "/rag/hybrid_search",
                method="POST",
                user_id=db_user.id,
                query=query_text,
                include_posts=True,
                include_web=True,
                limit=5
            )
            
            response_text = f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞: \"{query_text}\"\n\n"
            
            # –ü–æ—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if hybrid_result and hybrid_result.get("posts"):
                posts = hybrid_result["posts"]
                response_text += f"üì± –í–∞—à–∏ –ø–æ—Å—Ç—ã ({len(posts)}):\n"
                for i, post in enumerate(posts[:5], 1):
                    channel = post.get("channel", "Unknown")
                    score = int(post.get("score", 0) * 100)
                    snippet = post.get("snippet", post.get("text", ""))[:80]
                    response_text += f"{i}. @{channel} ({score}%)\n   {snippet}...\n\n"
            else:
                response_text += "üì± –í–∞—à–∏ –ø–æ—Å—Ç—ã: –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n\n"
            
            # –ò–Ω—Ç–µ—Ä–Ω–µ—Ç (—Ä–µ–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ SearXNG)
            if hybrid_result and hybrid_result.get("web"):
                web_results = hybrid_result["web"]
                response_text += f"üåê –ò–Ω—Ç–µ—Ä–Ω–µ—Ç ({len(web_results)}):\n"
                for i, web in enumerate(web_results[:3], 1):
                    title = web.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")[:70]
                    url = web.get("url", "#")
                    response_text += f"{i}. {title}\n   {url}\n\n"
            else:
                response_text += "üåê –ò–Ω—Ç–µ—Ä–Ω–µ—Ç: –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
            
            await update.message.reply_text(response_text)
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ _execute_search_with_text: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã")
    
    async def handle_voice_ask_callback(self, query, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ voice_ask - –≤—ã–ø–æ–ª–Ω–∏—Ç—å /ask —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π"""
        user = query.from_user
        transcription = query.data.split(":", 1)[1] if ":" in query.data else context.user_data.get('voice_transcription', '')
        
        db = SessionLocal()
        
        try:
            db_user = db.query(User).filter(User.telegram_id == user.id).first()
            
            if not db_user:
                await query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await query.edit_message_text(
                f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: \"{transcription[:100]}...\"\n\n"
                f"üîç –í—ã–ø–æ–ª–Ω—è—é /ask..."
            )
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º /ask
            # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π update –¥–ª—è –≤—ã–∑–æ–≤–∞ –∫–æ–º–∞–Ω–¥—ã
            class FakeMessage:
                def __init__(self, chat_id):
                    self.chat_id = chat_id
                    self.message_id = query.message.message_id
                
                async def reply_text(self, text, **kwargs):
                    await query.message.reply_text(text, **kwargs)
            
            class FakeUpdate:
                def __init__(self, user, message):
                    self.effective_user = user
                    self.message = message
            
            fake_update = FakeUpdate(query.from_user, FakeMessage(query.message.chat_id))
            
            await self._execute_ask_with_text(fake_update, context, transcription, db_user)
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ handle_voice_ask_callback: {e}")
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        finally:
            db.close()
    
    async def handle_voice_search_callback(self, query, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ voice_search - –≤—ã–ø–æ–ª–Ω–∏—Ç—å /search —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π"""
        user = query.from_user
        transcription = query.data.split(":", 1)[1] if ":" in query.data else context.user_data.get('voice_transcription', '')
        
        db = SessionLocal()
        
        try:
            db_user = db.query(User).filter(User.telegram_id == user.id).first()
            
            if not db_user:
                await query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await query.edit_message_text(
                f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: \"{transcription[:100]}...\"\n\n"
                f"üîç –í—ã–ø–æ–ª–Ω—è—é /search..."
            )
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º /search
            class FakeMessage:
                def __init__(self, chat_id):
                    self.chat_id = chat_id
                    self.message_id = query.message.message_id
                
                async def reply_text(self, text, **kwargs):
                    await query.message.reply_text(text, **kwargs)
            
            class FakeUpdate:
                def __init__(self, user, message):
                    self.effective_user = user
                    self.message = message
            
            fake_update = FakeUpdate(query.from_user, FakeMessage(query.message.chat_id))
            
            await self._execute_search_with_text(fake_update, context, transcription, db_user)
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ handle_voice_search_callback: {e}")
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        finally:
            db.close()
    
    async def handle_digest_callback(self, query, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∫–Ω–æ–ø–æ–∫ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤"""
        user = query.from_user
        data = query.data
        db = SessionLocal()
        
        try:
            db_user = db.query(User).filter(User.telegram_id == user.id).first()
            if not db_user:
                await query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            result = await self._call_rag_service(
                f"/rag/digest/settings/{db_user.id}",
                method="GET"
            )
            
            if not result:
                await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫")
                return
            
            # API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é (–Ω–µ –≤ "settings" –∫–ª—é—á–µ)
            settings = result
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö callback actions
            if data == "digest_frequency":
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —á–∞—Å—Ç–æ—Ç—ã
                keyboard = [
                    [InlineKeyboardButton("üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ", callback_data="digest_freq_daily")],
                    [InlineKeyboardButton("üìÖ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ", callback_data="digest_freq_weekly")],
                    [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="digest_back")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.edit_message_text(
                    "üìÖ **–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å—Ç–æ—Ç—É –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤:**",
                    parse_mode='Markdown',
                    reply_markup=reply_markup
                )
            
            elif data.startswith("digest_freq_"):
                frequency = data.split("_")[-1]
                # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                update_result = await self._call_rag_service(
                    f"/rag/digest/settings/{db_user.id}",
                    method="PUT",
                    enabled=settings.get("enabled", True),
                    frequency=frequency,
                    time=settings.get("time", "09:00"),
                    ai_summarize=settings.get("ai_summarize", False),
                    summary_style=settings.get("summary_style", "concise")
                )
                
                if update_result:
                    await query.answer("‚úÖ –ß–∞—Å—Ç–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
                    await self._show_digest_menu(query, db_user.id, edit=True)
                else:
                    await query.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
            
            elif data == "digest_time":
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏
                keyboard = [
                    [InlineKeyboardButton("üïò 09:00", callback_data="digest_time_09:00")],
                    [InlineKeyboardButton("üïõ 12:00", callback_data="digest_time_12:00")],
                    [InlineKeyboardButton("üïï 18:00", callback_data="digest_time_18:00")],
                    [InlineKeyboardButton("üïò 21:00", callback_data="digest_time_21:00")],
                    [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="digest_back")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.edit_message_text(
                    "üïê **–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏:**",
                    parse_mode='Markdown',
                    reply_markup=reply_markup
                )
            
            elif data.startswith("digest_time_"):
                time_value = data.split("_", 2)[-1]
                # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                update_result = await self._call_rag_service(
                    f"/rag/digest/settings/{db_user.id}",
                    method="PUT",
                    enabled=settings.get("enabled", True),
                    frequency=settings.get("frequency", "daily"),
                    time=time_value,
                    ai_summarize=settings.get("ai_summarize", False),
                    summary_style=settings.get("summary_style", "concise")
                )
                
                if update_result:
                    await query.answer("‚úÖ –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
                    await self._show_digest_menu(query, db_user.id, edit=True)
                else:
                    await query.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
            
            elif data == "digest_ai_toggle":
                # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º AI-—Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é
                new_ai_state = not settings.get("ai_summarize", False)
                update_result = await self._call_rag_service(
                    f"/rag/digest/settings/{db_user.id}",
                    method="PUT",
                    enabled=settings.get("enabled", True),
                    frequency=settings.get("frequency", "daily"),
                    time=settings.get("time", "09:00"),
                    ai_summarize=new_ai_state,
                    summary_style=settings.get("summary_style", "concise")
                )
                
                if update_result:
                    if new_ai_state:
                        await query.answer("‚úÖ AI –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫—Ä–∞—Ç–∫—É—é –≤—ã–∂–∏–º–∫—É", show_alert=True)
                    else:
                        await query.answer("‚úÖ –î–∞–π–¥–∂–µ—Å—Ç –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª–Ω—ã–µ –ø–æ—Å—Ç—ã", show_alert=True)
                    await self._show_digest_menu(query, db_user.id, edit=True)
                else:
                    await query.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
            
            elif data == "digest_style":
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Å—Ç–∏–ª—è
                keyboard = [
                    [InlineKeyboardButton("üìÑ –ö—Ä–∞—Ç–∫–∏–π", callback_data="digest_style_concise")],
                    [InlineKeyboardButton("üìã –î–µ—Ç–∞–ª—å–Ω—ã–π", callback_data="digest_style_detailed")],
                    [InlineKeyboardButton("üìä Executive", callback_data="digest_style_executive")],
                    [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="digest_back")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.edit_message_text(
                    "üìä **–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏:**\n\n"
                    "‚Ä¢ **–ö—Ä–∞—Ç–∫–∏–π** - —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã\n"
                    "‚Ä¢ **–î–µ—Ç–∞–ª—å–Ω—ã–π** - –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ–±–∑–æ—Ä\n"
                    "‚Ä¢ **Executive** - –¥–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π",
                    parse_mode='Markdown',
                    reply_markup=reply_markup
                )
            
            elif data.startswith("digest_style_"):
                style = data.split("_")[-1]
                # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                update_result = await self._call_rag_service(
                    f"/rag/digest/settings/{db_user.id}",
                    method="PUT",
                    enabled=settings.get("enabled", True),
                    frequency=settings.get("frequency", "daily"),
                    time=settings.get("time", "09:00"),
                    ai_summarize=settings.get("ai_summarize", False),
                    summary_style=style
                )
                
                if update_result:
                    await query.answer("‚úÖ –°—Ç–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω")
                    await self._show_digest_menu(query, db_user.id, edit=True)
                else:
                    await query.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
            
            elif data == "digest_topics":
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º state –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–º
                self.user_states[user.id] = {
                    'action': 'digest_topics_input',
                    'timestamp': time.time()
                }
                
                await query.edit_message_text(
                    "üè∑Ô∏è **–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–µ —Ç–µ–º—ã**\n\n"
                    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–º—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.\n\n"
                    "**–ü—Ä–∏–º–µ—Ä:**\n"
                    "`AI, –±–ª–æ–∫—á–µ–π–Ω, —Å—Ç–∞—Ä—Ç–∞–ø—ã, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏`\n\n"
                    "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ `/cancel` –¥–ª—è –æ—Ç–º–µ–Ω—ã",
                    parse_mode='Markdown'
                )
            
            elif data == "digest_enable":
                # –í–∫–ª—é—á–∞–µ–º –¥–∞–π–¥–∂–µ—Å—Ç
                update_result = await self._call_rag_service(
                    f"/rag/digest/settings/{db_user.id}",
                    method="PUT",
                    enabled=True,
                    frequency=settings.get("frequency", "daily"),
                    time=settings.get("time", "09:00"),
                    ai_summarize=settings.get("ai_summarize", False),
                    summary_style=settings.get("summary_style", "concise")
                )
                
                if update_result:
                    await query.answer("‚úÖ –î–∞–π–¥–∂–µ—Å—Ç –≤–∫–ª—é—á–µ–Ω")
                    await self._show_digest_menu(query, db_user.id, edit=True)
                else:
                    await query.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
            
            elif data == "digest_disable":
                # –û—Ç–∫–ª—é—á–∞–µ–º –¥–∞–π–¥–∂–µ—Å—Ç
                update_result = await self._call_rag_service(
                    f"/rag/digest/settings/{db_user.id}",
                    method="PUT",
                    enabled=False,
                    frequency=settings.get("frequency", "daily"),
                    time=settings.get("time", "09:00"),
                    ai_summarize=settings.get("ai_summarize", False),
                    summary_style=settings.get("summary_style", "concise")
                )
                
                if update_result:
                    await query.answer("‚úÖ –î–∞–π–¥–∂–µ—Å—Ç –æ—Ç–∫–ª—é—á–µ–Ω")
                    await self._show_digest_menu(query, db_user.id, edit=True)
                else:
                    await query.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
            
            elif data == "digest_back":
                # –í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤
                await self._show_digest_menu(query, db_user.id, edit=True)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ digest callback: {e}")
            await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        finally:
            db.close()
    
    async def _show_digest_menu(self, query_or_update, user_id: int, edit: bool = False):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤"""
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        result = await self._call_rag_service(
            f"/rag/digest/settings/{user_id}",
            method="GET"
        )
        
        if not result:
            message = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
            if edit:
                await query_or_update.edit_message_text(message)
            else:
                await query_or_update.message.reply_text(message)
            return
        
        # API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é (–Ω–µ –≤ "settings" –∫–ª—é—á–µ)
        settings = result
        enabled = settings.get("enabled", False)
        frequency = settings.get("frequency", "daily")
        time_str = settings.get("time", "09:00")
        ai_summarize = settings.get("ai_summarize", False)
        summary_style = settings.get("summary_style", "concise")
        preferred_topics = settings.get("preferred_topics", [])
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        freq_text = "üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ" if frequency == "daily" else "üìÖ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ"
        ai_text = "ü§ñ AI-—Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è: –í–∫–ª—é—á–µ–Ω–∞ ‚úÖ" if ai_summarize else "ü§ñ AI-—Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è: –û—Ç–∫–ª—é—á–µ–Ω–∞ ‚ö™"
        style_map = {"concise": "–ö—Ä–∞—Ç–∫–∏–π", "detailed": "–î–µ—Ç–∞–ª—å–Ω—ã–π", "executive": "Executive"}
        style_text = f"üìä {style_map.get(summary_style, summary_style)}"
        topics_text = f"üè∑Ô∏è –¢–µ–º—ã: {', '.join(preferred_topics)}" if preferred_topics else "üè∑Ô∏è –¢–µ–º—ã: –ù–µ –∑–∞–¥–∞–Ω—ã"
        status_text = "‚úÖ –í–∫–ª—é—á–µ–Ω" if enabled else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω"
        
        # –ü–æ—è—Å–Ω–µ–Ω–∏–µ AI-—Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
        ai_description = ""
        if ai_summarize:
            ai_description = "\nüí° AI —Å–æ–∑–¥–∞—Å—Ç –∫—Ä–∞—Ç–∫—É—é –≤—ã–∂–∏–º–∫—É –≤–º–µ—Å—Ç–æ —Å–ø–∏—Å–∫–∞ –ø–æ—Å—Ç–æ–≤"
        else:
            ai_description = "\nüí° –î–∞–π–¥–∂–µ—Å—Ç –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª–Ω—ã–µ –ø–æ—Å—Ç—ã —Å–ø–∏—Å–∫–æ–º"
        
        message_text = f"""
‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤**

üìä **–°—Ç–∞—Ç—É—Å:** {status_text}
{freq_text}
üïê –í—Ä–µ–º—è: {time_str}
{ai_text}{ai_description}
{style_text}
{topics_text}

üí° –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:
        """
        
        # –ö–Ω–æ–ø–∫–∏
        ai_button_text = "ü§ñ AI-—Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è: –í—ã–∫–ª—é—á–∏—Ç—å ‚ùå" if ai_summarize else "ü§ñ AI-—Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è: –í–∫–ª—é—á–∏—Ç—å ‚úÖ"
        
        keyboard = [
            [InlineKeyboardButton("üìÖ –ò–∑–º–µ–Ω–∏—Ç—å —á–∞—Å—Ç–æ—Ç—É", callback_data="digest_frequency")],
            [InlineKeyboardButton("üïê –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è", callback_data="digest_time")],
            [InlineKeyboardButton(ai_button_text, callback_data="digest_ai_toggle")],
            [InlineKeyboardButton("üìä –°—Ç–∏–ª—å —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏", callback_data="digest_style")],
            [InlineKeyboardButton("üè∑Ô∏è –ú–æ–∏ —Ç–µ–º—ã", callback_data="digest_topics")],
        ]
        
        if enabled:
            keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç", callback_data="digest_disable")])
        else:
            keyboard.append([InlineKeyboardButton("‚úÖ –í–∫–ª—é—á–∏—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç", callback_data="digest_enable")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if edit:
            await query_or_update.edit_message_text(
                message_text,
                parse_mode='Markdown',
                reply_markup=reply_markup
            )
        else:
            await query_or_update.reply_text(
                message_text,
                parse_mode='Markdown',
                reply_markup=reply_markup
            )
    
    def get_voice_mode_keyboard(self) -> ReplyKeyboardMarkup:
        """–°–æ–∑–¥–∞—Ç—å Reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥"""
        keyboard = [
            [
                KeyboardButton("ü§ñ AI —Ä–µ–∂–∏–º"),
                KeyboardButton("üí° Ask —Ä–µ–∂–∏–º"),
                KeyboardButton("üîç Search —Ä–µ–∂–∏–º")
            ]
        ]
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
    
    async def reset_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥"""
        context.user_data.pop('last_command', None)
        context.user_data.pop('last_command_time', None)
        context.user_data.pop('voice_transcription', None)
        context.user_data['voice_mode'] = 'ai'  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤ AI —Ä–µ–∂–∏–º
        
        await update.message.reply_text(
            "üîÑ **–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ!**\n\n"
            "–†–µ–∂–∏–º: ü§ñ AI –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä\n\n"
            "–ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å—Å—è –∫–∞–∫ /ask –∏–ª–∏ /search",
            reply_markup=self.get_voice_mode_keyboard()
        )
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º —Å —É—á–µ—Ç–æ–º —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º last_command —á—Ç–æ–±—ã –≥–æ–ª–æ—Å–æ–≤—ã–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ AI –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä
        context.user_data.pop('last_command', None)
        
        user = update.effective_user
        db = SessionLocal()
        
        try:
            db_user = db.query(User).filter(User.telegram_id == user.id).first()
            
            if not db_user:
                await update.message.reply_text(
                    "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"
                )
                return
            
            is_admin = db_user.is_admin()
            
            # –ë–∞–∑–æ–≤–∞—è —Å–ø—Ä–∞–≤–∫–∞ –¥–ª—è –≤—Å–µ—Ö
            base_help = """
ü§ñ **Telegram Channel Parser Bot - –°–ø—Ä–∞–≤–∫–∞**

üîê **–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è:**
/login INVITE\\_CODE - QR –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è (–ë–ï–ó SMS!)
/auth - –í–µ–±-—Ñ–æ—Ä–º–∞ (—Å–≤–æ–∏ API –∫–ª—é—á–∏)
/auth\\_status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å
/logout - –í—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã

üìã **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏:**
/add\\_channel @channel\\_name - –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª
/my\\_channels - –°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∫–∞–Ω–∞–ª–æ–≤
/remove\\_channel - –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª

üë• **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏:**
/add\\_group <—Å—Å—ã–ª–∫–∞> - –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
/my\\_groups - –°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –≥—Ä—É–ø–ø
/group\\_digest <—á–∞—Å—ã> - –î–∞–π–¥–∂–µ—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ (AI)
/group\\_settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

ü§ñ **RAG & AI:**
/ask <–≤–æ–ø—Ä–æ—Å> - –ü–æ–∏—Å–∫ –æ—Ç–≤–µ—Ç–∞ –≤ –ø–æ—Å—Ç–∞—Ö
/search <–∑–∞–ø—Ä–æ—Å> - –ì–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–∏—Å–∫ (–ø–æ—Å—Ç—ã + –≤–µ–±)
/recommend - –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
/digest - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å AI-–¥–∞–π–¥–∂–µ—Å—Ç—ã

üé§ **–ì–æ–ª–æ—Å–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã (Premium/Enterprise):**
üìå **–í–∞—Ä–∏–∞–Ω—Ç 1:** –ö–æ–º–∞–Ω–¥–∞ ‚Üí –ì–æ–ª–æ—Å–æ–≤–æ–µ
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ `/ask` –∏–ª–∏ `/search`
‚Ä¢ –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è –≤—ã–±—Ä–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞

üìå **–í–∞—Ä–∏–∞–Ω—Ç 2:** –ì–æ–ª–æ—Å–æ–≤–æ–µ ‚Üí AI –≤—ã–±–∏—Ä–∞–µ—Ç
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ –ë–ï–ó –∫–æ–º–∞–Ω–¥—ã
‚Ä¢ AI –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–µ—Ä–µ—Ç /ask –∏–ª–∏ /search

üîÑ **–°–±—Ä–æ—Å —Ä–µ–∂–∏–º–∞:**
‚Ä¢ `/reset` - —Å–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ AI)
‚Ä¢ –ê–≤—Ç–æ-—Å–±—Ä–æ—Å —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã

‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: –º–∞–∫—Å. 60 —Å–µ–∫, –ª–∏–º–∏—Ç—ã –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ

üíé **–ü–æ–¥–ø–∏—Å–∫–∞:**
/subscription - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–µ

**–ü—Ä–∏–º–µ—Ä—ã –∫–æ–º–∞–Ω–¥:**
‚Ä¢ `/ask –ß—Ç–æ –Ω–æ–≤–æ–≥–æ –≤ AI?`
‚Ä¢ `/search –∫–≤–∞–Ω—Ç–æ–≤—ã–µ –∫–æ–º–ø—å—é—Ç–µ—Ä—ã`
‚Ä¢ `/add_channel @durov`
‚Ä¢ `/add_group https://t.me/my\\_group`
‚Ä¢ `/group_digest 24`
"""
            
            # –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
            admin_help = """
üëë **–ö–û–ú–ê–ù–î–´ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê:**

üì± **–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è):**
/admin - –û—Ç–∫—Ä—ã—Ç—å Admin Panel Mini App
  ‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ (—Ä–æ–ª–∏, –ø–æ–¥–ø–∏—Å–∫–∏)
  ‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–∞–π—Ç –∫–æ–¥–æ–≤
  ‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –≥—Ä–∞—Ñ–∏–∫–∏
  ‚Ä¢ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞

üìù **–¢–µ–∫—Å—Ç–æ–≤—ã–µ –∞–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã:**
/admin\\_invite - –°–æ–∑–¥–∞—Ç—å –∏–Ω–≤–∞–π—Ç –∫–æ–¥
/admin\\_users - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
/admin\\_user <telegram\\_id> - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
/admin\\_grant <telegram\\_id> <subscription> <days> - –í—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
/admin\\_stats - –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:** –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/admin` –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ Mini App
""" if is_admin else ""
            
            footer = """
üí° **–ü–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**
‚Ä¢ –ü–∞—Ä—Å–∏–Ω–≥ –∫–∞–Ω–∞–ª–æ–≤: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
‚Ä¢ QR –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: –±–µ–∑ SMS –∫–æ–¥–æ–≤, –∑–∞ 30 —Å–µ–∫—É–Ω–¥
‚Ä¢ RAG –ø–æ–∏—Å–∫: –ø–æ –≤—Å–µ–º –≤–∞—à–∏–º –ø–æ—Å—Ç–∞–º —Å AI
‚Ä¢ –î–∞–π–¥–∂–µ—Å—Ç—ã: –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–≤–æ–¥–∫–∏

üìö **–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:**
–ü–æ–¥—Ä–æ–±–Ω—ã–µ –≥–∞–π–¥—ã –∏ –ø—Ä–∏–º–µ—Ä—ã: /help\\_docs
            """
            
            help_text = base_help + admin_help + footer
            
            await update.message.reply_text(help_text, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ help_command: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        finally:
            db.close()
    
    async def debug_status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
        user = update.effective_user
        db = SessionLocal()
        
        try:
            db_user = db.query(User).filter(User.telegram_id == user.id).first()
            if not db_user:
                await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            text = f"üîç **Debug Status**\n\n"
            text += f"üë§ User: {db_user.first_name} ({db_user.telegram_id})\n"
            text += f"üÜî DB ID: {db_user.id}\n"
            text += f"üìç Role: {db_user.role}\n"
            text += f"üíé Subscription: {db_user.subscription_type}\n"
            text += f"üîê Authenticated: {db_user.is_authenticated}\n\n"
            
            text += f"**Auth Status:**\n"
            text += f"‚Ä¢ Blocked: {'‚ùå YES' if db_user.is_blocked else '‚úÖ NO'}\n"
            text += f"‚Ä¢ Failed attempts: {db_user.failed_auth_attempts}\n"
            
            if db_user.block_expires:
                # Timezone-aware —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
                expires = db_user.block_expires
                if expires.tzinfo is None:
                    expires = expires.replace(tzinfo=timezone.utc)
                
                if expires > datetime.now(timezone.utc):
                    text += f"‚Ä¢ Block expires: {expires.strftime('%d.%m.%Y %H:%M UTC')}\n"
                else:
                    text += f"‚Ä¢ Block expired ‚úÖ\n"
            
            if db_user.last_auth_attempt:
                text += f"‚Ä¢ Last attempt: {db_user.last_auth_attempt.strftime('%d.%m.%Y %H:%M:%S UTC')}\n"
            
            if db_user.auth_error:
                text += f"‚Ä¢ Last error: {db_user.auth_error}\n"
            
            # Session —Ñ–∞–π–ª
            from shared_auth_manager import shared_auth_manager
            session_path = shared_auth_manager._get_session_path(user.id)
            import os
            session_exists = os.path.exists(session_path)
            text += f"\n**Session:**\n"
            text += f"‚Ä¢ File exists: {'‚úÖ YES' if session_exists else '‚ùå NO'}\n"
            text += f"‚Ä¢ Active client: {'‚úÖ YES' if user.id in shared_auth_manager.active_clients else '‚ùå NO'}\n"
            
            await update.message.reply_text(text, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"Debug status error: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        finally:
            db.close()
    
    async def debug_unblock_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)"""
        user = update.effective_user
        db = SessionLocal()
        
        try:
            db_user = db.query(User).filter(User.telegram_id == user.id).first()
            if not db_user:
                await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            # –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º
            db_user.is_blocked = False
            db_user.block_expires = None
            db_user.failed_auth_attempts = 0
            db_user.auth_error = None
            db.commit()
            
            await update.message.reply_text(
                "‚úÖ **–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!**\n\n"
                "‚Ä¢ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–Ω—è—Ç–∞\n"
                "‚Ä¢ –°—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ —Å–±—Ä–æ—à–µ–Ω\n"
                "‚Ä¢ –û—à–∏–±–∫–∏ –æ—á–∏—â–µ–Ω—ã\n\n"
                "–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å `/login` —Å–Ω–æ–≤–∞",
                parse_mode='Markdown'
            )
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        finally:
            db.close()
    
    async def debug_reset_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (session + –ë–î)"""
        user = update.effective_user
        db = SessionLocal()
        
        try:
            db_user = db.query(User).filter(User.telegram_id == user.id).first()
            if not db_user:
                await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            # –û—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            db_user.is_authenticated = False
            db_user.is_blocked = False
            db_user.block_expires = None
            db_user.failed_auth_attempts = 0
            db_user.auth_error = None
            db_user.last_auth_attempt = None
            db_user.last_auth_check = None
            db_user.phone_number = None
            db.commit()
            
            # –£–¥–∞–ª—è–µ–º session —Ñ–∞–π–ª
            from shared_auth_manager import shared_auth_manager
            await shared_auth_manager.disconnect_client(user.id)
            
            session_path = shared_auth_manager._get_session_path(user.id)
            if os.path.exists(session_path):
                os.remove(session_path)
                logger.info(f"üóëÔ∏è Session —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω –¥–ª—è {user.id}")
            
            await update.message.reply_text(
                "‚úÖ **–ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω!**\n\n"
                "–û—á–∏—â–µ–Ω–æ:\n"
                "‚Ä¢ –î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏\n"
                "‚Ä¢ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∏\n"
                "‚Ä¢ Session —Ñ–∞–π–ª\n"
                "‚Ä¢ –°—á–µ—Ç—á–∏–∫–∏ –ø–æ–ø—ã—Ç–æ–∫\n\n"
                "üîÑ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/login INVITE_CODE` –¥–ª—è –Ω–æ–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏",
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"Debug reset error: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        finally:
            db.close()
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –¥–ª—è standalone)"""
        print("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ —Ö–æ—Ç–∏–º –ø–æ–ª—É—á–∞—Ç—å callback_query updates
        self.application.run_polling(
            allowed_updates=["message", "callback_query", "edited_message"]
        )
        logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π: message, callback_query, edited_message")
    
    async def run_async(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ (async –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ run_system.py)"""
        logger.info("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ (async)...")
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await self.application.initialize()
        await self.application.start()
        await self.application.updater.start_polling(
            allowed_updates=["message", "callback_query", "edited_message"]
        )
        logger.info("‚úÖ Telegram Bot –∑–∞–ø—É—â–µ–Ω –≤ async —Ä–µ–∂–∏–º–µ")

if __name__ == "__main__":
    from database import create_tables
    create_tables()
    
    bot = TelegramBot()
    bot.run() 