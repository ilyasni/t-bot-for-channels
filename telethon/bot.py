from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
from sqlalchemy.orm import Session
from database import get_db, SessionLocal
from models import User, Channel, Post
from datetime import datetime
import re
import os
from dotenv import load_dotenv

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")

class TelegramBot:
    def __init__(self):
        self.application = Application.builder().token(BOT_TOKEN).build()
        self.setup_handlers()
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("add_channel", self.add_channel_command))
        self.application.add_handler(CommandHandler("my_channels", self.my_channels_command))
        self.application.add_handler(CommandHandler("remove_channel", self.remove_channel_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CallbackQueryHandler(self.button_callback))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text))
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        db = SessionLocal()
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            db_user = db.query(User).filter(User.telegram_id == user.id).first()
            
            if not db_user:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                db_user = User(
                    telegram_id=user.id,
                    username=user.username,
                    first_name=user.first_name,
                    last_name=user.last_name
                )
                db.add(db_user)
                db.commit()
                db.refresh(db_user)
                
                welcome_text = f"""
ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Telegram Channel Parser Bot!

–Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø–æ—Å—Ç—ã –∏–∑ –≤–∞—à–∏—Ö –ª—é–±–∏–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.

üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/add_channel - –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
/my_channels - –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à–∏ –∫–∞–Ω–∞–ª—ã
/remove_channel - –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª
/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É

–ù–∞—á–Ω–∏—Ç–µ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –∫–æ–º–∞–Ω–¥–æ–π /add_channel @channel_name
                """
            else:
                welcome_text = f"""
ü§ñ –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user.first_name}!

üìã –í–∞—à–∏ –∫–æ–º–∞–Ω–¥—ã:
/add_channel - –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
/my_channels - –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à–∏ –∫–∞–Ω–∞–ª—ã
/remove_channel - –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª
/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
                """
            
            await update.message.reply_text(welcome_text)
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        finally:
            db.close()
    
    async def add_channel_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞"""
        user = update.effective_user
        args = context.args
        
        if not args:
            await update.message.reply_text(
                "üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_channel @channel_name\n"
                "–ü—Ä–∏–º–µ—Ä: /add_channel @example_channel"
            )
            return
        
        channel_username = args[0].lstrip('@')
        db = SessionLocal()
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            db_user = db.query(User).filter(User.telegram_id == user.id).first()
            if not db_user:
                await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ –∫–∞–Ω–∞–ª
            existing_channel = db.query(Channel).filter(
                Channel.user_id == db_user.id,
                Channel.channel_username == channel_username
            ).first()
            
            if existing_channel:
                await update.message.reply_text(f"‚ùå –ö–∞–Ω–∞–ª @{channel_username} —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à —Å–ø–∏—Å–æ–∫")
                return
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª
            new_channel = Channel(
                user_id=db_user.id,
                channel_username=channel_username
            )
            db.add(new_channel)
            db.commit()
            
            await update.message.reply_text(
                f"‚úÖ –ö–∞–Ω–∞–ª @{channel_username} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n"
                f"–¢–µ–ø–µ—Ä—å —è –±—É–¥—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã –∏–∑ —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞."
            )
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞: {str(e)}")
        finally:
            db.close()
    
    async def my_channels_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞–Ω–∞–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user = update.effective_user
        db = SessionLocal()
        
        try:
            db_user = db.query(User).filter(User.telegram_id == user.id).first()
            if not db_user:
                await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
                return
            
            channels = db.query(Channel).filter(Channel.user_id == db_user.id).all()
            
            if not channels:
                await update.message.reply_text(
                    "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.\n"
                    "–î–æ–±–∞–≤—å—Ç–µ –∫–∞–Ω–∞–ª –∫–æ–º–∞–Ω–¥–æ–π /add_channel @channel_name"
                )
                return
            
            text = "üìã –í–∞—à–∏ –∫–∞–Ω–∞–ª—ã:\n\n"
            keyboard = []
            
            for i, channel in enumerate(channels):
                status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if channel.is_active else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
                text += f"{i+1}. @{channel.channel_username} - {status}\n"
                
                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                keyboard.append([
                    InlineKeyboardButton(
                        f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å @{channel.channel_username}",
                        callback_data=f"remove_{channel.id}"
                    )
                ])
            
            text += "\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤"
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(text, reply_markup=reply_markup)
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        finally:
            db.close()
    
    async def remove_channel_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞"""
        await self.my_channels_command(update, context)
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        if query.data.startswith("remove_"):
            channel_id = int(query.data.split("_")[1])
            await self.remove_channel_by_id(query, channel_id)
    
    async def remove_channel_by_id(self, query, channel_id: int):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –ø–æ ID"""
        user = query.from_user
        db = SessionLocal()
        
        try:
            db_user = db.query(User).filter(User.telegram_id == user.id).first()
            if not db_user:
                await query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            channel = db.query(Channel).filter(
                Channel.id == channel_id,
                Channel.user_id == db_user.id
            ).first()
            
            if not channel:
                await query.edit_message_text("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            channel_username = channel.channel_username
            db.delete(channel)
            db.commit()
            
            await query.edit_message_text(f"‚úÖ –ö–∞–Ω–∞–ª @{channel_username} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
            
        except Exception as e:
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {str(e)}")
        finally:
            db.close()
    
    async def handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        text = update.message.text
        
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å @, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª
        if text.startswith('@'):
            await update.message.reply_text(
                f"üí° –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª {text} –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è?\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: /add_channel {text}"
            )
        else:
            await update.message.reply_text(
                "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "/add_channel - –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª\n"
                "/my_channels - –í–∞—à–∏ –∫–∞–Ω–∞–ª—ã\n"
                "/help - –°–ø—Ä–∞–≤–∫–∞"
            )
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
        help_text = """
ü§ñ Telegram Channel Parser Bot - –°–ø—Ä–∞–≤–∫–∞

üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

/add_channel @channel_name - –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
–ü—Ä–∏–º–µ—Ä: /add_channel @example_channel

/my_channels - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∫–∞–Ω–∞–ª–æ–≤

/remove_channel - –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª –∏–∑ —Å–ø–∏—Å–∫–∞

/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

üí° –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:
1. –î–æ–±–∞–≤—å—Ç–µ –∫–∞–Ω–∞–ª—ã –∫–æ–º–∞–Ω–¥–æ–π /add_channel
2. –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±—É–¥–µ—Ç –ø–∞—Ä—Å–∏—Ç—å –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã
3. –ü–æ—Å—Ç—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
4. –í—ã –º–æ–∂–µ—Ç–µ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏—Ö —á–µ—Ä–µ–∑ n8n

‚ùì –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
        """
        await update.message.reply_text(help_text)
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        print("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        self.application.run_polling()

if __name__ == "__main__":
    from database import create_tables
    create_tables()
    
    bot = TelegramBot()
    bot.run() 