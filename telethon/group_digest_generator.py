"""
Group Digest Generator
–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤ –¥–∏–∞–ª–æ–≥–æ–≤ –≤ Telegram –≥—Ä—É–ø–ø–∞—Ö —á–µ—Ä–µ–∑ n8n multi-agent workflows
"""
import logging
import os
import httpx
from typing import List, Dict, Any, Optional
from datetime import datetime, timedelta, timezone
from telethon.tl.types import Message
from dotenv import load_dotenv
from markdown_utils import escape_markdown_v2

load_dotenv()

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class GroupDigestGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤ –¥–ª—è Telegram –≥—Ä—É–ø–ø —á–µ—Ä–µ–∑ n8n workflows"""
    
    def __init__(self):
        # n8n webhook URLs
        self.n8n_digest_webhook = os.getenv(
            "N8N_GROUP_DIGEST_WEBHOOK", 
            "http://n8n:5678/webhook/group-digest"
        )
        self.n8n_mention_webhook = os.getenv(
            "N8N_MENTION_ANALYZER_WEBHOOK",
            "http://n8n:5678/webhook/mention-analyzer"
        )
        
        # Timeouts
        self.digest_timeout = float(os.getenv("N8N_DIGEST_TIMEOUT", "120"))  # 2 –º–∏–Ω—É—Ç—ã
        self.mention_timeout = float(os.getenv("N8N_MENTION_TIMEOUT", "60"))  # 1 –º–∏–Ω—É—Ç–∞
        
        logger.info(f"‚úÖ GroupDigestGenerator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        logger.info(f"   Digest webhook: {self.n8n_digest_webhook}")
        logger.info(f"   Mention webhook: {self.n8n_mention_webhook}")
    
    async def generate_digest(
        self, 
        user_id: int, 
        group_id: int, 
        messages: List[Message],
        hours: int = 24
    ) -> Dict[str, Any]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–∞–π–¥–∂–µ—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —á–µ—Ä–µ–∑ n8n multi-agent workflow
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            group_id: ID –≥—Ä—É–ø–ø—ã
            messages: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π Telethon
            hours: –ü–µ—Ä–∏–æ–¥ –≤ —á–∞—Å–∞—Ö
            
        Returns:
            {
                "topics": List[str],
                "speakers_summary": Dict[str, str],
                "overall_summary": str,
                "message_count": int,
                "period": str
            }
        """
        try:
            logger.info(f"ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã {group_id} (user {user_id})")
            logger.info(f"   –°–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}, –ø–µ—Ä–∏–æ–¥: {hours}—á")
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
            max_messages = int(os.getenv("DIGEST_MAX_MESSAGES", "200"))
            limited_messages = messages[:max_messages]
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è n8n
            formatted_messages = []
            for msg in limited_messages:
                # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ username
                username = "Unknown"
                if hasattr(msg, 'sender') and msg.sender:
                    if hasattr(msg.sender, 'username') and msg.sender.username:
                        username = msg.sender.username
                    elif hasattr(msg.sender, 'first_name') and msg.sender.first_name:
                        username = msg.sender.first_name
                
                formatted_messages.append({
                    "username": username,
                    "text": msg.text or "",
                    "date": msg.date.isoformat() if hasattr(msg.date, 'isoformat') else str(msg.date)
                })
            
            # –í—ã–∑—ã–≤–∞–µ–º n8n workflow
            async with httpx.AsyncClient(timeout=self.digest_timeout) as client:
                logger.info(f"üì° –í—ã–∑–æ–≤ n8n workflow: {self.n8n_digest_webhook}")
                
                response = await client.post(
                    self.n8n_digest_webhook,
                    json={
                        "messages": formatted_messages,
                        "user_id": user_id,
                        "group_id": group_id,
                        "hours": hours
                    }
                )
                
                if response.status_code != 200:
                    logger.error(f"‚ùå n8n workflow error: {response.status_code}")
                    logger.error(f"   Response: {response.text[:500]}")
                    raise Exception(f"n8n workflow failed: {response.status_code}")
                
                result = response.json()
                logger.info(f"‚úÖ –î–∞–π–¥–∂–µ—Å—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                logger.info(f"   –¢–µ–º: {len(result.get('topics', []))}")
                logger.info(f"   –°–ø–∏–∫–µ—Ä–æ–≤: {len(result.get('speakers_summary', {}))}")
                
                return result
                
        except httpx.TimeoutException:
            logger.error(f"‚è∞ Timeout –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞ ({self.digest_timeout}s)")
            raise Exception(f"n8n workflow timeout after {self.digest_timeout}s")
        
        except httpx.ConnectError as e:
            logger.error(f"üîå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ n8n: {e}")
            logger.error(f"   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ n8n –∑–∞–ø—É—â–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É {self.n8n_digest_webhook}")
            raise Exception(f"n8n unavailable: {str(e)}")
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {e}")
            raise
    
    async def analyze_mention(
        self,
        mentioned_user: str,
        context_messages: List[Message]
    ) -> Dict[str, Any]:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ n8n workflow
        
        Args:
            mentioned_user: Username —É–ø–æ–º—è–Ω—É—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            context_messages: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–¥–æ/–ø–æ—Å–ª–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è)
            
        Returns:
            {
                "context_summary": str,
                "mention_reason": str,
                "urgency": str,
                "key_points": List[str]
            }
        """
        try:
            logger.info(f"üîç –ê–Ω–∞–ª–∏–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è @{mentioned_user}")
            logger.info(f"   –ö–æ–Ω—Ç–µ–∫—Å—Ç: {len(context_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è n8n
            formatted_context = []
            for msg in context_messages:
                # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ username
                username = "Unknown"
                if hasattr(msg, 'sender') and msg.sender:
                    if hasattr(msg.sender, 'username') and msg.sender.username:
                        username = msg.sender.username
                    elif hasattr(msg.sender, 'first_name') and msg.sender.first_name:
                        username = msg.sender.first_name
                
                formatted_context.append({
                    "username": username,
                    "text": msg.text or "",
                    "timestamp": msg.date.isoformat() if hasattr(msg.date, 'isoformat') else str(msg.date)
                })
            
            # –í—ã–∑—ã–≤–∞–µ–º n8n workflow
            async with httpx.AsyncClient(timeout=self.mention_timeout) as client:
                logger.info(f"üì° –í—ã–∑–æ–≤ n8n workflow: {self.n8n_mention_webhook}")
                
                response = await client.post(
                    self.n8n_mention_webhook,
                    json={
                        "mention_context": formatted_context,
                        "mentioned_user": mentioned_user
                    }
                )
                
                if response.status_code != 200:
                    logger.error(f"‚ùå n8n workflow error: {response.status_code}")
                    logger.error(f"   Response: {response.text[:500]}")
                    raise Exception(f"n8n workflow failed: {response.status_code}")
                
                result = response.json()
                logger.info(f"‚úÖ –ê–Ω–∞–ª–∏–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω")
                logger.info(f"   –°—Ä–æ—á–Ω–æ—Å—Ç—å: {result.get('urgency', 'unknown')}")
                logger.info(f"   –ü—Ä–∏—á–∏–Ω–∞: {result.get('mention_reason', 'unknown')[:50]}...")
                
                return result
                
        except httpx.TimeoutException:
            logger.error(f"‚è∞ Timeout –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è ({self.mention_timeout}s)")
            raise Exception(f"n8n workflow timeout after {self.mention_timeout}s")
        
        except httpx.ConnectError as e:
            logger.error(f"üîå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ n8n: {e}")
            raise Exception(f"n8n unavailable: {str(e)}")
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
            raise
    
    def format_digest_for_telegram(self, digest: Dict[str, Any], group_title: str) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–π–¥–∂–µ—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
        
        Args:
            digest: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç generate_digest()
            group_title: –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Markdown
        """
        lines = []
        
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã Markdown –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –≥—Ä—É–ø–ø—ã
        safe_title = escape_markdown_v2(group_title)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        lines.append(f"# üìä –î–∞–π–¥–∂–µ—Å—Ç –≥—Ä—É–ø–ø—ã: {safe_title}")
        lines.append(f"**–ü–µ—Ä–∏–æ–¥:** {digest.get('period', 'unknown')}")
        lines.append(f"**–°–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ:** {digest.get('message_count', 0)}")
        lines.append("")
        
        # –¢–µ–º—ã
        topics = digest.get('topics', [])
        if topics:
            lines.append("## üéØ –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã:")
            for i, topic in enumerate(topics, 1):
                safe_topic = escape_markdown_v2(str(topic))
                lines.append(f"{i}\\. {safe_topic}")
            lines.append("")
        
        # –°–ø–∏–∫–µ—Ä—ã
        speakers = digest.get('speakers_summary', {})
        if speakers:
            lines.append("## üë• –ê–∫—Ç–∏–≤–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏:")
            for username, summary in speakers.items():
                safe_username = escape_markdown_v2(str(username))
                safe_summary = escape_markdown_v2(str(summary))
                lines.append(f"‚Ä¢ @{safe_username}: {safe_summary}")
            lines.append("")
        
        # –û–±—â–µ–µ —Ä–µ–∑—é–º–µ
        overall = digest.get('overall_summary', '')
        if overall:
            lines.append("## üìù –†–µ–∑—é–º–µ:")
            safe_overall = escape_markdown_v2(str(overall))
            lines.append(safe_overall)
            lines.append("")
        
        # –§—É—Ç–µ—Ä
        lines.append("\\-\\-\\-")
        lines.append(f"*–î–∞–π–¥–∂–µ—Å—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω AI \\(GigaChat Multi\\-Agent\\) ‚Ä¢ {datetime.now().strftime('%d.%m.%Y %H:%M')}*")
        
        return "\n".join(lines)
    
    def format_mention_for_telegram(
        self, 
        analysis: Dict[str, Any], 
        group_title: str,
        message_link: str = None
    ) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram
        
        Args:
            analysis: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç analyze_mention()
            group_title: –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
            message_link: –°—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Markdown
        """
        urgency_emoji = {
            "low": "üü¢",
            "medium": "üü°",
            "high": "üî¥"
        }
        
        urgency = analysis.get('urgency', 'medium')
        emoji = urgency_emoji.get(urgency, 'üü°')
        
        lines = []
        
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã Markdown –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –≥—Ä—É–ø–ø—ã
        safe_title = escape_markdown_v2(group_title)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        lines.append(f"{emoji} **–í–∞—Å —É–ø–æ–º—è–Ω—É–ª–∏ –≤ –≥—Ä—É–ø–ø–µ: {safe_title}**")
        lines.append("")
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç
        context = analysis.get('context_summary', '')
        if context:
            safe_context = escape_markdown_v2(str(context))
            lines.append(f"**–ö–æ–Ω—Ç–µ–∫—Å—Ç:** {safe_context}")
            lines.append("")
        
        # –ü—Ä–∏—á–∏–Ω–∞
        reason = analysis.get('mention_reason', '')
        if reason:
            safe_reason = escape_markdown_v2(str(reason))
            lines.append(f"**–ü–æ—á–µ–º—É —É–ø–æ–º—è–Ω—É–ª–∏:** {safe_reason}")
            lines.append("")
        
        # –ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã
        key_points = analysis.get('key_points', [])
        if key_points:
            lines.append("**–ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã:**")
            for point in key_points:
                safe_point = escape_markdown_v2(str(point))
                lines.append(f"‚Ä¢ {safe_point}")
            lines.append("")
        
        # –°—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if message_link:
            lines.append(f"[–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é]({message_link})")
            lines.append("")
        
        # –§—É—Ç–µ—Ä
        lines.append(f"*–°—Ä–æ—á–Ω–æ—Å—Ç—å: {urgency.upper()} ‚Ä¢ {datetime.now().strftime('%H:%M')}*")
        
        return "\n".join(lines)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
group_digest_generator = GroupDigestGenerator()

