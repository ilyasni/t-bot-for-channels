#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è evaluation system
"""

import asyncio
import json
import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(str(Path(__file__).parent))

from evaluation.golden_dataset_manager import GoldenDatasetManager
from evaluation.schemas import GoldenDatasetCreate, GoldenDatasetItem

async def test_evaluation():
    """–¢–µ—Å—Ç evaluation system"""
    
    # Database URL
    database_url = os.getenv(
        "TELEGRAM_DATABASE_URL", 
        "postgresql://postgres:xiNmSysbbcqTOWT4eb1KkQtM2fb8X7Ms@supabase-db:5432/postgres?sslmode=disable"
    )
    
    print(f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î: {database_url}")
    
    # –°–æ–∑–¥–∞–µ–º manager
    manager = GoldenDatasetManager(database_url)
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
        await manager.initialize()
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π item
        test_item = GoldenDatasetItem(
            question="–ß—Ç–æ —Ç–∞–∫–æ–µ –ò–ò?",
            expected_answer="–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç - —ç—Ç–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è...",
            contexts=["–ò–ò - —ç—Ç–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è", "–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ - —á–∞—Å—Ç—å –ò–ò"],
            difficulty="easy",
            category="technology",
            tags=["AI", "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏"]
        )
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π dataset
        dataset_create = GoldenDatasetCreate(
            name="test_dataset",
            description="–¢–µ—Å—Ç–æ–≤—ã–π dataset –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏",
            version="1.0.0",
            category="technology",
            items=[test_item]
        )
        
        # –°–æ–∑–¥–∞–µ–º dataset
        result = await manager.create_dataset(dataset_create)
        print(f"‚úÖ Dataset —Å–æ–∑–¥–∞–Ω: {result}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ datasets
        datasets = await manager.list_datasets()
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ datasets: {len(datasets)}")
        for dataset in datasets:
            print(f"  ‚Ä¢ {dataset['name']} (v{dataset['version']})")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        await manager.disconnect()
        print("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")

if __name__ == "__main__":
    asyncio.run(test_evaluation())
