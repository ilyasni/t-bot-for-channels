"""
–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ç–µ—Å—Ç–∞—Ö
Sample texts, structured data, etc.
"""

from datetime import datetime, timezone, timedelta


# ============================================================================
# Sample Texts
# ============================================================================

SAMPLE_POST_TEXTS = [
    """
    üöÄ –†–µ–≤–æ–ª—é—Ü–∏—è –≤ –æ–±–ª–∞—Å—Ç–∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞!
    
    –ù–æ–≤–∞—è –º–æ–¥–µ–ª—å –æ—Ç OpenAI –ø—Ä–µ–≤–æ—Å—Ö–æ–¥–∏—Ç –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∞–Ω–∞–ª–æ–≥–∏.
    –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ —Å—Ç–∞—Ç—å–µ: https://example.com/ai-revolution
    
    #AI #—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ #–∏–Ω–Ω–æ–≤–∞—Ü–∏–∏
    """,
    """
    üíº –ë–ª–æ–∫—á–µ–π–Ω —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –ø—Ä–æ–¥–æ–ª–∂–∞—é—Ç —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è
    
    Ethereum 2.0 –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ç–µ—Å—Ç–æ–≤–æ–π —Å–µ—Ç–∏.
    –°–∫–æ—Ä–æ—Å—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —É–≤–µ–ª–∏—á–∏–ª–∞—Å—å –≤ 100 —Ä–∞–∑!
    
    #–±–ª–æ–∫—á–µ–π–Ω #ethereum #–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
    """,
    """
    üéÆ –ò–≥—Ä–æ–≤–∞—è –∏–Ω–¥—É—Å—Ç—Ä–∏—è –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –Ω–∞ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å
    
    –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –¥–æ—Å—Ç—É–ø–Ω–µ–µ —Å –∫–∞–∂–¥—ã–º –¥–Ω–µ–º.
    –ù–æ–≤—ã–µ VR –≥–∞—Ä–Ω–∏—Ç—É—Ä—ã —Å—Ç–æ—è—Ç –≤—Å–µ–≥–æ $299.
    
    #gaming #VR #—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
    """,
    """
    üì± –û–±–∑–æ—Ä —Å–º–∞—Ä—Ç—Ñ–æ–Ω–æ–≤ 2025 –≥–æ–¥–∞
    
    –¢–æ–ø-5 —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –ø–æ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—é —Ü–µ–Ω–∞/–∫–∞—á–µ—Å—Ç–≤–æ.
    –í—Å–µ –º–æ–¥–µ–ª–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π 5G –∏ AI-–∫–∞–º–µ—Ä–æ–π.
    
    #—Å–º–∞—Ä—Ç—Ñ–æ–Ω—ã #–æ–±–∑–æ—Ä #–≥–∞–¥–∂–µ—Ç—ã
    """,
    """
    üåç –≠–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã Tech –∫–æ–º–ø–∞–Ω–∏–π
    
    Apple, Google –∏ Microsoft –æ–±—è–∑–∞–ª–∏—Å—å –¥–æ—Å—Ç–∏—á—å —É–≥–ª–µ—Ä–æ–¥–Ω–æ–π –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ—Å—Ç–∏ –∫ 2030 –≥–æ–¥—É.
    –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –≤ –∑–µ–ª–µ–Ω—É—é —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫—É –ø—Ä–µ–≤—ã—Å–∏–ª–∏ $10 –º–ª—Ä–¥.
    
    #—ç–∫–æ–ª–æ–≥–∏—è #—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ #–±—É–¥—É—â–µ–µ
    """
]


SAMPLE_CHANNEL_NAMES = [
    ("tech_news", "Tech News Channel"),
    ("ai_digest", "AI Digest"),
    ("blockchain_updates", "Blockchain Updates"),
    ("startup_weekly", "Startup Weekly"),
    ("science_daily", "Science Daily")
]


SAMPLE_GROUP_NAMES = [
    ("Tech Discussion", "tech_chat"),
    ("AI Researchers", None),  # –ü—Ä–∏–≤–∞—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞ –±–µ–∑ username
    ("Blockchain Community", "blockchain_group"),
    ("Startup Founders", None),
    ("Science Enthusiasts", "science_talk")
]


# ============================================================================
# Sample RAG Queries
# ============================================================================

SAMPLE_RAG_QUERIES = [
    "–ß—Ç–æ –Ω–æ–≤–æ–≥–æ –≤ –æ–±–ª–∞—Å—Ç–∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞?",
    "–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –±–ª–æ–∫—á–µ–π–Ω —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏",
    "–ö–∞–∫–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø—Ä–æ Tesla?",
    "–ß—Ç–æ –ø–∏—Å–∞–ª–∏ –æ –∫–≤–∞–Ω—Ç–æ–≤—ã—Ö –∫–æ–º–ø—å—é—Ç–µ—Ä–∞—Ö?",
    "–û–±–∑–æ—Ä —Å–º–∞—Ä—Ç—Ñ–æ–Ω–æ–≤ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ"
]


# ============================================================================
# Sample Tags
# ============================================================================

SAMPLE_TAGS = [
    ["AI", "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "–∏–Ω–Ω–æ–≤–∞—Ü–∏–∏"],
    ["–±–ª–æ–∫—á–µ–π–Ω", "–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã", "—Ñ–∏–Ω–∞–Ω—Å—ã"],
    ["–Ω–∞—É–∫–∞", "–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è", "–æ—Ç–∫—Ä—ã—Ç–∏—è"],
    ["—Å—Ç–∞—Ä—Ç–∞–ø—ã", "–±–∏–∑–Ω–µ—Å", "–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏"],
    ["–≥–∞–¥–∂–µ—Ç—ã", "–æ–±–∑–æ—Ä—ã", "—Å–º–∞—Ä—Ç—Ñ–æ–Ω—ã"]
]


# ============================================================================
# Sample Embeddings
# ============================================================================

def generate_sample_embedding(dimension: int = 1024) -> list:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ–µ–π–∫–æ–≤—ã–π embedding –≤–µ–∫—Ç–æ—Ä
    GigaChat –∏—Å–ø–æ–ª—å–∑—É–µ—Ç 1024-–º–µ—Ä–Ω—ã–µ –≤–µ–∫—Ç–æ—Ä—ã
    """
    import random
    return [random.uniform(-1.0, 1.0) for _ in range(dimension)]


# ============================================================================
# Sample API Responses
# ============================================================================

SAMPLE_GIGACHAT_EMBEDDING_RESPONSE = {
    "data": [{
        "embedding": generate_sample_embedding(1024),
        "index": 0
    }],
    "model": "EmbeddingsGigaR",
    "usage": {
        "prompt_tokens": 10,
        "total_tokens": 10
    }
}


SAMPLE_GIGACHAT_CHAT_RESPONSE = {
    "choices": [{
        "message": {
            "content": "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –æ—Ç GigaChat –Ω–∞ –≤–∞—à –∑–∞–ø—Ä–æ—Å –æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö.",
            "role": "assistant"
        },
        "finish_reason": "stop",
        "index": 0
    }],
    "model": "GigaChat-Lite",
    "usage": {
        "prompt_tokens": 50,
        "completion_tokens": 20,
        "total_tokens": 70
    }
}


SAMPLE_OPENROUTER_RESPONSE = {
    "choices": [{
        "message": {
            "content": "This is a test response from OpenRouter.",
            "role": "assistant"
        },
        "finish_reason": "stop"
    }],
    "model": "google/gemini-2.0-flash-exp:free"
}


SAMPLE_SALUTESPEECH_TRANSCRIPTION = {
    "result": [{
        "normalized_text": "—Ç–µ—Å—Ç–æ–≤–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö",
        "confidence": 0.95,
        "words": [
            {"word": "—Ç–µ—Å—Ç–æ–≤–∞—è", "start_time": 0.0, "end_time": 0.5},
            {"word": "—Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è", "start_time": 0.5, "end_time": 1.0}
        ]
    }]
}


SAMPLE_N8N_GROUP_DIGEST = {
    "summary": "–û–±—Å—É–∂–¥–∞–ª–∏—Å—å –Ω–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –≤ AI –∏ –±–ª–æ–∫—á–µ–π–Ω–µ",
    "topics": [
        "–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç",
        "–ë–ª–æ–∫—á–µ–π–Ω —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏",
        "–°—Ç–∞—Ä—Ç–∞–ø—ã"
    ],
    "key_speakers": ["Alice", "Bob", "Charlie"],
    "message_count": 45,
    "time_period": "24 hours",
    "sentiment": "positive"
}


SAMPLE_N8N_MENTION_ANALYSIS = {
    "reason": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª –º–Ω–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏",
    "context": "–í –≥—Ä—É–ø–ø–µ –æ–±—Å—É–∂–¥–∞–ª–∏ –Ω–æ–≤—ã–π AI framework",
    "urgency": "medium",
    "sentiment": "neutral",
    "requires_response": True
}


SAMPLE_N8N_VOICE_CLASSIFICATION = {
    "command": "ask",
    "confidence": 0.85,
    "reasoning": "Detected question pattern in transcription",
    "alternative": "search"
}


# ============================================================================
# Sample Qdrant Responses
# ============================================================================

SAMPLE_QDRANT_SEARCH_RESULTS = [
    {
        "id": "post_1_chunk_0",
        "score": 0.95,
        "payload": {
            "post_id": 1,
            "user_id": 1,
            "channel_id": 1,
            "channel_username": "tech_news",
            "text": "Sample post about AI technology",
            "posted_at": datetime.now(timezone.utc).isoformat(),
            "tags": ["AI", "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏"],
            "url": "https://t.me/tech_news/1"
        }
    },
    {
        "id": "post_2_chunk_0",
        "score": 0.88,
        "payload": {
            "post_id": 2,
            "user_id": 1,
            "channel_id": 1,
            "channel_username": "tech_news",
            "text": "Another post about blockchain",
            "posted_at": (datetime.now(timezone.utc) - timedelta(days=1)).isoformat(),
            "tags": ["–±–ª–æ–∫—á–µ–π–Ω", "–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã"],
            "url": "https://t.me/tech_news/2"
        }
    }
]


# ============================================================================
# Helper Functions
# ============================================================================

def create_sample_posts_with_dates(
    count: int = 10,
    start_date: datetime = None
) -> list:
    """
    –°–æ–∑–¥–∞—Ç—å —Å–ø–∏—Å–æ–∫ sample –ø–æ—Å—Ç–æ–≤ —Å —Ä–∞–∑–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏
    –ü–æ–ª–µ–∑–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è retention –∏ cleanup
    """
    if start_date is None:
        start_date = datetime.now(timezone.utc) - timedelta(days=count)
    
    posts = []
    for i in range(count):
        posts.append({
            'text': SAMPLE_POST_TEXTS[i % len(SAMPLE_POST_TEXTS)],
            'posted_at': start_date + timedelta(days=i),
            'telegram_message_id': i + 1,
            'tags': SAMPLE_TAGS[i % len(SAMPLE_TAGS)]
        })
    
    return posts

