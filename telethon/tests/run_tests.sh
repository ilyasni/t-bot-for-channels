#!/bin/bash
#
# –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ –≤ —Ä–∞–∑–Ω—ã—Ö —Ä–µ–∂–∏–º–∞—Ö
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./tests/run_tests.sh [mode]
#
# Modes:
#   unit        - –¢–æ–ª—å–∫–æ unit —Ç–µ—Å—Ç—ã (–±—ã—Å—Ç—Ä–æ, —Å –º–æ–∫–∞–º–∏)
#   integration - –¢–æ–ª—å–∫–æ integration —Ç–µ—Å—Ç—ã (—Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏)
#   all         - –í—Å–µ —Ç–µ—Å—Ç—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
#   coverage    - –¢–µ—Å—Ç—ã + HTML coverage report
#   fast        - –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ (-n auto)
#

set -e

MODE=${1:-all}
PROJECT_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"

cd "$PROJECT_ROOT"

echo "============================================"
echo "üß™ Telegram Parser Tests"
echo "============================================"
echo "Mode: $MODE"
echo "Project: $PROJECT_ROOT"
echo ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
if [[ -z "$VIRTUAL_ENV" ]]; then
    echo "‚ö†Ô∏è  –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ"
    echo "üí° –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ: source venv/bin/activate"
    echo ""
fi

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ test dependencies –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
if ! python -c "import pytest" 2>/dev/null; then
    echo "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ test dependencies..."
    pip install -r requirements-test.txt
    echo ""
fi

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è unit —Ç–µ—Å—Ç–æ–≤
run_unit_tests() {
    echo "üî¨ –ó–∞–ø—É—Å–∫ Unit Tests..."
    pytest tests/ \
        -m "unit" \
        --tb=short \
        -v \
        --ignore=tests/integration/ \
        "$@"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è integration —Ç–µ—Å—Ç–æ–≤
run_integration_tests() {
    echo "üîó –ó–∞–ø—É—Å–∫ Integration Tests..."
    echo "‚ö†Ô∏è  –¢—Ä–µ–±—É—é—Ç—Å—è: PostgreSQL, Redis, Qdrant"
    echo ""
    
    pytest tests/integration/ \
        -m "integration" \
        --tb=short \
        -v \
        "$@"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
run_all_tests() {
    echo "üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤..."
    pytest tests/ \
        --tb=short \
        -v \
        "$@"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è coverage
run_with_coverage() {
    echo "üìä –ó–∞–ø—É—Å–∫ —Å Coverage..."
    pytest tests/ \
        --cov=. \
        --cov-report=html \
        --cov-report=term-missing \
        --cov-fail-under=60 \
        --tb=short \
        -v \
        "$@"
    
    echo ""
    echo "‚úÖ Coverage report: htmlcov/index.html"
    echo "üí° –û—Ç–∫—Ä–æ–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ: open htmlcov/index.html"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
run_fast_tests() {
    echo "‚ö° –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤..."
    pytest tests/ \
        -n auto \
        --tb=short \
        -v \
        "$@"
}

# –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞
case "$MODE" in
    unit)
        run_unit_tests "${@:2}"
        ;;
    integration)
        run_integration_tests "${@:2}"
        ;;
    all)
        run_all_tests "${@:2}"
        ;;
    coverage)
        run_with_coverage "${@:2}"
        ;;
    fast)
        run_fast_tests "${@:2}"
        ;;
    *)
        echo "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º: $MODE"
        echo ""
        echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã:"
        echo "  unit        - Unit —Ç–µ—Å—Ç—ã (–±—ã—Å—Ç—Ä–æ)"
        echo "  integration - Integration —Ç–µ—Å—Ç—ã (—Ç—Ä–µ–±—É—é—Ç —Å–µ—Ä–≤–∏—Å—ã)"
        echo "  all         - –í—Å–µ —Ç–µ—Å—Ç—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"
        echo "  coverage    - –° coverage –æ—Ç—á–µ—Ç–æ–º"
        echo "  fast        - –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫"
        echo ""
        echo "–ü—Ä–∏–º–µ—Ä—ã:"
        echo "  ./tests/run_tests.sh unit"
        echo "  ./tests/run_tests.sh coverage"
        echo "  ./tests/run_tests.sh all -k test_auth"
        exit 1
        ;;
esac

echo ""
echo "============================================"
echo "‚úÖ –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã"
echo "============================================"

