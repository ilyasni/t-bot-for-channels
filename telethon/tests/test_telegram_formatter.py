"""
–¢–µ—Å—Ç—ã –¥–ª—è telegram_formatter –º–æ–¥—É–ª—è

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ Markdown ‚Üí HTML –¥–ª—è Telegram Bot API
"""
import pytest
from telegram_formatter import (
    format_digest_for_telegram,
    format_mention_for_telegram,
    markdownify,
    markdown_to_html
)


class TestFormatDigest:
    """–¢–µ—Å—Ç—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤"""
    
    def test_basic_digest(self):
        """–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞"""
        digest = {
            'period': '24h',
            'message_count': 150,
            'topics': ['Python', 'AI & ML', 'DevOps (k8s)'],
            'speakers_summary': {
                'user1': '–û–±—Å—É–∂–¥–∞–ª AI',
                'user2': '–ü–æ–º–æ–≥–∞–ª —Å k8s'
            },
            'overall_summary': '–ê–∫—Ç–∏–≤–Ω–æ–µ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ AI/ML —Ç–µ–º.'
        }
        
        result = format_digest_for_telegram(digest, "Test Group")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        assert 'üìä –î–∞–π–¥–∂–µ—Å—Ç –≥—Ä—É–ø–ø—ã' in result
        assert 'Test Group' in result
        assert '24h' in result
        assert '150' in result
        assert 'Python' in result
        # HTML —ç–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç & –∫–∞–∫ &amp;
        assert 'AI &amp; ML' in result or 'AI & ML' in result
        assert 'DevOps' in result
        assert 'user1' in result or '@user1' in result
        assert 'user2' in result or '@user2' in result
        assert '–ê–∫—Ç–∏–≤–Ω–æ–µ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ' in result
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º HTML —Ç–µ–≥–∏
        assert '<b>' in result
        
    def test_digest_with_special_chars(self):
        """–¢–µ—Å—Ç —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤ –≤ –¥–∞–π–¥–∂–µ—Å—Ç–µ"""
        digest = {
            'period': 'last_24h',
            'message_count': 100,
            'topics': ['Test_topic', 'Another*topic', '[Important]'],
            'speakers_summary': {
                'user_1': '–ü–∏—Å–∞–ª –ø—Ä–æ Python (asyncio)',
                'user*2': '–û–±—Å—É–∂–¥–∞–ª [–≤–æ–ø—Ä–æ—Å—ã]'
            },
            'overall_summary': 'Summary with _underscores_ and *asterisks*'
        }
        
        result = format_digest_for_telegram(digest, "Test_Group")
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        # telegramify-markdown –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã
        assert result is not None
        assert len(result) > 0
        
    def test_empty_digest(self):
        """–¢–µ—Å—Ç —Å –ø—É—Å—Ç—ã–º –¥–∞–π–¥–∂–µ—Å—Ç–æ–º"""
        digest = {
            'period': 'N/A',
            'message_count': 0,
            'topics': [],
            'speakers_summary': {},
            'overall_summary': ''
        }
        
        result = format_digest_for_telegram(digest, "Empty Group")
        
        # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ö–æ—Ç—è –±—ã –∑–∞–≥–æ–ª–æ–≤–æ–∫
        assert 'üìä –î–∞–π–¥–∂–µ—Å—Ç –≥—Ä—É–ø–ø—ã' in result
        assert 'Empty Group' in result
        assert '0' in result
        
    def test_digest_with_cyrillic(self):
        """–¢–µ—Å—Ç —Å –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π"""
        digest = {
            'period': '–ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞',
            'message_count': 42,
            'topics': ['–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞', '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', 'DevOps'],
            'speakers_summary': {
                '–∏–≤–∞–Ω': '–ü–æ–º–æ–≥–∞–ª —Å –±–∞–≥–∞–º–∏',
                '–º–∞—Ä–∏—è': '–ü–∏—Å–∞–ª–∞ —Ç–µ—Å—Ç—ã'
            },
            'overall_summary': '–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–π –¥–µ–Ω—å!'
        }
        
        result = format_digest_for_telegram(digest, "–†—É—Å—Å–∫–∞—è –ì—Ä—É–ø–ø–∞")
        
        assert '–†—É—Å—Å–∫–∞—è –ì—Ä—É–ø–ø–∞' in result
        assert '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞' in result
        assert '–∏–≤–∞–Ω' in result or '@–∏–≤–∞–Ω' in result
        assert '–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–π –¥–µ–Ω—å' in result


class TestFormatMention:
    """–¢–µ—Å—Ç—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    
    def test_urgent_mention(self):
        """–¢–µ—Å—Ç —Å—Ä–æ—á–Ω–æ–≥–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
        analysis = {
            'urgency': 'urgent',
            'context': '–û–±—Å—É–∂–¥–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –±–∞–≥–∞',
            'mention_reason': '–ù—É–∂–Ω–∞ —Å—Ä–æ—á–Ω–∞—è –ø–æ–º–æ—â—å',
            'key_points': ['–ë–∞–≥ –≤ prod', '–í–ª–∏—è–µ—Ç –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π']
        }
        
        result = format_mention_for_telegram(
            analysis,
            "Dev Chat",
            "https://t.me/c/123/456"
        )
        
        assert 'üî¥' in result  # –ö—Ä–∞—Å–Ω—ã–π –∫—Ä—É–∂–æ–∫ –¥–ª—è urgent
        assert 'Dev Chat' in result
        assert '–û–±—Å—É–∂–¥–µ–Ω–∏–µ' in result
        assert '—Å—Ä–æ—á–Ω–∞—è –ø–æ–º–æ—â—å' in result or '–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å' in result
        assert '–ë–∞–≥ –≤ prod' in result or 'prod' in result
        assert '–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é' in result
        assert 'URGENT' in result
        
    def test_normal_mention(self):
        """–¢–µ—Å—Ç –æ–±—ã—á–Ω–æ–≥–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
        analysis = {
            'urgency': 'normal',
            'context': '–í–æ–ø—Ä–æ—Å –ø–æ –∫–æ–¥—É',
            'mention_reason': '–ü—Ä–æ—Å—è—Ç —Å–æ–≤–µ—Ç–∞',
            'key_points': ['–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞', 'Best practices']
        }
        
        result = format_mention_for_telegram(
            analysis,
            "Tech Talk",
            None  # –ë–µ–∑ —Å—Å—ã–ª–∫–∏
        )
        
        assert 'üü¢' in result  # –ó–µ–ª–µ–Ω—ã–π –∫—Ä—É–∂–æ–∫ –¥–ª—è normal
        assert 'Tech Talk' in result
        assert '–í–æ–ø—Ä–æ—Å' in result
        assert '—Å–æ–≤–µ—Ç–∞' in result or '–ü—Ä–æ—Å—è—Ç' in result
        assert '–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é' not in result  # –°—Å—ã–ª–∫–∏ –Ω–µ—Ç
        
    def test_important_mention(self):
        """–¢–µ—Å—Ç –≤–∞–∂–Ω–æ–≥–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
        analysis = {
            'urgency': 'important',
            'context': '–¢—Ä–µ–±—É–µ—Ç—Å—è review',
            'mention_reason': 'Pull request –≥–æ—Ç–æ–≤',
            'key_points': []
        }
        
        result = format_mention_for_telegram(
            analysis,
            "Code Review",
            "https://t.me/c/789/012"
        )
        
        assert 'üü°' in result  # –ñ–µ–ª—Ç—ã–π –∫—Ä—É–∂–æ–∫ –¥–ª—è important
        assert 'Code Review' in result
        assert 'IMPORTANT' in result


class TestMarkdownToHTML:
    """–¢–µ—Å—Ç—ã –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ Markdown ‚Üí HTML"""
    
    def test_headers(self):
        """–¢–µ—Å—Ç –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤"""
        text = "## –ó–∞–≥–æ–ª–æ–≤–æ–∫\n### –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫"
        result = markdown_to_html(text)
        
        assert '<b>–ó–∞–≥–æ–ª–æ–≤–æ–∫</b>' in result
        assert '<b>–ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫</b>' in result
        
    def test_bold_text(self):
        """–¢–µ—Å—Ç –∂–∏—Ä–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
        text = "**–∂–∏—Ä–Ω—ã–π** –æ–±—ã—á–Ω—ã–π **–µ—â–µ –∂–∏—Ä–Ω—ã–π**"
        result = markdown_to_html(text)
        
        assert '<b>–∂–∏—Ä–Ω—ã–π</b>' in result
        assert '<b>–µ—â–µ –∂–∏—Ä–Ω—ã–π</b>' in result
        
    def test_italic_text(self):
        """–¢–µ—Å—Ç –∫—É—Ä—Å–∏–≤–∞"""
        text = "*–∫—É—Ä—Å–∏–≤* –æ–±—ã—á–Ω—ã–π"
        result = markdown_to_html(text)
        
        assert '<i>–∫—É—Ä—Å–∏–≤</i>' in result
        
    def test_code(self):
        """–¢–µ—Å—Ç inline –∫–æ–¥–∞"""
        text = "–ö–æ–¥: `print('hello')`"
        result = markdown_to_html(text)
        
        assert '<code>print(&#x27;hello&#x27;)</code>' in result or '<code>' in result
        
    def test_lists(self):
        """–¢–µ—Å—Ç —Å–ø–∏—Å–∫–æ–≤"""
        text = "- –≠–ª–µ–º–µ–Ω—Ç 1\n- –≠–ª–µ–º–µ–Ω—Ç 2"
        result = markdown_to_html(text)
        
        assert '‚Ä¢ –≠–ª–µ–º–µ–Ω—Ç 1' in result
        assert '‚Ä¢ –≠–ª–µ–º–µ–Ω—Ç 2' in result
        
    def test_separator(self):
        """–¢–µ—Å—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π"""
        text = "–¢–µ–∫—Å—Ç\n---\n–ï—â–µ —Ç–µ–∫—Å—Ç"
        result = markdown_to_html(text)
        
        assert '‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ' in result
        
    def test_html_escaping(self):
        """–¢–µ—Å—Ç —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è HTML —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤"""
        text = "5 < 10 & 10 > 5"
        result = markdown_to_html(text)
        
        assert '&lt;' in result
        assert '&gt;' in result
        assert '&amp;' in result
        
    def test_links(self):
        """–¢–µ—Å—Ç —Å—Å—ã–ª–æ–∫"""
        text = "[Google](https://google.com)"
        result = markdown_to_html(text)
        
        assert '<a href="https://google.com">Google</a>' in result


class TestMarkdownify:
    """–¢–µ—Å—Ç—ã —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ markdownify"""
    
    def test_plain_text(self):
        """–¢–µ—Å—Ç —Å –æ–±—ã—á–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º"""
        text = "Hello, World!"
        result = markdownify(text)
        
        assert result is not None
        assert 'Hello' in result
        assert 'World' in result
        
    def test_text_with_special_chars(self):
        """–¢–µ—Å—Ç —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤"""
        text = "Test_with*special[chars](link) and more_symbols"
        result = markdownify(text)
        
        # telegramify-markdown –¥–æ–ª–∂–Ω–∞ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        assert result is not None
        assert len(result) >= len(text)  # –° —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –±—É–¥–µ—Ç –¥–ª–∏–Ω–Ω–µ–µ
        
    def test_empty_string(self):
        """–¢–µ—Å—Ç —Å –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π"""
        result = markdownify("")
        assert result == ""
        
    def test_none_value(self):
        """–¢–µ—Å—Ç —Å None"""
        result = markdownify(None)
        assert result is None
        
    def test_markdown_formatting(self):
        """–¢–µ—Å—Ç —Å Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        text = """
# –ó–∞–≥–æ–ª–æ–≤–æ–∫
**–ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç**
*–ö—É—Ä—Å–∏–≤*
`–∫–æ–¥`
        """
        result = markdownify(text)
        
        assert result is not None
        assert len(result) > 0
        # –ü–æ—Å–ª–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å—Å—è —ç–ª–µ–º–µ–Ω—Ç—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        
    def test_cyrillic_text(self):
        """–¢–µ—Å—Ç —Å –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π"""
        text = "–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä! –≠—Ç–æ —Ç–µ—Å—Ç_—Å_–ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è–º–∏."
        result = markdownify(text)
        
        assert result is not None
        assert '–ü—Ä–∏–≤–µ—Ç' in result
        assert '–º–∏—Ä' in result
        
    def test_long_text(self):
        """–¢–µ—Å—Ç —Å –¥–ª–∏–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º"""
        text = "A" * 1000 + "_test_" + "B" * 1000
        result = markdownify(text)
        
        assert result is not None
        assert len(result) > 0


class TestIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã"""
    
    def test_digest_output_is_string(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –¥–∞–π–¥–∂–µ—Å—Ç –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É"""
        digest = {
            'period': 'test',
            'message_count': 1,
            'topics': ['test'],
            'speakers_summary': {},
            'overall_summary': ''
        }
        
        result = format_digest_for_telegram(digest, "Test")
        
        assert isinstance(result, str)
        assert len(result) > 0
        
    def test_mention_output_is_string(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É"""
        analysis = {
            'urgency': 'normal',
            'context': 'test',
            'mention_reason': 'test',
            'key_points': []
        }
        
        result = format_mention_for_telegram(analysis, "Test")
        
        assert isinstance(result, str)
        assert len(result) > 0
        
    def test_markdownify_output_is_string(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ markdownify –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É"""
        result = markdownify("test")
        
        assert isinstance(result, str)

