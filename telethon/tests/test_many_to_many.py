#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Many-to-Many –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
1. –°–æ–∑–¥–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
2. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫ –æ–¥–Ω–æ–º—É –∫–∞–Ω–∞–ª—É
3. –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫
4. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ –±–µ–∑ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
"""

import pytest
import sys
import os
from datetime import datetime, timezone

sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from models import User, Channel, Post
import logging

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


@pytest.mark.unit
@pytest.mark.unit
def test_channel_creation(db):
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤"""
    logger.info("\n" + "="*60)
    logger.info("–¢–ï–°–¢ 1: –°–æ–∑–¥–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤")
    logger.info("="*60)
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤—ã–π –∫–∞–Ω–∞–ª
        channel1 = Channel.get_or_create(db, "test_channel", 12345, "Test Channel")
        db.commit()
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –∫–∞–Ω–∞–ª: @{channel1.channel_username} (ID: {channel1.id})")
        
        # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å —Ç–æ—Ç –∂–µ –∫–∞–Ω–∞–ª —Å–Ω–æ–≤–∞
        channel2 = Channel.get_or_create(db, "test_channel", 12345, "Test Channel")
        db.commit()
        
        # –î–æ–ª–∂–Ω—ã –ø–æ–ª—É—á–∏—Ç—å —Ç–æ—Ç –∂–µ –æ–±—ä–µ–∫—Ç
        assert channel1.id == channel2.id, "–ö–∞–Ω–∞–ª—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏!"
        logger.info(f"‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –≤–µ—Ä–Ω—É–ª–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–∞–Ω–∞–ª (ID: {channel2.id})")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
        channels_count = db.query(Channel).filter(
            Channel.channel_username == "test_channel"
        ).count()
        assert channels_count == 1, f"–î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–æ–ª—å–∫–æ 1 –∫–∞–Ω–∞–ª, –Ω–∞–π–¥–µ–Ω–æ: {channels_count}"
        logger.info(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω–∞: {channels_count} –∫–∞–Ω–∞–ª")
        
        return channel1
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {str(e)}")
        db.rollback()
        raise


@pytest.mark.unit
@pytest.mark.unit
def test_user_subscriptions(db):
    """–¢–µ—Å—Ç –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    logger.info("\n" + "="*60)
    logger.info("–¢–ï–°–¢ 2: –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –æ–¥–∏–Ω –∫–∞–Ω–∞–ª")
    logger.info("="*60)
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        user1 = db.query(User).filter(User.telegram_id == 999001).first()
        if not user1:
            user1 = User(
                telegram_id=999001,
                username="test_user_1",
                first_name="Test",
                last_name="User 1"
            )
            db.add(user1)
            db.commit()
        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 1: {user1.telegram_id}")
        
        user2 = db.query(User).filter(User.telegram_id == 999002).first()
        if not user2:
            user2 = User(
                telegram_id=999002,
                username="test_user_2",
                first_name="Test",
                last_name="User 2"
            )
            db.add(user2)
            db.commit()
        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 2: {user2.telegram_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç–µ—Å—Ç–∞
        channel = db.query(Channel).filter(
            Channel.channel_username == "test_channel"
        ).first()
        
        if not channel:
            channel = Channel.get_or_create(db, "test_channel", 12345, "Test Channel")
            db.commit()
        
        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 1
        channel.add_user(db, user1, is_active=True)
        db.commit()
        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 1 –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª @{channel.channel_username}")
        
        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 2
        channel.add_user(db, user2, is_active=True)
        db.commit()
        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 2 –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª @{channel.channel_username}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        db.refresh(channel)
        subscribers_count = len(channel.users)
        logger.info(f"üìä –í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {subscribers_count}")
        assert subscribers_count == 2, f"–î–æ–ª–∂–Ω–æ –±—ã—Ç—å 2 –ø–æ–¥–ø–∏—Å—á–∏–∫–∞, –Ω–∞–π–¥–µ–Ω–æ: {subscribers_count}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞–Ω–∞–ª—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        user1_channels = user1.get_active_channels(db)
        user2_channels = user2.get_active_channels(db)
        
        assert len(user1_channels) >= 1, "–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 1 –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–∞–Ω–∞–ª"
        assert len(user2_channels) >= 1, "–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 2 –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–∞–Ω–∞–ª"
        logger.info(f"‚úÖ –ö–∞–Ω–∞–ª—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ
        sub1 = channel.get_user_subscription(db, user1)
        sub2 = channel.get_user_subscription(db, user2)
        
        assert sub1 is not None, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 1 –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        assert sub2 is not None, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 2 –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        assert sub1['is_active'] == True, "–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 1 –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–π"
        assert sub2['is_active'] == True, "–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 2 –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–π"
        logger.info(f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        
        return channel, user1, user2
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {str(e)}")
        db.rollback()
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        db.rollback()
        raise


# finally —É–¥–∞–ª–µ–Ω - db —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è pytest fixture


@pytest.mark.unit
def test_subscription_removal(db):
    """–¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫"""
    logger.info("\n" + "="*60)
    logger.info("–¢–ï–°–¢ 3: –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫")
    logger.info("="*60)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç–µ—Å—Ç–∞
        channel = db.query(Channel).filter(
            Channel.channel_username == "test_channel"
        ).first()
        user1 = db.query(User).filter(User.telegram_id == 999001).first()
        user2 = db.query(User).filter(User.telegram_id == 999002).first()
        
        if not channel or not user1 or not user2:
            logger.warning("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ç–µ—Å—Ç–æ–≤, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return
        
        initial_subscribers = len(channel.users)
        logger.info(f"üìä –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {initial_subscribers}")
        
        # –û—Ç–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 1
        channel.remove_user(db, user1)
        db.commit()
        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 1 –æ—Ç–ø–∏—Å–∞–Ω –æ—Ç –∫–∞–Ω–∞–ª–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–¥–ø–∏—Å—á–∏–∫ —É–¥–∞–ª–µ–Ω
        db.refresh(channel)
        remaining_subscribers = len(channel.users)
        logger.info(f"üìä –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {remaining_subscribers}")
        assert remaining_subscribers == initial_subscribers - 1, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–æ–ª–∂–Ω–æ —É–º–µ–Ω—å—à–∏—Ç—å—Å—è"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞–Ω–∞–ª –ù–ï —É–¥–∞–ª–µ–Ω (–µ—Å—Ç—å –¥—Ä—É–≥–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏)
        channel_exists = db.query(Channel).filter(Channel.id == channel.id).first()
        assert channel_exists is not None, "–ö–∞–Ω–∞–ª –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–¥–∞–ª–µ–Ω, –ø–æ–∫–∞ –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–∏"
        logger.info(f"‚úÖ –ö–∞–Ω–∞–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω (–µ—Å—Ç—å –¥—Ä—É–≥–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏)")
        
        # –û—Ç–ø–∏—Å—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        channel.remove_user(db, user2)
        db.commit()
        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 2 –æ—Ç–ø–∏—Å–∞–Ω –æ—Ç –∫–∞–Ω–∞–ª–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª
        db.refresh(channel)
        if not channel.users:
            channel_id = channel.id
            db.delete(channel)
            db.commit()
            logger.info(f"‚úÖ –ö–∞–Ω–∞–ª —É–¥–∞–ª–µ–Ω (–Ω–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤)")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞–Ω–∞–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–µ–Ω
            channel_exists = db.query(Channel).filter(Channel.id == channel_id).first()
            assert channel_exists is None, "–ö–∞–Ω–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–¥–∞–ª–µ–Ω"
            logger.info(f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: –∫–∞–Ω–∞–ª —É–¥–∞–ª–µ–Ω –∏–∑ –ë–î")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {str(e)}")
        db.rollback()
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        db.rollback()
        raise


# finally —É–¥–∞–ª–µ–Ω - db —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è pytest fixture


@pytest.mark.unit
def test_subscription_update(db):
    """–¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–¥–ø–∏—Å–∫–∏"""
    logger.info("\n" + "="*60)
    logger.info("–¢–ï–°–¢ 4: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–¥–ø–∏—Å–∫–∏")
    logger.info("="*60)
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        user = db.query(User).filter(User.telegram_id == 999003).first()
        if not user:
            user = User(
                telegram_id=999003,
                username="test_user_3",
                first_name="Test",
                last_name="User 3"
            )
            db.add(user)
            db.commit()
        
        channel = Channel.get_or_create(db, "test_channel_2", 54321, "Test Channel 2")
        channel.add_user(db, user, is_active=True)
        db.commit()
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –∫–∞–Ω–∞–ª @{channel.channel_username} —Å –ø–æ–¥–ø–∏—Å–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
        sub = channel.get_user_subscription(db, user)
        logger.info(f"üìä –ò–∑–Ω–∞—á–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:")
        logger.info(f"   - is_active: {sub['is_active']}")
        logger.info(f"   - last_parsed_at: {sub['last_parsed_at']}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        new_parsed_time = datetime.now(timezone.utc)
        channel.update_user_subscription(
            db, user,
            is_active=False,
            last_parsed_at=new_parsed_time
        )
        db.commit()
        logger.info(f"‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–ø–∏—Å–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        sub_updated = channel.get_user_subscription(db, user)
        logger.info(f"üìä –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:")
        logger.info(f"   - is_active: {sub_updated['is_active']}")
        logger.info(f"   - last_parsed_at: {sub_updated['last_parsed_at']}")
        
        assert sub_updated['is_active'] == False, "is_active –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å False"
        assert sub_updated['last_parsed_at'] is not None, "last_parsed_at –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        logger.info(f"‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        # –û—á–∏—Å—Ç–∫–∞
        channel.remove_user(db, user)
        if not channel.users:
            db.delete(channel)
        db.commit()
        logger.info(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {str(e)}")
        db.rollback()
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        db.rollback()
        raise


# finally —É–¥–∞–ª–µ–Ω - db —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è pytest fixture


@pytest.mark.unit
def test_user_methods(db):
    """–¢–µ—Å—Ç –º–µ—Ç–æ–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞–Ω–∞–ª–∞–º–∏"""
    logger.info("\n" + "="*60)
    logger.info("–¢–ï–°–¢ 5: –ú–µ—Ç–æ–¥—ã User –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞–Ω–∞–ª–∞–º–∏")
    logger.info("="*60)
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = db.query(User).filter(User.telegram_id == 999004).first()
        if not user:
            user = User(
                telegram_id=999004,
                username="test_user_4",
                first_name="Test",
                last_name="User 4"
            )
            db.add(user)
            db.commit()
        
        # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞–Ω–∞–ª–æ–≤
        channel1 = Channel.get_or_create(db, "test_ch_1", 111, "Channel 1")
        channel2 = Channel.get_or_create(db, "test_ch_2", 222, "Channel 2")
        channel3 = Channel.get_or_create(db, "test_ch_3", 333, "Channel 3")
        
        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –Ω–∞ –∫–∞–Ω–∞–ª—ã
        channel1.add_user(db, user, is_active=True)
        channel2.add_user(db, user, is_active=True)
        channel3.add_user(db, user, is_active=False)  # –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π
        db.commit()
        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ 3 –∫–∞–Ω–∞–ª–∞ (2 –∞–∫—Ç–∏–≤–Ω—ã—Ö, 1 –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π)")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º get_active_channels
        active_channels = user.get_active_channels(db)
        logger.info(f"üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: {len(active_channels)}")
        assert len(active_channels) == 2, f"–î–æ–ª–∂–Ω–æ –±—ã—Ç—å 2 –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–∞, –Ω–∞–π–¥–µ–Ω–æ: {len(active_channels)}"
        logger.info(f"‚úÖ get_active_channels() —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º get_all_channels
        all_channels = user.get_all_channels(db)
        logger.info(f"üìä –í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤: {len(all_channels)}")
        assert len(all_channels) == 3, f"–î–æ–ª–∂–Ω–æ –±—ã—Ç—å 3 –∫–∞–Ω–∞–ª–∞, –Ω–∞–π–¥–µ–Ω–æ: {len(all_channels)}"
        
        for channel, sub_info in all_channels:
            logger.info(f"   - @{channel.channel_username}: active={sub_info['is_active']}")
        
        logger.info(f"‚úÖ get_all_channels() —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        # –û—á–∏—Å—Ç–∫–∞
        for channel in [channel1, channel2, channel3]:
            channel.remove_user(db, user)
            if not channel.users:
                db.delete(channel)
        db.commit()
        logger.info(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {str(e)}")
        db.rollback()
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        db.rollback()
        raise


# finally —É–¥–∞–ª–µ–Ω - db —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è pytest fixture


def cleanup_test_data():
    """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    logger.info("\n" + "="*60)
    logger.info("–û–ß–ò–°–¢–ö–ê: –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    logger.info("="*60)
    
    try:
        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        test_users = db.query(User).filter(
            User.telegram_id.in_([999001, 999002, 999003, 999004])
        ).all()
        
        for user in test_users:
            # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø–∏—Å—ã–≤–∞–µ–º –æ—Ç –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤
            channels = user.get_all_channels(db)
            for channel, _ in channels:
                channel.remove_user(db, user)
                # –ï—Å–ª–∏ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤, —É–¥–∞–ª—è–µ–º –∫–∞–Ω–∞–ª
                if not channel.users:
                    db.delete(channel)
            
            db.delete(user)
        
        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã
        test_channels = db.query(Channel).filter(
            Channel.channel_username.like("test_%")
        ).all()
        
        for channel in test_channels:
            if not channel.users:
                db.delete(channel)
        
        db.commit()
        logger.info(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(test_users)}")
        logger.info(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ –∫–∞–Ω–∞–ª–æ–≤: {len(test_channels)}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {str(e)}")
        db.rollback()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        db.rollback()
        raise


# finally —É–¥–∞–ª–µ–Ω - db —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è pytest fixture


def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    logger.info("\n" + "="*60)
    logger.info("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï MANY-TO-MANY –°–¢–†–£–ö–¢–£–†–´")
    logger.info("="*60)
    
    tests = [
        ("–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤", test_channel_creation),
        ("–ü–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", test_user_subscriptions),
        ("–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫", test_subscription_removal),
        ("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏", test_subscription_update),
        ("–ú–µ—Ç–æ–¥—ã User", test_user_methods),
    ]
    
    passed = 0
    failed = 0
    
    for test_name, test_func in tests:
        try:
            test_func()
            passed += 1
        except Exception as e:
            logger.error(f"‚ùå –¢–µ—Å—Ç '{test_name}' –ø—Ä–æ–≤–∞–ª–µ–Ω: {str(e)}")
            failed += 1
    
    # –û—á–∏—Å—Ç–∫–∞
    cleanup_test_data()
    
    # –ò—Ç–æ–≥–∏
    logger.info("\n" + "="*60)
    logger.info("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    logger.info("="*60)
    logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {passed}")
    logger.info(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed}")
    logger.info(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(passed/(passed+failed)*100):.1f}%")
    logger.info("="*60)
    
    if failed == 0:
        logger.info("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
        return 0
    else:
        logger.error("‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´")
        return 1


if __name__ == "__main__":
    sys.exit(main())

