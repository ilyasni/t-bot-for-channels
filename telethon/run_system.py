import asyncio
import threading
import uvicorn
from fastapi import FastAPI
from bot import TelegramBot
from parser_service import ParserService
from database import create_tables
import logging
import os
from dotenv import load_dotenv

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π DEBUG —Ä–µ–∂–∏–º–∞
log_level = logging.DEBUG if os.getenv('DEBUG_LOGS', 'false').lower() == 'true' else logging.INFO
logging.basicConfig(
    level=log_level,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

if os.getenv('DEBUG_LOGS', 'false').lower() == 'true':
    logger.info("üêõ DEBUG —Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω –¥–ª—è run_system.py")
    logging.getLogger('httpx').setLevel(logging.DEBUG)
else:
    # –û—Ç–∫–ª—é—á–∞–µ–º –∏–∑–±—ã—Ç–æ—á–Ω—ã–µ –ª–æ–≥–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫
    logging.getLogger('httpx').setLevel(logging.WARNING)
    logging.getLogger('telethon').setLevel(logging.WARNING)
    logging.getLogger('telegram.ext').setLevel(logging.WARNING)

class TelegramSystem:
    def __init__(self):
        self.bot = None
        self.parser_service = None
        self.group_monitor_service = None
        self.api_app = None
        self.is_running = False
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            create_tables()
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä (–º–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ä–µ–∂–∏–º)
            self.parser_service = ParserService()
            await self.parser_service.initialize()
            logger.info("‚úÖ ParserService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –º–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ä–µ–∂–∏–º–∞")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ (—Ç–µ–ø–µ—Ä—å –≤ —Ç–æ–º –∂–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ!)
            self.bot = TelegramBot()
            logger.info("‚úÖ TelegramBot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Group Monitor Service
            from group_monitor_service import group_monitor_service
            self.group_monitor_service = group_monitor_service
            logger.info("‚úÖ GroupMonitorService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã: {str(e)}")
            return False
    
    async def start_bot(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ (async)"""
        try:
            logger.info("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ async —Ä–µ–∂–∏–º–µ
            await self.bot.run_async()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {str(e)}")
    
    async def start_parser(self):
        """–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞"""
        try:
            interval = int(os.getenv("PARSER_INTERVAL_MINUTES", 30))
            logger.info(f"üîÑ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º {interval} –º–∏–Ω—É—Ç...")
            await self.parser_service.start_scheduler(interval)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞: {str(e)}")
    
    async def start_group_monitor(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≥—Ä—É–ø–ø"""
        try:
            # –ó–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –¥–∞—Ç—å –±–æ—Ç—É –∏ –ø–∞—Ä—Å–µ—Ä—É –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
            await asyncio.sleep(5)
            
            logger.info("üëÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≥—Ä—É–ø–ø...")
            monitors_started = await self.group_monitor_service.start_all_monitors()
            logger.info(f"‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω –¥–ª—è {monitors_started} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≥—Ä—É–ø–ø: {str(e)}")
    
    def start_api(self, main_loop):
        """
        –ó–∞–ø—É—Å–∫ API —Å–µ—Ä–≤–µ—Ä–∞
        
        Args:
            main_loop: –ì–ª–∞–≤–Ω—ã–π event loop –≥–¥–µ —Ä–∞–±–æ—Ç–∞—é—Ç Telethon –∫–ª–∏–µ–Ω—Ç—ã
        """
        try:
            import main
            
            # –ö–†–ò–¢–ò–ß–ù–û: –ü–µ—Ä–µ–¥–∞–µ–º parser_service –ò –≥–ª–∞–≤–Ω—ã–π event loop –≤ API
            # API —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ (uvicorn), –Ω–æ –¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∏ –≤ –≥–ª–∞–≤–Ω—ã–π loop
            # –≥–¥–µ –∂–∏–≤—É—Ç Telethon –∫–ª–∏–µ–Ω—Ç—ã (Context7 best practices)
            main.global_parser_service = self.parser_service
            main.main_event_loop = main_loop
            logger.info("‚úÖ ParserService –∏ –≥–ª–∞–≤–Ω—ã–π event loop –ø–µ—Ä–µ–¥–∞–Ω—ã –≤ API")
            logger.info(f"   Main event loop ID: {id(main_loop)}")
            
            host = os.getenv("HOST", "0.0.0.0")
            port = int(os.getenv("PORT", 8010))
            
            logger.info(f"üåê –ó–∞–ø—É—Å–∫ API —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ {host}:{port}...")
            uvicorn.run(main.app, host=host, port=port)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ API: {str(e)}")
    
    def start_auth_server(self):
        """–ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        try:
            from auth_web_server import app as auth_app
            
            logger.info("üîê –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–∞ 0.0.0.0:8001...")
            uvicorn.run(auth_app, host="0.0.0.0", port=8001, log_level="info")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {str(e)}")
    
    async def start_all(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã"""
        if not await self.initialize():
            return
        
        self.is_running = True
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ async task (—Ç–µ–ø–µ—Ä—å –≤ —Ç–æ–º –∂–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ!)
        asyncio.create_task(self.start_bot())
        logger.info("ü§ñ Telegram Bot –∑–∞–ø—É—â–µ–Ω –≤ async task")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º Group Monitor –≤ async task
        asyncio.create_task(self.start_group_monitor())
        logger.info("üëÄ Group Monitor –∑–∞–ø—É—â–µ–Ω –≤ async task")
        
        # –ö–†–ò–¢–ò–ß–ù–û: –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π event loop (–≥–ª–∞–≤–Ω—ã–π loop –≥–¥–µ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–ª–∏–µ–Ω—Ç—ã)
        main_loop = asyncio.get_running_loop()
        logger.info(f"üîÑ –ì–ª–∞–≤–Ω—ã–π event loop ID: {id(main_loop)}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º API –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, –ø–µ—Ä–µ–¥–∞–µ–º –≥–ª–∞–≤–Ω—ã–π loop
        # API –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ–±—Ä–∞—Ç–Ω–æ –≤ —ç—Ç–æ—Ç loop —á–µ—Ä–µ–∑ run_coroutine_threadsafe
        api_thread = threading.Thread(target=self.start_api, args=(main_loop,), daemon=True)
        api_thread.start()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        auth_thread = threading.Thread(target=self.start_auth_server, daemon=True)
        auth_thread.start()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–µ—Ä –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        await self.start_parser()
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
        self.is_running = False
        if self.parser_service:
            self.parser_service.stop()
        if self.group_monitor_service:
            asyncio.create_task(self.group_monitor_service.stop_all_monitors())
        logger.info("üõë –°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    system = TelegramSystem()
    
    try:
        await system.start_all()
    except KeyboardInterrupt:
        logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
        system.stop()
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        system.stop()


if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ Telegram Channel Parser System (–ú–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ä–µ–∂–∏–º)...")
    print("=" * 70)
    print("üìã –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã:")
    print("  ü§ñ Telegram Bot - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏ –∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    print("  üîÑ Parser Service - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    print("  üåê API Server - REST API –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å n8n")
    print("  üîê Auth Web Server - –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –≤–µ–±-–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è")
    print("  üíæ Database - —Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–∞–Ω–∞–ª–æ–≤ –∏ –ø–æ—Å—Ç–æ–≤")
    print("  üîê User Auth Manager - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º–∏ –∫–ª–∏–µ–Ω—Ç–∞–º–∏")
    print("=" * 70)
    print("üîê –ö–∞–∂–¥—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Å–≤–æ–∏ API –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –±–æ—Ç–∞")
    print("üì± –ü–∞—Ä—Å–∏–Ω–≥ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º–∏ –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    print("=" * 70)
    
    # –ö–†–ò–¢–ò–ß–ù–û (Context7 best practices):
    # asyncio.run() –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –¢–û–õ–¨–ö–û –û–î–ò–ù –†–ê–ó - —ç—Ç–æ —Å–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω—ã–π event loop
    # –í—Å–µ Telethon –∫–ª–∏–µ–Ω—Ç—ã –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤–Ω—É—Ç—Ä–∏ —ç—Ç–æ–≥–æ loop
    # –°–æ–≥–ª–∞—Å–Ω–æ Telethon docs: "Only one call to asyncio.run() is needed for the entire application"
    asyncio.run(main()) 