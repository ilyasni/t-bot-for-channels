"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ /login

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç ConversationHandler –¥–ª—è multi-step –ø—Ä–æ—Ü–µ—Å—Å–∞:
1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–≤–∞–π—Ç –∫–æ–¥–∞
2. –í–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
3. –í–≤–æ–¥ SMS –∫–æ–¥–∞
4. (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –í–≤–æ–¥ 2FA –ø–∞—Ä–æ–ª—è
"""

import logging
from datetime import datetime, timedelta, timezone
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ContextTypes, ConversationHandler, CommandHandler, 
    MessageHandler, filters
)

from database import SessionLocal
from models import User, InviteCode, SubscriptionHistory
from shared_auth_manager import shared_auth_manager
from subscription_config import get_subscription_info, format_subscription_info

logger = logging.getLogger(__name__)

# States –¥–ª—è ConversationHandler
PHONE, CODE, TWO_FA = range(3)


async def login_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    –ö–æ–º–∞–Ω–¥–∞: /login INVITE_CODE
    """
    user = update.effective_user
    args = context.args
    
    if not args or len(args) < 1:
        await update.message.reply_text(
            "üìù **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** `/login INVITE_CODE`\n\n"
            "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω–≤–∞–π—Ç –∫–æ–¥–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n\n"
            "üí° –ï—Å–ª–∏ —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é: /auth",
            parse_mode='Markdown'
        )
        return ConversationHandler.END
    
    invite_code = args[0].upper()
    db = SessionLocal()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db_user = db.query(User).filter(User.telegram_id == user.id).first()
        
        if not db_user:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            db_user = User(
                telegram_id=user.id,
                username=user.username,
                first_name=user.first_name,
                last_name=user.last_name
            )
            db.add(db_user)
            db.commit()
            db.refresh(db_user)
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.first_name} ({user.id})")
        
        if db_user.is_authenticated:
            await update.message.reply_text(
                "‚úÖ –í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                "‚Ä¢ /my_channels - –≤–∞—à–∏ –∫–∞–Ω–∞–ª—ã\n"
                "‚Ä¢ /subscription - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ"
            )
            return ConversationHandler.END
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–≤–∞–π—Ç –∫–æ–¥
        invite = db.query(InviteCode).filter(InviteCode.code == invite_code).first()
        
        if not invite:
            await update.message.reply_text("‚ùå –ò–Ω–≤–∞–π—Ç –∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return ConversationHandler.END
        
        if not invite.is_valid():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏—á–∏–Ω—É –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            now = datetime.now(timezone.utc)
            expires = invite.expires_at
            
            # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ expires_at timezone-aware
            if expires and expires.tzinfo is None:
                expires = expires.replace(tzinfo=timezone.utc)
            
            reason = "–∏—Å—Ç–µ–∫ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è" if (expires and now > expires) else "–∏—Å—á–µ—Ä–ø–∞–Ω –ª–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π"
            await update.message.reply_text(f"‚ùå –ò–Ω–≤–∞–π—Ç –∫–æ–¥ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω: {reason}")
            return ConversationHandler.END
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–≤–∞–π—Ç –∫–æ–¥ –≤ context
        context.user_data['invite_code'] = invite_code
        context.user_data['invite_subscription'] = invite.default_subscription
        context.user_data['invite_trial_days'] = invite.default_trial_days
        
        subscription_info = get_subscription_info(invite.default_subscription)
        
        await update.message.reply_text(
            f"‚úÖ –ò–Ω–≤–∞–π—Ç –∫–æ–¥ –ø—Ä–∏–Ω—è—Ç!\n\n"
            f"üéÅ –í–∞–º –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞: **{subscription_info['name']}**\n\n"
            f"üì± –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            f"–ü—Ä–∏–º–µ—Ä: `+79991234567`",
            parse_mode='Markdown'
        )
        
        return PHONE
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ login_start: {e}")
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        return ConversationHandler.END
    finally:
        db.close()


async def phone_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º SMS –∫–æ–¥"""
    phone = update.message.text.strip()
    telegram_id = update.effective_user.id
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –Ω–æ–º–µ—Ä–∞
    if not phone.startswith('+') or len(phone) < 10:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: `+79991234567`",
            parse_mode='Markdown'
        )
        return PHONE
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä
    context.user_data['phone'] = phone
    context.user_data['telegram_id'] = telegram_id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è verify
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ —á–µ—Ä–µ–∑ Telethon
    await update.message.reply_text("‚è≥ –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞...")
    
    result = await shared_auth_manager.send_code(telegram_id, phone)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º phone_code_hash –µ—Å–ª–∏ –≤–µ—Ä–Ω—É–ª—Å—è
    if result.get('phone_code_hash'):
        context.user_data['phone_code_hash'] = result['phone_code_hash']
        logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω phone_code_hash –¥–ª—è {telegram_id}")
    
    if result['success']:
        if result.get('already_authorized'):
            await update.message.reply_text(
                "‚úÖ –í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã —Å —ç—Ç–∏–º –Ω–æ–º–µ—Ä–æ–º!\n\n"
                "–ê–∫—Ç–∏–≤–∏—Ä—É—é –ø–æ–¥–ø–∏—Å–∫—É..."
            )
            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            await activate_subscription_from_invite(telegram_id, context.user_data)
            return ConversationHandler.END
        else:
            await update.message.reply_text(
                "‚úÖ SMS –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à –Ω–æ–º–µ—Ä!\n\n"
                "üí¨ –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ SMS:"
            )
            return CODE
    else:
        await update.message.reply_text(f"‚ùå {result['error']}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ /cancel")
        return PHONE


async def code_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∏–ª–∏ SMS –∫–æ–¥ - –∞–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è"""
    code = update.message.text.strip()
    telegram_id = update.effective_user.id
    phone = context.user_data.get('phone')
    
    if not phone:
        await update.message.reply_text("‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–æ–≤–∞: /login INVITE_CODE")
        return ConversationHandler.END
    
    await update.message.reply_text("‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞...")
    
    result = await shared_auth_manager.verify_code(telegram_id, phone, code)
    
    if result['success']:
        # –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è!
        await activate_subscription_from_invite(telegram_id, context.user_data)
        
        await update.message.reply_text(
            "üéâ **–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!**\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
            "‚Ä¢ /add_channel @channel_name - –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª\n"
            "‚Ä¢ /my_channels - –≤–∞—à–∏ –∫–∞–Ω–∞–ª—ã\n"
            "‚Ä¢ /subscription - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ\n"
            "‚Ä¢ /ask <–≤–æ–ø—Ä–æ—Å> - RAG –ø–æ–∏—Å–∫\n"
            "‚Ä¢ /help - —Å–ø—Ä–∞–≤–∫–∞",
            parse_mode='Markdown'
        )
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        context.user_data.clear()
        
        return ConversationHandler.END
        
    elif result.get('requires_2fa'):
        await update.message.reply_text(
            "üîê **–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è**\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å 2FA:"
        )
        return TWO_FA
    else:
        await update.message.reply_text(
            f"‚ùå {result['error']}\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ /cancel"
        )
        return CODE


async def password_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∏–ª–∏ 2FA –ø–∞—Ä–æ–ª—å"""
    password = update.message.text
    telegram_id = update.effective_user.id
    
    await update.message.reply_text("‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è...")
    
    result = await shared_auth_manager.verify_2fa(telegram_id, password)
    
    if result['success']:
        # –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è!
        await activate_subscription_from_invite(telegram_id, context.user_data)
        
        await update.message.reply_text(
            "üéâ **–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!**\n\n"
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
            "‚Ä¢ /add_channel - –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª\n"
            "‚Ä¢ /my_channels - –≤–∞—à–∏ –∫–∞–Ω–∞–ª—ã\n"
            "‚Ä¢ /subscription - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ",
            parse_mode='Markdown'
        )
        
        context.user_data.clear()
        return ConversationHandler.END
    else:
        await update.message.reply_text(
            f"‚ùå {result['error']}\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ /cancel"
        )
        return TWO_FA


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    user = update.effective_user
    
    await update.message.reply_text(
        "‚ùå –ü—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω.\n\n"
        "–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /login INVITE_CODE"
    )
    
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    context.user_data.clear()
    
    return ConversationHandler.END


async def activate_subscription_from_invite(telegram_id: int, user_data: dict):
    """–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ –∏–Ω–≤–∞–π—Ç –∫–æ–¥—É"""
    db = SessionLocal()
    
    try:
        invite_code = user_data.get('invite_code')
        subscription_type = user_data.get('invite_subscription', 'free')
        trial_days = user_data.get('invite_trial_days', 0)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = db.query(User).filter(User.telegram_id == telegram_id).first()
        if not user:
            logger.error(f"User {telegram_id} not found during subscription activation!")
            return
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–≤–∞–π—Ç –∫–æ–¥
        invite = db.query(InviteCode).filter(InviteCode.code == invite_code).first()
        if invite and invite.is_valid():
            invite.use(user.id)
            user.invited_by = invite.created_by
        
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        old_type = user.subscription_type
        user.subscription_type = subscription_type
        user.subscription_started_at = datetime.now(timezone.utc)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
        if trial_days > 0:
            user.subscription_expires = datetime.now(timezone.utc) + timedelta(days=trial_days)
        elif subscription_type != "free":
            tier = get_subscription_info(subscription_type)
            user.subscription_expires = datetime.now(timezone.utc) + timedelta(days=tier.get('duration_days', 30))
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–∏–º–∏—Ç—ã
        tier = get_subscription_info(subscription_type)
        user.max_channels = tier['max_channels']
        
        db.commit()
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        history = SubscriptionHistory(
            user_id=user.id,
            action="created",
            old_type=old_type,
            new_type=subscription_type,
            changed_by=invite.created_by if invite else None,
            notes=f"Activated via invite code: {invite_code}"
        )
        db.add(history)
        db.commit()
        
        logger.info(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ {subscription_type} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è {telegram_id}: {e}")
        db.rollback()
    finally:
        db.close()


async def subscription_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ"""
    user = update.effective_user
    db = SessionLocal()
    
    try:
        db_user = db.query(User).filter(User.telegram_id == user.id).first()
        if not db_user:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
            return
        
        if not db_user.is_authenticated:
            await update.message.reply_text(
                "‚ùå –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /login INVITE_CODE"
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏
        is_active = db_user.check_subscription_active()
        tier = get_subscription_info(db_user.subscription_type)
        
        text = f"üìä **–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞**\n\n"
        text += format_subscription_info(db_user.subscription_type)
        text += f"\n\nüìç **–°—Ç–∞—Ç—É—Å:** {'‚úÖ –ê–∫—Ç–∏–≤–Ω–∞' if is_active else '‚ùå –ò—Å—Ç–µ–∫–ª–∞'}\n"
        
        if db_user.subscription_expires:
            if is_active:
                # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –¥–∞—Ç—ã timezone-aware
                expires = db_user.subscription_expires
                if expires.tzinfo is None:
                    expires = expires.replace(tzinfo=timezone.utc)
                
                days_left = (expires - datetime.now(timezone.utc)).days
                text += f"‚è∞ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_left}\n"
            else:
                text += f"‚è∞ –ò—Å—Ç–µ–∫–ª–∞: {db_user.subscription_expires.strftime('%d.%m.%Y')}\n"
        
        # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
        channels_count = len(db_user.channels)
        text += f"\nüìà **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:**\n"
        text += f"‚Ä¢ –ö–∞–Ω–∞–ª–æ–≤: {channels_count}/{db_user.max_channels}\n"
        
        # Upgrade –æ–ø—Ü–∏–∏
        if db_user.subscription_type in ["free", "trial"]:
            text += f"\nüíé –•–æ—Ç–∏—Ç–µ –±–æ–ª—å—à–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π?\n"
            text += f"–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è upgrade –ø–æ–¥–ø–∏—Å–∫–∏."
        
        await update.message.reply_text(text, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ subscription_command: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    finally:
        db.close()


# –°–æ–∑–¥–∞–µ–º ConversationHandler
def get_login_conversation_handler():
    """–ü–æ–ª—É—á–∏—Ç—å ConversationHandler –¥–ª—è /login"""
    return ConversationHandler(
        entry_points=[CommandHandler('login', login_start)],
        states={
            PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, phone_received)],
            CODE: [MessageHandler(filters.TEXT & ~filters.COMMAND, code_received)],
            TWO_FA: [MessageHandler(filters.TEXT & ~filters.COMMAND, password_received)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
        per_user=True,          # ‚úÖ –ö–†–ò–¢–ò–ß–ù–û: –∏–∑–æ–ª—è—Ü–∏—è –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        per_chat=False,
        name='login_conversation',  # ‚úÖ –î–ª—è persistence
        persistent=True,        # ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        allow_reentry=True      # ‚úÖ –ö–†–ò–¢–ò–ß–ù–û: –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ —Å /login
    )

