from telethon import TelegramClient
from telethon.errors import FloodWaitError, AuthKeyError, RPCError
from sqlalchemy.orm import Session
from models import User
from datetime import datetime, timezone
import os
import logging
import asyncio
import hashlib

# –≠—Ç–æ—Ç –º–æ–¥—É–ª—å —É—Å—Ç–∞—Ä–µ–ª - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ secure_auth_manager.py

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class UserAuthManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    def __init__(self):
        self.active_clients = {}  # –°–ª–æ–≤–∞—Ä—å –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ user_id
        self.sessions_dir = "sessions"
        self._ensure_sessions_dir()
    
    def _ensure_sessions_dir(self):
        """–°–æ–∑–¥–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–µ—Å—Å–∏–π –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç"""
        if not os.path.exists(self.sessions_dir):
            os.makedirs(self.sessions_dir)
    
    def _get_session_path(self, user_id: int) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return os.path.join(self.sessions_dir, f"user_{user_id}.session")
    
    def _hash_credentials(self, api_id: str, api_hash: str) -> str:
        """–°–æ–∑–¥–∞–µ—Ç —Ö–µ—à –æ—Ç —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        return hashlib.sha256(f"{api_id}_{api_hash}".encode()).hexdigest()[:16]
    
    async def create_client(self, user: User) -> TelegramClient:
        """–°–æ–∑–¥–∞–µ—Ç Telegram –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            if not user.api_id or not user.api_hash:
                raise ValueError("API_ID –∏ API_HASH –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å API_ID
            try:
                api_id = int(user.api_id)
            except ValueError:
                raise ValueError("API_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            
            # –°–æ–∑–¥–∞–µ–º –ø—É—Ç—å –∫ —Å–µ—Å—Å–∏–∏
            session_path = self._get_session_path(user.id)
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
            client = TelegramClient(
                session_path,
                api_id,
                user.api_hash,
                connection_retries=3,
                retry_delay=5,
                timeout=30,
                request_retries=3
            )
            
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}")
            return client
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}: {str(e)}")
            raise
    
    async def authenticate_user(self, user: User, phone: str = None) -> bool:
        """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            client = await self.create_client(user)
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
            await client.connect()
            
            if not client.is_connected():
                raise ConnectionError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            if await client.is_user_authorized():
                logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.telegram_id} —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
                await self._update_user_auth_status(user, True, None)
                self.active_clients[user.id] = client
                return True
            
            # –ï—Å–ª–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –Ω–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            if not phone:
                phone = user.phone_number
                
            if not phone:
                raise ValueError("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥
            await client.send_code_request(phone)
            logger.info(f"üì± –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –Ω–æ–º–µ—Ä {phone} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–≤–æ–¥–∞ –∫–æ–¥–∞
            self.active_clients[user.id] = client
            await self._update_user_auth_status(user, False, "–û–∂–∏–¥–∞–µ—Ç—Å—è –≤–≤–æ–¥ –∫–æ–¥–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
            
            return False  # –¢—Ä–µ–±—É–µ—Ç—Å—è –∫–æ–¥
            
        except FloodWaitError as e:
            error_msg = f"–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å {e.seconds} —Å–µ–∫—É–Ω–¥"
            logger.warning(f"‚è≥ {error_msg} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}")
            await self._update_user_auth_status(user, False, error_msg)
            return False
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {str(e)}"
            logger.error(f"‚ùå {error_msg} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}")
            await self._update_user_auth_status(user, False, error_msg)
            return False
    
    async def verify_code(self, user: User, code: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        try:
            if user.id not in self.active_clients:
                raise ValueError("–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∑–∞–Ω–æ–≤–æ")
            
            client = self.active_clients[user.id]
            
            if not user.phone_number:
                raise ValueError("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω")
            
            # –í–≤–æ–¥–∏–º –∫–æ–¥
            await client.sign_in(phone=user.phone_number, code=code)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å
            if await client.is_user_authorized():
                logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.telegram_id} —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
                await self._update_user_auth_status(user, True, None)
                return True
            else:
                raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
                
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞: {str(e)}"
            logger.error(f"‚ùå {error_msg} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}")
            await self._update_user_auth_status(user, False, error_msg)
            return False
    
    async def get_user_client(self, user: User) -> TelegramClient:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
            if user.id in self.active_clients:
                client = self.active_clients[user.id]
                if client.is_connected():
                    return client
                else:
                    # –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
                    await client.connect()
                    if client.is_connected():
                        return client
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç
            client = await self.create_client(user)
            await client.connect()
            
            if not client.is_connected():
                raise ConnectionError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            if not await client.is_user_authorized():
                raise ValueError("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
            
            self.active_clients[user.id] = client
            return client
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}: {str(e)}")
            raise
    
    async def check_auth_status(self, user: User) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            client = await self.get_user_client(user)
            
            if client.is_connected() and await client.is_user_authorized():
                await self._update_user_auth_status(user, True, None)
                return True
            else:
                await self._update_user_auth_status(user, False, "–ö–ª–∏–µ–Ω—Ç –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
                return False
                
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {str(e)}"
            logger.error(f"‚ùå {error_msg} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}")
            await self._update_user_auth_status(user, False, error_msg)
            return False
    
    async def logout_user(self, user: User):
        """–í—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            if user.id in self.active_clients:
                client = self.active_clients[user.id]
                if client.is_connected():
                    await client.disconnect()
                del self.active_clients[user.id]
            
            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏
            session_path = self._get_session_path(user.id)
            if os.path.exists(session_path):
                os.remove(session_path)
            
            await self._update_user_auth_status(user, False, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª –∏–∑ —Å–∏—Å—Ç–µ–º—ã")
            logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.telegram_id} –≤—ã—à–µ–ª –∏–∑ —Å–∏—Å—Ç–µ–º—ã")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}: {str(e)}")
    
    async def _update_user_auth_status(self, user: User, is_authenticated: bool, error: str = None):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ –ë–î"""
        try:
            from database import SessionLocal
            db = SessionLocal()
            
            user.is_authenticated = is_authenticated
            user.last_auth_check = datetime.now(timezone.utc)
            if error:
                user.auth_error = error
            else:
                user.auth_error = None
            
            db.commit()
            db.close()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {str(e)}")
    
    async def cleanup_inactive_clients(self):
        """–û—á–∏—Å—Ç–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤"""
        inactive_users = []
        
        for user_id, client in self.active_clients.items():
            try:
                if not client.is_connected():
                    inactive_users.append(user_id)
                else:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
                    if not await client.is_user_authorized():
                        inactive_users.append(user_id)
            except:
                inactive_users.append(user_id)
        
        for user_id in inactive_users:
            if user_id in self.active_clients:
                try:
                    await self.active_clients[user_id].disconnect()
                except:
                    pass
                del self.active_clients[user_id]
        
        if inactive_users:
            logger.info(f"üßπ –û—á–∏—â–µ–Ω–æ {len(inactive_users)} –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤")
    
    async def get_all_authenticated_users(self, db: Session) -> list:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        return db.query(User).filter(
            User.is_authenticated == True,
            User.is_active == True
        ).all()
    
    async def disconnect_all(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤"""
        for user_id, client in self.active_clients.items():
            try:
                if client.is_connected():
                    await client.disconnect()
            except:
                pass
        
        self.active_clients.clear()
        logger.info("üîå –í—Å–µ –∫–ª–∏–µ–Ω—Ç—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã")
    
    async def clear_all_sessions(self):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ —Å–µ—Å—Å–∏–π"""
        import os
        import glob
        
        try:
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã —Å–µ—Å—Å–∏–π
            session_files = glob.glob(os.path.join(self.sessions_dir, "*.session*"))
            for session_file in session_files:
                try:
                    os.remove(session_file)
                    logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏: {session_file}")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {session_file}: {str(e)}")
            
            # –û—á–∏—â–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã
            self.active_clients.clear()
            
            logger.info("üßπ –í—Å–µ —Å–µ—Å—Å–∏–∏ –æ—á–∏—â–µ–Ω—ã")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Å—Å–∏–π: {str(e)}")
            return False


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
auth_manager = UserAuthManager()
