"""
–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è Telegram

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
—Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ Telegram Bot API.

–í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML —Ñ–æ—Ä–º–∞—Ç –≤–º–µ—Å—Ç–æ MarkdownV2, —Ç–∞–∫ –∫–∞–∫:
- telegramify-markdown –ù–ï —ç–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç –¥–≤–æ–µ—Ç–æ—á–∏—è (:)
- HTML –ø—Ä–æ—â–µ –∏ –Ω–∞–¥–µ–∂–Ω–µ–µ –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
- Telegram –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç HTML
"""
from html import escape
from typing import Dict, Any
from datetime import datetime
import re


def format_digest_for_telegram(digest: Dict[str, Any], group_title: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–π–¥–∂–µ—Å—Ç –≥—Ä—É–ø–ø—ã –≤ Markdown –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
    
    Args:
        digest: –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ—Ç generate_digest()
            - period: —Å—Ç—Ä–æ–∫–∞ —Å –ø–µ—Ä–∏–æ–¥–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ø–æ—Å–ª–µ–¥–Ω–∏–µ 24—á")
            - message_count: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            - topics: —Å–ø–∏—Å–æ–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–µ–º
            - speakers_summary: —Å–ª–æ–≤–∞—Ä—å {username: summary}
            - overall_summary: –æ–±—â–µ–µ —Ä–µ–∑—é–º–µ
        group_title: –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ MarkdownV2 —Ñ–æ—Ä–º–∞—Ç–µ
    """
    
    markdown = f"""# üìä –î–∞–π–¥–∂–µ—Å—Ç –≥—Ä—É–ø–ø—ã: {group_title}

**–ü–µ—Ä–∏–æ–¥:** {digest.get('period', 'unknown')}
**–°–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ:** {digest.get('message_count', 0)}

"""
    
    # –¢–µ–º—ã
    topics = digest.get('topics', [])
    if topics:
        markdown += "## üéØ –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã:\n\n"
        for i, topic in enumerate(topics, 1):
            markdown += f"{i}. {topic}\n"
        markdown += "\n"
    
    # –°–ø–∏–∫–µ—Ä—ã
    speakers = digest.get('speakers_summary', {})
    if speakers:
        markdown += "## üë• –ê–∫—Ç–∏–≤–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏:\n\n"
        for username, summary in speakers.items():
            markdown += f"‚Ä¢ @{username}: {summary}\n"
        markdown += "\n"
    
    # –†–µ–∑—é–º–µ
    overall = digest.get('overall_summary', '')
    if overall:
        markdown += f"## üìù –†–µ–∑—é–º–µ:\n\n{overall}\n"
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ HTML –¥–ª—è Telegram
    return markdown_to_html(markdown)


def format_mention_for_telegram(
    analysis: Dict[str, Any],
    group_title: str,
    message_link: str = None
) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É–ø–æ–º–∏–Ω–∞–Ω–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
    
    Args:
        analysis: –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
            - urgency: —É—Ä–æ–≤–µ–Ω—å —Å—Ä–æ—á–Ω–æ—Å—Ç–∏ ('urgent', 'important', 'normal')
            - context: –∫–æ–Ω—Ç–µ–∫—Å—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
            - mention_reason: –ø—Ä–∏—á–∏–Ω–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
            - key_points: —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤
        group_title: –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
        message_link: –°—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ MarkdownV2 —Ñ–æ—Ä–º–∞—Ç–µ
    """
    
    urgency = analysis.get('urgency', 'normal')
    urgency_emoji = {
        'urgent': 'üî¥',
        'important': 'üü°',
        'normal': 'üü¢'
    }.get(urgency, 'üü¢')
    
    markdown = f"""{urgency_emoji} **–£–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ**

**–ì—Ä—É–ø–ø–∞:** {group_title}

"""
    
    # –ö–æ–Ω—Ç–µ–∫—Å—Ç
    context = analysis.get('context', '')
    if context:
        markdown += f"**–ö–æ–Ω—Ç–µ–∫—Å—Ç:**\n{context}\n\n"
    
    # –ü—Ä–∏—á–∏–Ω–∞
    reason = analysis.get('mention_reason', '')
    if reason:
        markdown += f"**–ü–æ—á–µ–º—É —É–ø–æ–º—è–Ω—É–ª–∏:** {reason}\n\n"
    
    # –ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã
    key_points = analysis.get('key_points', [])
    if key_points:
        markdown += "**–ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã:**\n"
        for point in key_points:
            markdown += f"‚Ä¢ {point}\n"
        markdown += "\n"
    
    # –°—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ (HTML —Ñ–æ—Ä–º–∞—Ç)
    if message_link:
        markdown += f'<a href="{message_link}">–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é</a>\n\n'
    
    # –§—É—Ç–µ—Ä —Å –≤—Ä–µ–º–µ–Ω–µ–º
    markdown += f"*–°—Ä–æ—á–Ω–æ—Å—Ç—å: {urgency.upper()} ‚Ä¢ {datetime.now().strftime('%H:%M')}*"
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ HTML –¥–ª—è Telegram
    return markdown_to_html(markdown)


def markdown_to_html(text: str) -> str:
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ Markdown –≤ HTML –¥–ª—è Telegram
    
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
    - ## –ó–∞–≥–æ–ª–æ–≤–∫–∏ ‚Üí <b>–ó–∞–≥–æ–ª–æ–≤–∫–∏</b>
    - **–∂–∏—Ä–Ω—ã–π** ‚Üí <b>–∂–∏—Ä–Ω—ã–π</b>
    - *–∫—É—Ä—Å–∏–≤* ‚Üí <i>–∫—É—Ä—Å–∏–≤</i>
    - `–∫–æ–¥` ‚Üí <code>–∫–æ–¥</code>
    - --- ‚Üí ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    - –°–ø–∏—Å–∫–∏ - ‚Üí ‚Ä¢
    
    Args:
        text: –¢–µ–∫—Å—Ç —Å Markdown —Ä–∞–∑–º–µ—Ç–∫–æ–π
        
    Returns:
        HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è Telegram
    """
    if not text:
        return text
    
    # –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ HTML —Å—Å—ã–ª–∫–∏
    html_links = []
    def save_html_link(match):
        html_links.append(match.group(0))
        return f"__HTML_LINK_{len(html_links)-1}__"
    
    text = re.sub(r'<a\s+href="[^"]+">.*?</a>', save_html_link, text)
    
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã
    text = escape(text)
    
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º HTML —Å—Å—ã–ª–∫–∏
    for i, link in enumerate(html_links):
        text = text.replace(f"__HTML_LINK_{i}__", link)
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Markdown —Å—Å—ã–ª–∫–∏ [text](url) ‚Üí <a href="url">text</a>
    text = re.sub(r'\[([^\]]+)\]\(([^)]+)\)', r'<a href="\2">\1</a>', text)
    
    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ ## ‚Üí <b>
    text = re.sub(r'###\s+(.+?)(?=\n|$)', r'<b>\1</b>', text)
    text = re.sub(r'##\s+(.+?)(?=\n|$)', r'<b>\1</b>', text)
    text = re.sub(r'#\s+(.+?)(?=\n|$)', r'<b>\1</b>', text)
    
    # –ñ–∏—Ä–Ω—ã–π **—Ç–µ–∫—Å—Ç** ‚Üí <b>—Ç–µ–∫—Å—Ç</b>
    text = re.sub(r'\*\*(.+?)\*\*', r'<b>\1</b>', text)
    
    # –ö—É—Ä—Å–∏–≤ *—Ç–µ–∫—Å—Ç* ‚Üí <i>—Ç–µ–∫—Å—Ç</i>  
    text = re.sub(r'\*([^\*]+?)\*', r'<i>\1</i>', text)
    
    # –ö–æ–¥ `—Ç–µ–∫—Å—Ç` ‚Üí <code>—Ç–µ–∫—Å—Ç</code>
    text = re.sub(r'`(.+?)`', r'<code>\1</code>', text)
    
    # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ --- ‚Üí ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    text = re.sub(r'^---+$', '‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ', text, flags=re.MULTILINE)
    
    # –°–ø–∏—Å–∫–∏ - ‚Üí ‚Ä¢ (–≤–∫–ª—é—á–∞—è –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏)
    text = re.sub(r'^\s*-\s+', lambda m: m.group(0).replace('-', '‚Ä¢'), text, flags=re.MULTILINE)
    
    return text


def markdownify(text: str) -> str:
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è Markdown ‚Üí HTML –¥–ª—è Telegram
    
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–æ—à–∏–±–∫–∏, RAG –æ—Ç–≤–µ—Ç—ã –∏ —Ç.–¥.)
    
    Args:
        text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ Markdown —Ñ–æ—Ä–º–∞—Ç–µ
        
    Returns:
        HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è Telegram
        
    Example:
        >>> from telegram_formatter import markdownify
        >>> safe_text = markdownify("–û—à–∏–±–∫–∞: —Ñ–∞–π–ª_–Ω–µ_–Ω–∞–π–¥–µ–Ω.txt")
        >>> await bot.send_message(chat_id, safe_text, parse_mode='HTML')
    """
    return markdown_to_html(text)

