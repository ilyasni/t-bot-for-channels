"""
–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è Telegram

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
—Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ Telegram Bot API.

–í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML —Ñ–æ—Ä–º–∞—Ç –≤–º–µ—Å—Ç–æ MarkdownV2, —Ç–∞–∫ –∫–∞–∫:
- telegramify-markdown –ù–ï —ç–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç –¥–≤–æ–µ—Ç–æ—á–∏—è (:)
- HTML –ø—Ä–æ—â–µ –∏ –Ω–∞–¥–µ–∂–Ω–µ–µ –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
- Telegram –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç HTML

–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ HTML —Ç–µ–≥–∏:
- <b>, <strong>, <i>, <em>, <u>, <s>
- <code>, <pre>, <pre><code class="language-X">
- <a href="url">text</a>
- <blockquote>, <blockquote expandable>
- <tg-spoiler>
"""
from html import escape
from typing import Dict, Any, List, Optional
from datetime import datetime
import re


def format_digest_for_telegram(digest: Dict[str, Any], group_title: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–π–¥–∂–µ—Å—Ç –≥—Ä—É–ø–ø—ã –≤ HTML –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
    
    Args:
        digest: –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ—Ç generate_digest()
            - period: —Å—Ç—Ä–æ–∫–∞ —Å –ø–µ—Ä–∏–æ–¥–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ø–æ—Å–ª–µ–¥–Ω–∏–µ 24—á")
            - message_count: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            - topics: —Å–ø–∏—Å–æ–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–µ–º
            - speakers_summary: —Å–ª–æ–≤–∞—Ä—å {username: summary}
            - overall_summary: –æ–±—â–µ–µ —Ä–µ–∑—é–º–µ
        group_title: –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
        
    Returns:
        HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
    """
    html_parts = []
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    html_parts.append(f"<b>üìä –î–∞–π–¥–∂–µ—Å—Ç –≥—Ä—É–ø–ø—ã: {escape(group_title)}</b>")
    html_parts.append("")
    html_parts.append(f"<i>–ü–µ—Ä–∏–æ–¥: {escape(digest.get('period', 'unknown'))}</i>")
    html_parts.append(f"<i>–°–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {digest.get('message_count', 0)}</i>")
    html_parts.append("")
    
    # –¢–µ–º—ã
    topics = digest.get('topics', [])
    if topics:
        html_parts.append("<b>üéØ –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã:</b>")
        html_parts.append("")
        for i, topic in enumerate(topics, 1):
            html_parts.append(f"<b>{i}.</b> {escape(topic)}")
        html_parts.append("")
    
    # –°–ø–∏–∫–µ—Ä—ã
    speakers = digest.get('speakers_summary', {})
    if speakers:
        html_parts.append("<b>üë• –ê–∫—Ç–∏–≤–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏:</b>")
        html_parts.append("")
        for username, summary in speakers.items():
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ username
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ username –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–æ–±–µ–ª–æ–≤ (–∑–Ω–∞—á–∏—Ç —ç—Ç–æ username, –∞ –Ω–µ first_name)
            if ' ' not in username and len(username) > 0:
                # –≠—Ç–æ username - —Å–æ–∑–¥–∞–µ–º –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
                username_link = f'<a href="tg://resolve?domain={escape(username)}">@{escape(username)}</a>'
                html_parts.append(f"‚Ä¢ {username_link}: {escape(summary)}")
            else:
                # –≠—Ç–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ username - –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
                html_parts.append(f"‚Ä¢ <b>{escape(username)}</b>: {escape(summary)}")
        html_parts.append("")
    
    # –†–µ–∑—é–º–µ –≤ blockquote –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    overall = digest.get('overall_summary', '')
    if overall:
        html_parts.append("<b>üìù –†–µ–∑—é–º–µ:</b>")
        html_parts.append("")
        # –ï—Å–ª–∏ —Ä–µ–∑—é–º–µ –¥–ª–∏–Ω–Ω–æ–µ (>300 —Å–∏–º–≤–æ–ª–æ–≤), –∏—Å–ø–æ–ª—å–∑—É–µ–º expandable blockquote
        if len(overall) > 300:
            html_parts.append(f"<blockquote expandable>{escape(overall)}</blockquote>")
        else:
            html_parts.append(f"<blockquote>{escape(overall)}</blockquote>")
    
    return "\n".join(html_parts)


def format_mention_for_telegram(
    analysis: Dict[str, Any],
    group_title: str,
    message_link: str = None
) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É–ø–æ–º–∏–Ω–∞–Ω–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
    
    Args:
        analysis: –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
            - urgency: —É—Ä–æ–≤–µ–Ω—å —Å—Ä–æ—á–Ω–æ—Å—Ç–∏ ('urgent', 'important', 'normal')
            - context: –∫–æ–Ω—Ç–µ–∫—Å—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
            - mention_reason: –ø—Ä–∏—á–∏–Ω–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
            - key_points: —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤
        group_title: –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
        message_link: –°—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        
    Returns:
        HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è Telegram
    """
    html_parts = []
    
    # Urgency –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
    urgency = analysis.get('urgency', 'normal')
    urgency_emoji = {
        'urgent': 'üî¥',
        'important': 'üü°',
        'normal': 'üü¢'
    }.get(urgency, 'üü¢')
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    html_parts.append(f"{urgency_emoji} <b>–£–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ</b>")
    html_parts.append("")
    html_parts.append(f"<b>–ì—Ä—É–ø–ø–∞:</b> {escape(group_title)}")
    html_parts.append("")
    
    # –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤ blockquote –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    context = analysis.get('context', '')
    if context:
        html_parts.append("<b>–ö–æ–Ω—Ç–µ–∫—Å—Ç:</b>")
        html_parts.append(f"<blockquote>{escape(context)}</blockquote>")
        html_parts.append("")
    
    # –ü—Ä–∏—á–∏–Ω–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
    reason = analysis.get('mention_reason', '')
    if reason:
        html_parts.append(f"<b>–ü–æ—á–µ–º—É —É–ø–æ–º—è–Ω—É–ª–∏:</b> <i>{escape(reason)}</i>")
        html_parts.append("")
    
    # –ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã
    key_points = analysis.get('key_points', [])
    if key_points:
        html_parts.append("<b>–ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã:</b>")
        for point in key_points:
            html_parts.append(f"‚Ä¢ <i>{escape(point)}</i>")
        html_parts.append("")
    
    # –°—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message_link:
        html_parts.append(f'<a href="{message_link}">üì¨ –ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é</a>')
        html_parts.append("")
    
    # –§—É—Ç–µ—Ä —Å —É—Ä–æ–≤–Ω–µ–º —Å—Ä–æ—á–Ω–æ—Å—Ç–∏ –∏ –≤—Ä–µ–º–µ–Ω–µ–º
    time_str = datetime.now().strftime('%H:%M')
    html_parts.append(f"<i>–°—Ä–æ—á–Ω–æ—Å—Ç—å: {urgency.upper()} ‚Ä¢ {time_str}</i>")
    
    return "\n".join(html_parts)


def markdown_to_html(text: str) -> str:
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ Markdown –≤ HTML –¥–ª—è Telegram
    
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
    - ## –ó–∞–≥–æ–ª–æ–≤–∫–∏ ‚Üí <b>–ó–∞–≥–æ–ª–æ–≤–∫–∏</b>
    - **–∂–∏—Ä–Ω—ã–π** ‚Üí <b>–∂–∏—Ä–Ω—ã–π</b>
    - *–∫—É—Ä—Å–∏–≤* ‚Üí <i>–∫—É—Ä—Å–∏–≤</i>
    - `–∫–æ–¥` ‚Üí <code>–∫–æ–¥</code>
    - ```python –∫–æ–¥``` ‚Üí <pre><code class="language-python">–∫–æ–¥</code></pre>
    - > quote ‚Üí <blockquote>quote</blockquote>
    - ||spoiler|| ‚Üí <tg-spoiler>spoiler</tg-spoiler>
    - --- ‚Üí ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    - –°–ø–∏—Å–∫–∏ - ‚Üí ‚Ä¢
    
    Args:
        text: –¢–µ–∫—Å—Ç —Å Markdown —Ä–∞–∑–º–µ—Ç–∫–æ–π
        
    Returns:
        HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è Telegram
    """
    if not text:
        return text
    
    # –®–∞–≥ 1: –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ HTML —Ç–µ–≥–∏
    html_tags = []
    def save_html_tag(match):
        html_tags.append(match.group(0))
        return f"\x00HTML_TAG_{len(html_tags)-1}\x00"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML —Å—Å—ã–ª–∫–∏, blockquote, code blocks, spoilers
    text = re.sub(r'<a\s+href="[^"]+">.*?</a>', save_html_tag, text, flags=re.DOTALL)
    text = re.sub(r'<blockquote(?:\s+expandable)?>.*?</blockquote>', save_html_tag, text, flags=re.DOTALL)
    text = re.sub(r'<pre>.*?</pre>', save_html_tag, text, flags=re.DOTALL)
    text = re.sub(r'<code>.*?</code>', save_html_tag, text, flags=re.DOTALL)
    text = re.sub(r'<tg-spoiler>.*?</tg-spoiler>', save_html_tag, text, flags=re.DOTALL)
    
    # –®–∞–≥ 2: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º code blocks —Å —è–∑—ã–∫–æ–º (```language\ncode\n```)
    code_blocks = []
    def save_code_block(match):
        language = match.group(1) or ''
        code = match.group(2)
        if language:
            formatted = f'<pre><code class="language-{language}">{escape(code)}</code></pre>'
        else:
            formatted = f'<pre>{escape(code)}</pre>'
        code_blocks.append(formatted)
        return f"\x00CODE_BLOCK_{len(code_blocks)-1}\x00"
    
    text = re.sub(r'```(\w+)?\n(.*?)```', save_code_block, text, flags=re.DOTALL)
    
    # –®–∞–≥ 3: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º blockquote (> —Ç–µ–∫—Å—Ç)
    blockquotes = []
    def save_blockquote(match):
        lines = match.group(0).split('\n')
        content = '\n'.join(line.lstrip('> ').strip() for line in lines if line.strip().startswith('>'))
        # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ blockquote
        formatted = f'<blockquote>{markdown_to_html(content)}</blockquote>'
        blockquotes.append(formatted)
        return f"\x00BLOCKQUOTE_{len(blockquotes)-1}\x00"
    
    text = re.sub(r'^>.*(?:\n>.*)*', save_blockquote, text, flags=re.MULTILINE)
    
    # –®–∞–≥ 4: –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã
    text = escape(text)
    
    # –®–∞–≥ 5: –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Markdown —Ä–∞–∑–º–µ—Ç–∫—É
    
    # –°–ø–æ–π–ª–µ—Ä—ã ||—Ç–µ–∫—Å—Ç|| ‚Üí <tg-spoiler>—Ç–µ–∫—Å—Ç</tg-spoiler>
    text = re.sub(r'\|\|(.+?)\|\|', r'<tg-spoiler>\1</tg-spoiler>', text)
    
    # Markdown —Å—Å—ã–ª–∫–∏ [text](url) ‚Üí <a href="url">text</a>
    text = re.sub(r'\[([^\]]+)\]\(([^)]+)\)', r'<a href="\2">\1</a>', text)
    
    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ ## ‚Üí <b>
    text = re.sub(r'###\s+(.+?)(?=\n|$)', r'<b>\1</b>', text)
    text = re.sub(r'##\s+(.+?)(?=\n|$)', r'<b>\1</b>', text)
    text = re.sub(r'#\s+(.+?)(?=\n|$)', r'<b>\1</b>', text)
    
    # –ñ–∏—Ä–Ω—ã–π **—Ç–µ–∫—Å—Ç** ‚Üí <b>—Ç–µ–∫—Å—Ç</b>
    text = re.sub(r'\*\*(.+?)\*\*', r'<b>\1</b>', text)
    
    # –ö—É—Ä—Å–∏–≤ *—Ç–µ–∫—Å—Ç* ‚Üí <i>—Ç–µ–∫—Å—Ç</i>
    text = re.sub(r'\*([^\*]+?)\*', r'<i>\1</i>', text)
    
    # Inline –∫–æ–¥ `—Ç–µ–∫—Å—Ç` ‚Üí <code>—Ç–µ–∫—Å—Ç</code>
    text = re.sub(r'`(.+?)`', r'<code>\1</code>', text)
    
    # –ü–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ __—Ç–µ–∫—Å—Ç__ ‚Üí <u>—Ç–µ–∫—Å—Ç</u>
    text = re.sub(r'__(.+?)__', r'<u>\1</u>', text)
    
    # –ó–∞—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ ~~—Ç–µ–∫—Å—Ç~~ ‚Üí <s>—Ç–µ–∫—Å—Ç</s>
    text = re.sub(r'~~(.+?)~~', r'<s>\1</s>', text)
    
    # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ --- ‚Üí ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    text = re.sub(r'^---+$', '‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ', text, flags=re.MULTILINE)
    
    # –°–ø–∏—Å–∫–∏ - ‚Üí ‚Ä¢
    text = re.sub(r'^\s*-\s+', lambda m: m.group(0).replace('-', '‚Ä¢'), text, flags=re.MULTILINE)
    
    # –®–∞–≥ 6: –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    for i, block in enumerate(code_blocks):
        text = text.replace(f"\x00CODE_BLOCK_{i}\x00", block)
    
    for i, quote in enumerate(blockquotes):
        text = text.replace(f"\x00BLOCKQUOTE_{i}\x00", quote)
    
    for i, tag in enumerate(html_tags):
        text = text.replace(f"\x00HTML_TAG_{i}\x00", tag)
    
    return text


def markdownify(text: str) -> str:
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è Markdown ‚Üí HTML –¥–ª—è Telegram
    
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–æ—à–∏–±–∫–∏, RAG –æ—Ç–≤–µ—Ç—ã –∏ —Ç.–¥.)
    
    Args:
        text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ Markdown —Ñ–æ—Ä–º–∞—Ç–µ
        
    Returns:
        HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è Telegram
        
    Example:
        >>> from telegram_formatter import markdownify
        >>> safe_text = markdownify("–û—à–∏–±–∫–∞: —Ñ–∞–π–ª_–Ω–µ_–Ω–∞–π–¥–µ–Ω.txt")
        >>> await bot.send_message(chat_id, safe_text, parse_mode='HTML')
    """
    return markdown_to_html(text)


def format_rag_answer(answer: str, sources: Optional[List[Dict[str, Any]]] = None) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç RAG –æ—Ç–≤–µ—Ç —Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏ –≤ expandable blockquote
    
    Args:
        answer: –û—Å–Ω–æ–≤–Ω–æ–π –æ—Ç–≤–µ—Ç –æ—Ç RAG (–º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å Markdown)
        sources: –°–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Å –ø–æ–ª—è–º–∏:
            - url: —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç
            - channel_username: –∏–º—è –∫–∞–Ω–∞–ª–∞
            - posted_at: –¥–∞—Ç–∞ –ø–æ—Å—Ç–∞ (—Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ datetime)
            - excerpt: –∫—Ä–∞—Ç–∫–∞—è –≤—ã–¥–µ—Ä–∂–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
    Returns:
        HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è Telegram
        
    Example:
        >>> answer = "Python - —ç—Ç–æ **—è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è**"
        >>> sources = [
        ...     {"url": "https://t.me/channel/123", "channel_username": "python_news", "posted_at": "2024-01-15"}
        ... ]
        >>> formatted = format_rag_answer(answer, sources)
    """
    # –û—Å–Ω–æ–≤–Ω–æ–π –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ markdown_to_html
    html = markdown_to_html(answer)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –≤ expandable blockquote
    if sources and len(sources) > 0:
        html += "\n\n<blockquote expandable>üìö <b>–ò—Å—Ç–æ—á–Ω–∏–∫–∏:</b>\n"
        
        for i, src in enumerate(sources[:5], 1):  # –ú–∞–∫—Å–∏–º—É–º 5 –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            channel = escape(src.get('channel_username', 'Unknown'))
            url = src.get('url', '')
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
            posted_at = src.get('posted_at', '')
            if hasattr(posted_at, 'strftime'):
                date_str = posted_at.strftime('%d.%m.%Y')
            elif isinstance(posted_at, str):
                # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É –∏–∑ —Å—Ç—Ä–æ–∫–∏ (–æ–±—Ä–µ–∑–∞–µ–º –≤—Ä–µ–º—è)
                date_str = posted_at[:10] if len(posted_at) >= 10 else posted_at
            else:
                date_str = ''
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –∏—Å—Ç–æ—á–Ω–∏–∫–∞
            if url:
                html += f'{i}. <a href="{url}">@{channel}</a>'
            else:
                html += f'{i}. @{channel}'
            
            if date_str:
                html += f' <i>({date_str})</i>'
            
            # –î–æ–±–∞–≤–ª—è–µ–º excerpt –µ—Å–ª–∏ –µ—Å—Ç—å
            excerpt = src.get('excerpt', '')
            if excerpt:
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É excerpt
                if len(excerpt) > 100:
                    excerpt = excerpt[:100] + '...'
                html += f'\n   <code>{escape(excerpt)}</code>'
            
            html += '\n'
        
        html += "</blockquote>"
    
    return html


def format_long_digest(digest_text: str, max_visible: int = 500) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–ª–∏–Ω–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç —Å expandable blockquote
    
    –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –¥–∞–π–¥–∂–µ—Å—Ç–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç max_visible —Å–∏–º–≤–æ–ª–æ–≤,
    –≤–∏–¥–∏–º–∞—è —á–∞—Å—Ç—å –æ—Å—Ç–∞–µ—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç–æ–π, –∞ –æ—Å—Ç–∞–ª—å–Ω–æ–µ —Å–∫—Ä—ã–≤–∞–µ—Ç—Å—è
    –≤ expandable blockquote.
    
    Args:
        digest_text: –¢–µ–∫—Å—Ç –¥–∞–π–¥–∂–µ—Å—Ç–∞ (–º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å Markdown)
        max_visible: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –≤ –≤–∏–¥–∏–º–æ–π —á–∞—Å—Ç–∏
        
    Returns:
        HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è Telegram
        
    Example:
        >>> digest = "–û—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–∞–π–¥–∂–µ—Å—Ç–∞..." * 100
        >>> formatted = format_long_digest(digest, max_visible=500)
    """
    if not digest_text:
        return ""
    
    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –∫–æ—Ä–æ—Ç–∫–∏–π, –ø—Ä–æ—Å—Ç–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º
    if len(digest_text) <= max_visible:
        return markdown_to_html(digest_text)
    
    # –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–π –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ –ø—Ä–æ–±–µ–ª –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ —Ä–∞–∑—Ä—ã–≤–∞
    break_point = max_visible
    
    # –ò—â–µ–º –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö ¬±50 —Å–∏–º–≤–æ–ª–æ–≤ –æ—Ç max_visible
    for offset in range(0, min(50, len(digest_text) - max_visible)):
        if digest_text[max_visible + offset] == '\n':
            break_point = max_visible + offset
            break
        if digest_text[max_visible - offset] == '\n':
            break_point = max_visible - offset
            break
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏, –∏—â–µ–º –ø—Ä–æ–±–µ–ª
    if break_point == max_visible:
        for offset in range(0, min(50, len(digest_text) - max_visible)):
            if digest_text[max_visible + offset] == ' ':
                break_point = max_visible + offset
                break
            if digest_text[max_visible - offset] == ' ':
                break_point = max_visible - offset
                break
    
    # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç
    visible = digest_text[:break_point].strip()
    hidden = digest_text[break_point:].strip()
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ–±–µ —á–∞—Å—Ç–∏
    html = markdown_to_html(visible)
    
    if hidden:
        html += f'\n\n<blockquote expandable>{markdown_to_html(hidden)}</blockquote>'
    
    return html

