from fastapi import FastAPI, HTTPException, Depends, BackgroundTasks
from datetime import datetime, timedelta, timezone
from auth import get_user_client, check_user_auth_status, logout_user, disconnect_all_clients
from database import get_db, SessionLocal
from models import User, Channel, Post, InviteCode, SubscriptionHistory
from sqlalchemy.orm import Session
from sqlalchemy import func, String
from parser_service import ParserService
from pydantic import BaseModel, Field
import asyncio
from telethon.errors import FloodWaitError
import os
import logging
try:
    import zoneinfo
except ImportError:
    from backports import zoneinfo

# Prometheus metrics
from prometheus_client import make_asgi_app

# Logger –¥–ª—è main.py
logger = logging.getLogger(__name__)

app = FastAPI()

# Mount Prometheus metrics endpoint
# Best practice from Context7: use make_asgi_app() for async ASGI integration
metrics_app = make_asgi_app()
app.mount("/metrics", metrics_app)

# –ö–†–ò–¢–ò–ß–ù–û: –ì–ª–æ–±–∞–ª—å–Ω—ã–π parser_service –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ event loop
# –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–∏—Å—Ç–µ–º—ã (run_system.py)
global_parser_service = None

# –ö–†–ò–¢–ò–ß–ù–û: –°—Å—ã–ª–∫–∞ –Ω–∞ –≥–ª–∞–≤–Ω—ã–π event loop –≥–¥–µ —Ä–∞–±–æ—Ç–∞—é—Ç Telethon –∫–ª–∏–µ–Ω—Ç—ã
# API —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ (uvicorn), –ø–æ—ç—Ç–æ–º—É –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∏ –≤ –≥–ª–∞–≤–Ω—ã–π loop
main_event_loop = None

# –õ–æ–∫–∞–ª—å–Ω–∞—è —Ç–∞–π–º–∑–æ–Ω–∞ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ datetime
LOCAL_TZ_NAME = os.getenv('TZ', 'Europe/Moscow')
try:
    LOCAL_TZ = zoneinfo.ZoneInfo(LOCAL_TZ_NAME)
except Exception:
    # Fallback –¥–ª—è MSK (UTC+3)
    LOCAL_TZ = timezone(timedelta(hours=3))

def to_local_time(dt: datetime) -> str:
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç datetime –∏–∑ UTC –≤ –ª–æ–∫–∞–ª—å–Ω—É—é —Ç–∞–π–º–∑–æ–Ω—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ISO —Å—Ç—Ä–æ–∫—É
    
    Args:
        dt: datetime –æ–±—ä–µ–∫—Ç (–º–æ–∂–µ—Ç –±—ã—Ç—å —Å timezone –∏–ª–∏ –±–µ–∑)
        
    Returns:
        ISO —Å—Ç—Ä–æ–∫–∞ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π —Ç–∞–π–º–∑–æ–Ω–µ
    """
    if dt is None:
        return None
    
    # –ï—Å–ª–∏ datetime –±–µ–∑ timezone, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —ç—Ç–æ UTC
    if dt.tzinfo is None:
        dt = dt.replace(tzinfo=timezone.utc)
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—É—é —Ç–∞–π–º–∑–æ–Ω—É
    local_dt = dt.astimezone(LOCAL_TZ)
    return local_dt.isoformat()

# Pydantic –º–æ–¥–µ–ª–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
class RetentionSettingsUpdate(BaseModel):
    retention_days: int = Field(..., ge=1, le=365, description="–ü–µ—Ä–∏–æ–¥ —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤ –≤ –¥–Ω—è—Ö (–æ—Ç 1 –¥–æ 365)")
    run_cleanup_immediately: bool = Field(False, description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –æ—á–∏—Å—Ç–∫—É –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è")

@app.on_event("startup")
async def startup_event():
    try:
        print("‚úÖ –ú–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        from database import create_tables
        create_tables()
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {str(e)}")
        raise HTTPException(500, f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã: {str(e)}")

@app.on_event("shutdown")
async def shutdown_event():
    try:
        await disconnect_all_clients()
        print("üîå –í—Å–µ –∫–ª–∏–µ–Ω—Ç—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤: {str(e)}")


# –ù–æ–≤—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –º–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã

# –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:
#   - /login INVITE_CODE - QR –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram Mini App (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
#   - /auth - –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ OAuth –≤–µ–±-—Ñ–æ—Ä–º—É (auth_web_server.py)
# Auth server –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ run_system.py –Ω–∞ –ø–æ—Ä—Ç—É 8001

@app.get("/users/{user_id}/auth_status")
async def get_auth_status(user_id: int, db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user = db.query(User).filter(User.id == user_id).first()
        if not user:
            raise HTTPException(404, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        return {
            "user_id": user.id,
            "telegram_id": user.telegram_id,
            "is_authenticated": user.is_authenticated,
            "last_auth_check": to_local_time(user.last_auth_check),
            "auth_error": user.auth_error
        }
        
    except Exception as e:
        raise HTTPException(500, f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")

@app.post("/users/{user_id}/logout")
async def logout_user_endpoint(user_id: int, db: Session = Depends(get_db)):
    """–í—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
    try:
        user = db.query(User).filter(User.id == user_id).first()
        if not user:
            raise HTTPException(404, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        await logout_user(user)
        
        return {
            "user_id": user.id,
            "telegram_id": user.telegram_id,
            "status": "logged_out",
            "message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª –∏–∑ —Å–∏—Å—Ç–µ–º—ã"
        }
        
    except Exception as e:
        raise HTTPException(500, f"–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞: {str(e)}")


@app.post("/users/{user_id}/channels/parse")
async def parse_user_channels_endpoint(user_id: int, db: Session = Depends(get_db)):
    """
    –ü–∞—Ä—Å–∏—Ç—å –∫–∞–Ω–∞–ª—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    –ö–†–ò–¢–ò–ß–ù–û (Context7 best practices):
    - API —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ uvicorn –ø–æ—Ç–æ–∫–µ (–æ—Ç–¥–µ–ª—å–Ω—ã–π event loop)
    - Telethon –∫–ª–∏–µ–Ω—Ç—ã –∂–∏–≤—É—Ç –≤ –≥–ª–∞–≤–Ω–æ–º event loop (run_system)
    - –ò—Å–ø–æ–ª—å–∑—É–µ–º asyncio.run_coroutine_threadsafe() –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞—á–∏ –≤ –≥–ª–∞–≤–Ω—ã–π loop
    """
    try:
        user = db.query(User).filter(User.id == user_id).first()
        if not user:
            raise HTTPException(404, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        if not user.is_authenticated:
            raise HTTPException(403, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω")
        
        # –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≥–ª–∞–≤–Ω—ã–π loop —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        if main_event_loop is None or global_parser_service is None:
            raise HTTPException(503, "ParserService –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –ö–†–ò–¢–ò–ß–ù–û: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –ì–õ–ê–í–ù–´–ô event loop —á–µ—Ä–µ–∑ run_coroutine_threadsafe
        # –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–∑–≤–∞—Ç—å async –∫–æ–¥ –∏–∑ uvicorn –ø–æ—Ç–æ–∫–∞ –≤ loop –≥–¥–µ –∂–∏–≤—É—Ç Telethon –∫–ª–∏–µ–Ω—Ç—ã
        future = asyncio.run_coroutine_threadsafe(
            global_parser_service.parse_user_channels_by_id(user_id),
            main_event_loop
        )
        
        # –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (blocking, –Ω–æ —ç—Ç–æ OK –¥–ª—è API —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞)
        result = future.result(timeout=300)  # 5 –º–∏–Ω—É—Ç timeout
        
        if "error" in result:
            raise HTTPException(500, result["error"])
        
        return result
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(500, f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞–Ω–∞–ª–æ–≤: {str(e)}")

@app.get("/users")
async def get_users(
    authenticated_only: bool = False,
    active_only: bool = False,
    db: Session = Depends(get_db)
):
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - authenticated_only: –µ—Å–ª–∏ True, –≤–µ—Ä–Ω—É—Ç—å —Ç–æ–ª—å–∫–æ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    - active_only: –µ—Å–ª–∏ True, –≤–µ—Ä–Ω—É—Ç—å —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    """
    try:
        query = db.query(User)
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        if authenticated_only:
            query = query.filter(User.is_authenticated == True)
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        if active_only:
            query = query.filter(User.is_active == True)
        
        users = query.all()
        
        return {
            "total": len(users),
            "filters": {
                "authenticated_only": authenticated_only,
                "active_only": active_only
            },
            "users": [
                {
                    "id": user.id,
                    "telegram_id": user.telegram_id,
                    "username": user.username,
                    "first_name": user.first_name,
                    "last_name": user.last_name,
                    "created_at": to_local_time(user.created_at),
                    "is_active": user.is_active,
                    "is_authenticated": user.is_authenticated,
                    "last_auth_check": to_local_time(user.last_auth_check)
                }
                for user in users
            ]
        }
    except Exception as e:
        raise HTTPException(500, f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {str(e)}")


@app.get("/users/{telegram_id}/channels")
async def get_user_channels(telegram_id: int, db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å –∫–∞–Ω–∞–ª—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user = db.query(User).filter(User.telegram_id == telegram_id).first()
        if not user:
            raise HTTPException(404, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª—ã —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–¥–ø–∏—Å–∫–µ
        channels_with_info = user.get_all_channels(db)
        
        return {
            "user_id": user.id,
            "telegram_id": user.telegram_id,
            "username": user.username,
            "is_authenticated": user.is_authenticated,
            "channels": [
                {
                    "id": channel.id,
                    "channel_username": channel.channel_username,
                    "channel_id": channel.channel_id,
                    "channel_title": channel.channel_title,
                    "is_active": sub_info['is_active'],
                    "created_at": to_local_time(channel.created_at),
                    "subscription_created_at": to_local_time(sub_info['created_at']),
                    "last_parsed_at": to_local_time(sub_info['last_parsed_at'])
                }
                for channel, sub_info in channels_with_info
            ]
        }
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(500, f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤: {str(e)}")


@app.get("/users/{telegram_id}/posts")
async def get_user_posts(
    telegram_id: int, 
    hours_back: int = 24,
    limit: int = 100,
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å—Ç—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user = db.query(User).filter(User.telegram_id == telegram_id).first()
        if not user:
            raise HTTPException(404, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        end_date = datetime.now(timezone.utc)
        start_date = end_date - timedelta(hours=hours_back)
        
        posts = db.query(Post).filter(
            Post.user_id == user.id,
            Post.posted_at >= start_date
        ).order_by(Post.posted_at.desc()).limit(limit).all()
        
        return {
            "user_id": user.id,
            "telegram_id": user.telegram_id,
            "username": user.username,
            "is_authenticated": user.is_authenticated,
            "period_hours": hours_back,
            "post_count": len(posts),
            "posts": [
                {
                    "id": post.id,
                    "channel_username": post.channel.channel_username,
                    "telegram_message_id": post.telegram_message_id,
                    "text": post.text,
                    "views": post.views,
                    "url": post.url,
                    "posted_at": to_local_time(post.posted_at),
                    "parsed_at": to_local_time(post.parsed_at),
                    "tags": post.tags
                }
                for post in posts
            ]
        }
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(500, f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤: {str(e)}")


@app.post("/parse_all_channels")
async def parse_all_channels_endpoint(db: Session = Depends(get_db)):
    """
    –ü–∞—Ä—Å–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –≤—Å–µ—Ö –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    
    –ö–†–ò–¢–ò–ß–ù–û: –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞—á—É –≤ –≥–ª–∞–≤–Ω—ã–π event loop —á–µ—Ä–µ–∑ run_coroutine_threadsafe
    """
    try:
        # –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≥–ª–∞–≤–Ω—ã–π loop —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        if main_event_loop is None or global_parser_service is None:
            raise HTTPException(503, "ParserService –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –ö–†–ò–¢–ò–ß–ù–û: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –ì–õ–ê–í–ù–´–ô event loop
        future = asyncio.run_coroutine_threadsafe(
            global_parser_service.parse_all_channels(),
            main_event_loop
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ —Ñ–æ–Ω–µ, –Ω–µ –∂–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        # (parse_all_channels –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ–ª–≥–æ)
        
        return {
            "status": "success",
            "message": "–ü–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤ –∑–∞–ø—É—â–µ–Ω"
        }
        
    except Exception as e:
        raise HTTPException(500, f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞–Ω–∞–ª–æ–≤: {str(e)}")


# ============================================================================
# Endpoints –¥–ª—è —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–æ–≤
# ============================================================================

@app.post("/posts/{post_id}/generate_tags")
async def generate_tags_for_post(post_id: int, db: Session = Depends(get_db)):
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–≥–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ—Å—Ç–∞
    
    Args:
        post_id: ID –ø–æ—Å—Ç–∞
    """
    try:
        from tagging_service import tagging_service
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞
        post = db.query(Post).filter(Post.id == post_id).first()
        if not post:
            raise HTTPException(404, "–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        if not post.text:
            raise HTTPException(400, "–ü–æ—Å—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–≥–∏
        success = await tagging_service.update_post_tags(post_id, db)
        
        if success:
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞
            db.refresh(post)
            return {
                "status": "success",
                "post_id": post.id,
                "tags": post.tags,
                "message": "–¢–µ–≥–∏ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã"
            }
        else:
            raise HTTPException(500, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–≥–∏")
            
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(500, f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–≥–æ–≤: {str(e)}")


@app.post("/users/{telegram_id}/posts/generate_tags")
async def generate_tags_for_user_posts(
    telegram_id: int,
    limit: int = 100,
    db: Session = Depends(get_db)
):
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–≥–æ–≤ –¥–ª—è –≤—Å–µ—Ö –ø–æ—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ —Ç–µ–≥–æ–≤
    
    Args:
        telegram_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    """
    try:
        from tagging_service import tagging_service
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = db.query(User).filter(User.telegram_id == telegram_id).first()
        if not user:
            raise HTTPException(404, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç—ã –±–µ–∑ —Ç–µ–≥–æ–≤
        posts = db.query(Post).filter(
            Post.user_id == user.id,
            Post.tags == None,
            Post.text != None
        ).limit(limit).all()
        
        if not posts:
            return {
                "status": "success",
                "user_id": user.id,
                "telegram_id": user.telegram_id,
                "posts_processed": 0,
                "message": "–í—Å–µ –ø–æ—Å—Ç—ã —É–∂–µ –∏–º–µ—é—Ç —Ç–µ–≥–∏"
            }
        
        post_ids = [post.id for post in posts]
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
        asyncio.create_task(tagging_service.process_posts_batch(post_ids))
        
        return {
            "status": "success",
            "user_id": user.id,
            "telegram_id": user.telegram_id,
            "posts_to_process": len(post_ids),
            "message": f"–ó–∞–ø—É—â–µ–Ω–æ —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ {len(post_ids)} –ø–æ—Å—Ç–æ–≤"
        }
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(500, f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")


@app.get("/posts/tags/stats")
async def get_tags_statistics(db: Session = Depends(get_db)):
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–µ–≥–∞–º
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ —Å —Ç–µ–≥–∞–º–∏ –∏ –±–µ–∑ —Ç–µ–≥–æ–≤
    """
    try:
        total_posts = db.query(Post).count()
        posts_with_tags = db.query(Post).filter(Post.tags != None).count()
        posts_without_tags = db.query(Post).filter(Post.tags == None).count()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–µ–≥–∏
        posts_with_tags_list = db.query(Post).filter(Post.tags != None).all()
        all_tags = {}
        
        for post in posts_with_tags_list:
            if post.tags:
                for tag in post.tags:
                    if tag in all_tags:
                        all_tags[tag] += 1
                    else:
                        all_tags[tag] = 1
        
        # –¢–æ–ø-20 —Ç–µ–≥–æ–≤
        top_tags = sorted(all_tags.items(), key=lambda x: x[1], reverse=True)[:20]
        
        return {
            "total_posts": total_posts,
            "posts_with_tags": posts_with_tags,
            "posts_without_tags": posts_without_tags,
            "unique_tags_count": len(all_tags),
            "top_tags": [
                {"tag": tag, "count": count}
                for tag, count in top_tags
            ]
        }
        
    except Exception as e:
        raise HTTPException(500, f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")


# ============================================================================
# Endpoints –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–æ–º —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤
# ============================================================================

@app.get("/users/{user_id}/retention_settings")
async def get_retention_settings(user_id: int, db: Session = Depends(get_db)):
    """
    –ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –∏ –¥–∞—Ç–∞ —Å–∞–º–æ–≥–æ —Å—Ç–∞—Ä–æ–≥–æ –ø–æ—Å—Ç–∞
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = db.query(User).filter(User.id == user_id).first()
        if not user:
            raise HTTPException(404, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        total_posts = db.query(Post).filter(Post.user_id == user_id).count()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π –ø–æ—Å—Ç
        oldest_post = db.query(func.min(Post.posted_at)).filter(
            Post.user_id == user_id
        ).scalar()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–∞–º—ã–π –Ω–æ–≤—ã–π –ø–æ—Å—Ç
        newest_post = db.query(func.max(Post.posted_at)).filter(
            Post.user_id == user_id
        ).scalar()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞–Ω–∞–ª–∞–º
        from sqlalchemy import select
        from models import user_channel
        
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        channels_count_stmt = select(func.count()).select_from(user_channel).where(
            user_channel.c.user_id == user_id
        )
        channels_count = db.execute(channels_count_stmt).scalar()
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
        active_channels_count_stmt = select(func.count()).select_from(user_channel).where(
            user_channel.c.user_id == user_id,
            user_channel.c.is_active == True
        )
        active_channels_count = db.execute(active_channels_count_stmt).scalar()
        
        return {
            "user_id": user.id,
            "telegram_id": user.telegram_id,
            "retention_days": user.retention_days,
            "posts_stats": {
                "total_posts": total_posts,
                "oldest_post_date": to_local_time(oldest_post),
                "newest_post_date": to_local_time(newest_post),
                "channels_count": channels_count,
                "active_channels_count": active_channels_count
            },
            "message": f"–ü–µ—Ä–∏–æ–¥ —Ö—Ä–∞–Ω–µ–Ω–∏—è: {user.retention_days} –¥–Ω–µ–π –æ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—Å—Ç–∞ –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞"
        }
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(500, f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {str(e)}")


@app.put("/users/{user_id}/retention_settings")
async def update_retention_settings(
    user_id: int, 
    settings: RetentionSettingsUpdate,
    db: Session = Depends(get_db)
):
    """
    –û–±–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–∏–æ–¥ —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        settings: –ù–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (retention_days –æ—Ç 1 –¥–æ 365 –¥–Ω–µ–π)
        
    Returns:
        –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—á–∏—Å—Ç–∫–∏ (–µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–∞)
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = db.query(User).filter(User.id == user_id).first()
        if not user:
            raise HTTPException(404, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        old_retention_days = user.retention_days
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–∏–æ–¥ —Ö—Ä–∞–Ω–µ–Ω–∏—è
        user.retention_days = settings.retention_days
        db.commit()
        db.refresh(user)
        
        response = {
            "user_id": user.id,
            "telegram_id": user.telegram_id,
            "old_retention_days": old_retention_days,
            "new_retention_days": user.retention_days,
            "updated_at": to_local_time(datetime.now(timezone.utc)),
            "message": f"–ü–µ—Ä–∏–æ–¥ —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω: {user.retention_days} –¥–Ω–µ–π"
        }
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—É—é –æ—á–∏—Å—Ç–∫—É, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–æ
        if settings.run_cleanup_immediately:
            from cleanup_service import cleanup_service
            
            cleanup_result = await cleanup_service.cleanup_user_posts_immediately(user_id)
            response["cleanup_result"] = cleanup_result
            response["message"] += f" | –û—á–∏—Å—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: —É–¥–∞–ª–µ–Ω–æ {cleanup_result.get('posts_deleted', 0)} –ø–æ—Å—Ç–æ–≤"
        else:
            response["message"] += " | –û—á–∏—Å—Ç–∫–∞ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é"
        
        return response
        
    except HTTPException:
        raise
    except Exception as e:
        db.rollback()
        raise HTTPException(500, f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {str(e)}")


@app.post("/cleanup/run")
async def run_cleanup_manually(db: Session = Depends(get_db)):
    """
    –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ—á–∏—Å—Ç–∫—É —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –ø–æ—Å—Ç–æ–≤ –≤—Ä—É—á–Ω—É—é –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    
    Returns:
        –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–∏—Å—Ç–∫–∏
    """
    try:
        from cleanup_service import cleanup_service
        
        result = await cleanup_service.cleanup_old_posts()
        
        return result
        
    except Exception as e:
        raise HTTPException(500, f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {str(e)}")


# ============================================================================
# Endpoints –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
# ============================================================================

@app.get("/users/{user_id}/posts/tagging_stats")
async def get_tagging_stats(user_id: int, db: Session = Depends(get_db)):
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    try:
        user = db.query(User).filter(User.id == user_id).first()
        if not user:
            raise HTTPException(404, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_posts = db.query(Post).filter(Post.user_id == user_id).count()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        stats_by_status = {}
        for status in ["pending", "success", "failed", "retrying", "skipped"]:
            count = db.query(Post).filter(
                Post.user_id == user_id,
                Post.tagging_status == status
            ).count()
            stats_by_status[status] = count
        
        # –ü–æ—Å—Ç—ã –±–µ–∑ —Å—Ç–∞—Ç—É—Å–∞ (—Å—Ç–∞—Ä—ã–µ, –¥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞)
        no_status_count = db.query(Post).filter(
            Post.user_id == user_id,
            Post.tagging_status == None
        ).count()
        stats_by_status["no_status"] = no_status_count
        
        # –ü–æ—Å—Ç—ã —Å —Ç–µ–≥–∞–º–∏
        posts_with_tags = db.query(Post).filter(
            Post.user_id == user_id,
            Post.tags != None
        ).count()
        
        # –ü–æ—Å—Ç—ã –±–µ–∑ —Ç–µ–≥–æ–≤ –Ω–æ —Å —Ç–µ–∫—Å—Ç–æ–º
        posts_without_tags = db.query(Post).filter(
            Post.user_id == user_id,
            Post.tags == None,
            Post.text != None
        ).count()
        
        # –ü–æ—Å—Ç—ã —Ç—Ä–µ–±—É—é—â–∏–µ retry (failed –∏–ª–∏ retrying, –Ω–µ –ø—Ä–µ–≤—ã—Å–∏–≤—à–∏–µ –ª–∏–º–∏—Ç)
        from tagging_service import tagging_service
        posts_need_retry = db.query(Post).filter(
            Post.user_id == user_id,
            Post.tagging_status.in_(["failed", "retrying"]),
            Post.tagging_attempts < tagging_service.max_retry_attempts
        ).count()
        
        return {
            "user_id": user_id,
            "total_posts": total_posts,
            "posts_with_tags": posts_with_tags,
            "posts_without_tags": posts_without_tags,
            "posts_need_retry": posts_need_retry,
            "stats_by_status": stats_by_status,
            "tagging_enabled": tagging_service.enabled,
            "max_retry_attempts": tagging_service.max_retry_attempts
        }
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(500, f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")


@app.post("/users/{user_id}/posts/retry_tagging")
async def retry_failed_tagging(
    user_id: int,
    background_tasks: BackgroundTasks,
    force: bool = False,
    limit: int = 50,
    db: Session = Depends(get_db)
):
    """
    –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–≥–æ–≤ –¥–ª—è –ø–æ—Å—Ç–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        background_tasks: FastAPI BackgroundTasks –¥–ª—è async –æ–±—Ä–∞–±–æ—Ç–∫–∏
        force: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π retry –¥–∞–∂–µ –¥–ª—è –ø–æ—Å—Ç–æ–≤ —Å –ø—Ä–µ–≤—ã—à–µ–Ω–Ω—ã–º –ª–∏–º–∏—Ç–æ–º
        limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        
    Returns:
        –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∑–∞–¥–∞—á–∏ –≤ –æ—á–µ—Ä–µ–¥—å
    """
    try:
        user = db.query(User).filter(User.id == user_id).first()
        if not user:
            raise HTTPException(404, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        from tagging_service import tagging_service
        
        if not tagging_service.enabled:
            raise HTTPException(503, "–¢–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç OPENROUTER_API_KEY)")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º retry –≤ —Ñ–æ–Ω–µ (–Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è)
        background_tasks.add_task(
            tagging_service.retry_failed_posts,
            user_id=user_id,
            limit=limit,
            force=force
        )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
        return {
            "user_id": user_id,
            "status": "queued",
            "force_mode": force,
            "requested_limit": limit,
            "message": "–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–≥–æ–≤ –∑–∞–ø—É—â–µ–Ω–∞ –≤ —Ñ–æ–Ω–µ"
        }
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(500, f"–û—à–∏–±–∫–∞ retry —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")


@app.post("/posts/{post_id}/regenerate_tags")
async def regenerate_post_tags(
    post_id: int,
    background_tasks: BackgroundTasks,
    db: Session = Depends(get_db)
):
    """
    –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–≥–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ—Å—Ç–∞
    
    Args:
        post_id: ID –ø–æ—Å—Ç–∞
        background_tasks: FastAPI BackgroundTasks –¥–ª—è async –æ–±—Ä–∞–±–æ—Ç–∫–∏
        
    Returns:
        –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∑–∞–¥–∞—á–∏ –≤ –æ—á–µ—Ä–µ–¥—å
    """
    try:
        post = db.query(Post).filter(Post.id == post_id).first()
        if not post:
            raise HTTPException(404, "–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        from tagging_service import tagging_service
        
        if not tagging_service.enabled:
            raise HTTPException(503, "–¢–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç OPENROUTER_API_KEY)")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ —Ñ–æ–Ω–µ (–Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è)
        background_tasks.add_task(
            tagging_service.update_post_tags,
            post_id,
            None,  # db=None, —Å–µ—Ä–≤–∏—Å —Å–æ–∑–¥–∞—Å—Ç –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
            True   # force_retry=True
        )
        
        return {
            "post_id": post_id,
            "status": "queued",
            "message": "–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–≥–æ–≤ –∑–∞–ø—É—â–µ–Ω–∞ –≤ —Ñ–æ–Ω–µ"
        }
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(500, f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–≥–æ–≤: {str(e)}")


# ============================================================
# QR Auth Endpoints –¥–ª—è Telegram Mini App
# ============================================================

from fastapi.responses import HTMLResponse
from qr_auth_manager import qr_auth_manager


@app.get("/qr-auth", response_class=HTMLResponse)
async def qr_auth_page(session_id: str):
    """
    Mini App —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å QR –∫–æ–¥–æ–º –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    
    Args:
        session_id: ID QR —Å–µ—Å—Å–∏–∏
        
    Returns:
        HTML —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å QR –∫–æ–¥–æ–º –∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    """
    import qrcode
    import base64
    from io import BytesIO
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –∏–∑ Redis
    session = qr_auth_manager._get_session_from_redis(session_id)
    if not session:
        return HTMLResponse(content="""
            <!DOCTYPE html>
            <html>
            <head>
                <meta charset="UTF-8">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</title>
            </head>
            <body>
                <h1>‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</h1>
                <p>QR –∫–æ–¥ –∏—Å—Ç–µ–∫ –∏–ª–∏ –±—ã–ª —É–¥–∞–ª–µ–Ω</p>
            </body>
            </html>
        """)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    qr = qrcode.QRCode(version=1, box_size=10, border=4)
    qr.add_data(session["deep_link"])
    qr.make(fit=True)
    img = qr.make_image(fill_color="black", back_color="white")
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
    buffered = BytesIO()
    img.save(buffered, format="PNG")
    qr_base64 = base64.b64encode(buffered.getvalue()).decode('utf-8')
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ú–ò–ù–ò–ú–ê–õ–¨–ù–£–Æ HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É (—É–ø—Ä–æ—â–µ–Ω–æ –¥–ª—è Desktop Telegram)
    html_content = f"""<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>QR Auth</title>
    <script src="https://telegram.org/js/telegram-web-app.js"></script>
    <style>
        body {{
            font-family: -apple-system, system-ui, sans-serif;
            background: var(--tg-theme-bg-color, #fff);
            color: var(--tg-theme-text-color, #000);
            padding: 20px;
            text-align: center;
            margin: 0;
        }}
        .qr {{
            background: #fff;
            padding: 20px;
            border-radius: 12px;
            display: inline-block;
            margin: 20px 0;
        }}
        img {{
            max-width: 250px;
            width: 100%;
        }}
        button {{
            width: 100%;
            max-width: 300px;
            padding: 12px;
            margin: 10px 0;
            border: none;
            border-radius: 8px;
            background: var(--tg-theme-button-color, #0088cc);
            color: var(--tg-theme-button-text-color, #fff);
            font-size: 15px;
            cursor: pointer;
        }}
        button:active {{ opacity: 0.8; }}
        #status {{
            margin: 20px 0;
            padding: 12px;
            border-radius: 8px;
            background: var(--tg-theme-secondary-bg-color, #f0f0f0);
            font-size: 14px;
        }}
        .success {{ background: #4CAF50; color: #fff; }}
        .error {{ background: #f44336; color: #fff; }}
    </style>
</head>
<body>
    <h3>üîê QR –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</h3>
    <div class="qr">
        <img src="data:image/png;base64,{qr_base64}" alt="QR">
    </div>
    <p style="font-size: 13px; color: var(--tg-theme-hint-color, #999); margin: 10px 0;">
        –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR —á–µ—Ä–µ–∑:<br>
        Settings ‚Üí Devices ‚Üí Link Desktop Device
    </p>
    <button onclick="openLink()">üì± –û—Ç–∫—Ä—ã—Ç—å –≤ Telegram</button>
    <div id="status">‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ...</div>
    
    <script>
        const tg = window.Telegram.WebApp;
        const sessionId = "{session_id}";
        const deepLink = "{session["deep_link"]}";
        const MIN_VERSION = '6.1';
        
        tg.ready();
        tg.expand();
        
        // –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ –∏ –≤–µ—Ä—Å–∏–∏
        console.log('[QR Auth] Platform:', tg.platform);
        console.log('[QR Auth] Version:', tg.version);
        console.log('[QR Auth] ViewportHeight:', tg.viewportHeight);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Telegram (openTelegramLink –¥–æ—Å—Ç—É–ø–µ–Ω —Å Bot API 6.1+)
        if (!tg.isVersionAtLeast(MIN_VERSION)) {{
            document.getElementById('status').className = 'error';
            document.getElementById('status').textContent = '‚ö†Ô∏è –û–±–Ω–æ–≤–∏—Ç–µ Telegram –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è QR –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏';
            console.warn('[QR Auth] Telegram version is too old. Required:', MIN_VERSION, 'Current:', tg.version);
        }}
        
        function openLink() {{
            try {{
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
                document.getElementById('status').textContent = 'üîÑ –û—Ç–∫—Ä—ã–≤–∞–µ–º...';
                
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º openTelegramLink –¥–ª—è tg:// —Å—Å—ã–ª–æ–∫ (–Ω–µ openLink!)
                if (tg.openTelegramLink) {{
                    tg.openTelegramLink(deepLink);
                    console.log('[QR Auth] Called tg.openTelegramLink');
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
                    setTimeout(() => {{
                        document.getElementById('status').textContent = '‚è≥ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤ Telegram...';
                    }}, 300);
                }} else {{
                    throw new Error('openTelegramLink not available');
                }}
            }} catch (error) {{
                console.error('[QR Auth] Error:', error);
                console.log('[QR Auth] Fallback to window.location');
                window.location.href = deepLink;
            }}
        }}
        
        async function checkStatus() {{
            try {{
                const r = await fetch('/qr-auth-status?session_id=' + sessionId);
                const d = await r.json();
                
                if (d.status === 'authorized') {{
                    document.getElementById('status').className = 'success';
                    document.getElementById('status').textContent = '‚úÖ –£—Å–ø–µ—à–Ω–æ!';
                    setTimeout(() => tg.close(), 2000);
                }} else if (d.status === 'expired') {{
                    document.getElementById('status').className = 'error';
                    document.getElementById('status').textContent = '‚è∞ –ò—Å—Ç–µ–∫';
                }} else {{
                    setTimeout(checkStatus, 2000);
                }}
            }} catch (e) {{
                setTimeout(checkStatus, 2000);
            }}
        }}
        
        checkStatus();
        
        document.addEventListener('visibilitychange', () => {{
            if (!document.hidden) checkStatus();
        }});
    </script>
</body>
</html>"""
    
    return HTMLResponse(content=html_content)


@app.get("/qr-auth-status")
async def qr_auth_status(session_id: str):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ QR –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    
    Args:
        session_id: ID QR —Å–µ—Å—Å–∏–∏
        
    Returns:
        JSON —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    """
    status = qr_auth_manager.get_session_status(session_id)
    return status


# ============================================================
# Admin Panel Endpoints –¥–ª—è Telegram Mini App
# ============================================================

from admin_panel_manager import admin_panel_manager
from functools import wraps
from typing import List


def require_admin(func):
    """Decorator –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ admin –ø—Ä–∞–≤"""
    @wraps(func)
    async def wrapper(*args, **kwargs):
        # –ò–∑–≤–ª–µ–∫–∞–µ–º admin_id –∏ token –∏–∑ kwargs
        admin_id = kwargs.get('admin_id')
        token = kwargs.get('token')
        
        if not admin_id or not token:
            raise HTTPException(400, "Missing admin_id or token")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ token –≤ Redis
        if not admin_panel_manager.verify_admin_session(token, admin_id):
            raise HTTPException(403, "Unauthorized: Invalid or expired session")
        
        return await func(*args, **kwargs)
    return wrapper


@app.get("/api/admin/users")
@require_admin
async def get_users_api(
    admin_id: int,
    token: str,
    page: int = 1,
    limit: int = 20,
    search: str = "",
    role: str = "",
    subscription: str = "",
    db: Session = Depends(get_db)
):
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –∏ –ø–æ–∏—Å–∫–æ–º)
    
    Args:
        admin_id: Telegram ID –∞–¥–º–∏–Ω–∞
        token: Session token
        page: –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        limit: –≠–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        search: –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏/username/telegram_id
        role: –§–∏–ª—å—Ç—Ä –ø–æ —Ä–æ–ª–∏ (admin/user)
        subscription: –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ
    """
    query = db.query(User)
    
    # –ü–æ–∏—Å–∫
    if search:
        search_filter = (
            User.first_name.ilike(f"%{search}%") |
            User.last_name.ilike(f"%{search}%") |
            User.username.ilike(f"%{search}%") |
            User.telegram_id.cast(String).ilike(f"%{search}%")
        )
        query = query.filter(search_filter)
    
    # –§–∏–ª—å—Ç—Ä—ã
    if role:
        query = query.filter(User.role == role)
    if subscription:
        query = query.filter(User.subscription_type == subscription)
    
    # Pagination
    total = query.count()
    offset = (page - 1) * limit
    users = query.order_by(User.created_at.desc()).offset(offset).limit(limit).all()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    return {
        "total": total,
        "page": page,
        "pages": (total + limit - 1) // limit,
        "users": [
            {
                "id": u.id,
                "telegram_id": u.telegram_id,
                "first_name": u.first_name,
                "last_name": u.last_name,
                "username": u.username,
                "role": u.role,
                "subscription_type": u.subscription_type,
                "max_channels": u.max_channels,
                "is_authenticated": u.is_authenticated,
                "is_blocked": u.is_blocked,
                "created_at": u.created_at.isoformat() if u.created_at else None,
                "subscription_started_at": u.subscription_started_at.isoformat() if u.subscription_started_at else None,
                "subscription_expires": u.subscription_expires.isoformat() if u.subscription_expires else None,
                "channels_count": len(u.channels)
            }
            for u in users
        ]
    }


@app.get("/api/admin/user/{user_id}")
@require_admin
async def get_user_detail_api(
    user_id: int,
    admin_id: int,
    token: str,
    db: Session = Depends(get_db)
):
    """–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    user = db.query(User).filter(User.id == user_id).first()
    
    if not user:
        raise HTTPException(404, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    return {
        "id": user.id,
        "telegram_id": user.telegram_id,
        "first_name": user.first_name,
        "last_name": user.last_name,
        "username": user.username,
        "role": user.role,
        "subscription_type": user.subscription_type,
        "max_channels": user.max_channels,
        "is_authenticated": user.is_authenticated,
        "is_blocked": user.is_blocked,
        "created_at": user.created_at.isoformat() if user.created_at else None,
        "subscription_started_at": user.subscription_started_at.isoformat() if user.subscription_started_at else None,
        "subscription_expires": user.subscription_expires.isoformat() if user.subscription_expires else None,
        "channels": [
            {
                "id": ch.id,
                "channel_username": ch.channel_username,
                "channel_title": ch.channel_title
            }
            for ch in user.channels
        ],
        "channels_count": len(user.channels)
    }


@app.post("/api/admin/user/{user_id}/role")
@require_admin
async def update_user_role_api(
    user_id: int,
    admin_id: int,
    token: str,
    role_data: dict,
    db: Session = Depends(get_db)
):
    """–ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = db.query(User).filter(User.id == user_id).first()
    
    if not user:
        raise HTTPException(404, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    new_role = role_data.get("role")
    if new_role not in ["admin", "user"]:
        raise HTTPException(400, "–ù–µ–≤–µ—Ä–Ω–∞—è —Ä–æ–ª—å. –î–æ—Å—Ç—É–ø–Ω—ã: admin, user")
    
    old_role = user.role
    user.role = new_role
    db.commit()
    
    logger.info(f"üëë –ê–¥–º–∏–Ω {admin_id} –∏–∑–º–µ–Ω–∏–ª —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}: {old_role} ‚Üí {new_role}")
    
    return {"success": True, "role": new_role}


@app.post("/api/admin/user/{user_id}/subscription")
@require_admin  
async def update_user_subscription_api(
    user_id: int,
    admin_id: int,
    token: str,
    sub_data: dict,
    db: Session = Depends(get_db)
):
    """–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    from subscription_config import get_subscription_info
    
    user = db.query(User).filter(User.id == user_id).first()
    
    if not user:
        raise HTTPException(404, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    subscription_type = sub_data.get("type")
    duration_days = sub_data.get("days")
    
    if subscription_type not in ["free", "trial", "basic", "premium", "enterprise"]:
        raise HTTPException(400, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ tier
    tier_info = get_subscription_info(subscription_type)
    
    old_subscription = user.subscription_type
    user.subscription_type = subscription_type
    user.max_channels = tier_info['max_channels']
    user.subscription_started_at = datetime.now(timezone.utc)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º expires –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω duration
    if duration_days and duration_days > 0:
        user.subscription_expires = datetime.now(timezone.utc) + timedelta(days=duration_days)
    else:
        user.subscription_expires = None
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ history
    from models import SubscriptionHistory
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º action
    action = "created"
    if old_subscription and subscription_type != old_subscription:
        if subscription_type in ["premium", "enterprise"] and old_subscription in ["free", "trial", "basic"]:
            action = "upgraded"
        elif subscription_type in ["free", "basic"] and old_subscription in ["premium", "enterprise"]:
            action = "downgraded"
        else:
            action = "renewed"
    
    # –ü–æ–ª—É—á–∞–µ–º admin user.id –∏–∑ telegram_id
    admin_user = db.query(User).filter(User.telegram_id == admin_id).first()
    admin_user_id = admin_user.id if admin_user else None
    
    history = SubscriptionHistory(
        user_id=user.id,
        action=action,
        old_type=old_subscription,
        new_type=subscription_type,
        changed_by=admin_user_id,  # user.id –∞–¥–º–∏–Ω–∞, –Ω–µ telegram_id
        notes=f"Admin panel: manual change by admin telegram_id {admin_id}"
    )
    db.add(history)
    
    db.commit()
    
    logger.info(f"üíé –ê–¥–º–∏–Ω {admin_id} –∏–∑–º–µ–Ω–∏–ª –ø–æ–¥–ø–∏—Å–∫—É {user.telegram_id}: {old_subscription} ‚Üí {subscription_type}")
    
    return {
        "success": True,
        "subscription_type": subscription_type,
        "max_channels": user.max_channels,
        "expires": user.subscription_expires.isoformat() if user.subscription_expires else None
    }


@app.post("/api/admin/user/{user_id}/max_channels")
@require_admin
async def update_user_max_channels_api(
    user_id: int,
    admin_id: int,
    token: str,
    data: dict,
    db: Session = Depends(get_db)
):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç –∫–∞–Ω–∞–ª–æ–≤"""
    user = db.query(User).filter(User.id == user_id).first()
    
    if not user:
        raise HTTPException(404, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    max_channels = data.get("max_channels")
    if not isinstance(max_channels, int) or max_channels < 1:
        raise HTTPException(400, "max_channels –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º >= 1")
    
    old_limit = user.max_channels
    user.max_channels = max_channels
    db.commit()
    
    logger.info(f"üìä –ê–¥–º–∏–Ω {admin_id} –∏–∑–º–µ–Ω–∏–ª –ª–∏–º–∏—Ç –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è {user.telegram_id}: {old_limit} ‚Üí {max_channels}")
    
    return {"success": True, "max_channels": max_channels}


@app.post("/api/admin/user/{user_id}/block")
@require_admin
async def block_user_api(
    user_id: int,
    admin_id: int,
    token: str,
    data: dict,
    db: Session = Depends(get_db)
):
    """–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = db.query(User).filter(User.id == user_id).first()
    
    if not user:
        raise HTTPException(404, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    blocked = data.get("blocked", False)
    
    user.is_blocked = blocked
    if blocked:
        user.block_expires = datetime.now(timezone.utc) + timedelta(days=365)  # 1 –≥–æ–¥
    else:
        user.block_expires = None
    
    db.commit()
    
    action = "–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª" if blocked else "—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª"
    logger.info(f"üö´ –ê–¥–º–∏–Ω {admin_id} {action} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}")
    
    return {"success": True, "is_blocked": blocked}


@app.delete("/api/admin/user/{user_id}/auth")
@require_admin
async def reset_user_auth_api(
    user_id: int,
    admin_id: int,
    token: str,
    db: Session = Depends(get_db)
):
    """–°–±—Ä–æ—Å–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = db.query(User).filter(User.id == user_id).first()
    
    if not user:
        raise HTTPException(404, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    user.is_authenticated = False
    user.auth_error = None
    user.last_auth_check = None
    user.phone_number = None
    
    # –£–¥–∞–ª—è–µ–º session —Ñ–∞–π–ª
    from shared_auth_manager import shared_auth_manager
    import os
    
    session_path = shared_auth_manager._get_session_path(user.telegram_id)
    if os.path.exists(session_path):
        try:
            os.remove(session_path)
            logger.info(f"üóëÔ∏è Session —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω –¥–ª—è {user.telegram_id}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è session: {e}")
    
    # –û—Ç–∫–ª—é—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–µ–Ω
    if user.telegram_id in shared_auth_manager.active_clients:
        try:
            await shared_auth_manager.disconnect_client(user.telegram_id)
        except:
            pass
    
    db.commit()
    
    logger.info(f"üîÑ –ê–¥–º–∏–Ω {admin_id} —Å–±—Ä–æ—Å–∏–ª –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}")
    
    return {"success": True}


# ============================================================
# Admin Panel - Invite Codes API
# ============================================================

@app.get("/api/admin/invites")
@require_admin
async def get_invites_api(
    admin_id: int,
    token: str,
    page: int = 1,
    limit: int = 20,
    status: str = "",  # active, used, expired
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–Ω–≤–∞–π—Ç –∫–æ–¥–æ–≤"""
    query = db.query(InviteCode)
    
    # –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
    if status == "active":
        query = query.filter(
            InviteCode.uses_count < InviteCode.max_uses,
            InviteCode.expires_at > datetime.now(timezone.utc)
        )
    elif status == "used":
        query = query.filter(InviteCode.uses_count >= InviteCode.max_uses)
    elif status == "expired":
        query = query.filter(InviteCode.expires_at <= datetime.now(timezone.utc))
    
    # Pagination
    total = query.count()
    offset = (page - 1) * limit
    invites = query.order_by(InviteCode.created_at.desc()).offset(offset).limit(limit).all()
    
    return {
        "total": total,
        "page": page,
        "pages": (total + limit - 1) // limit,
        "invites": [
            {
                "code": inv.code,
                "default_subscription": inv.default_subscription,
                "max_uses": inv.max_uses,
                "uses_count": inv.uses_count,
                "default_trial_days": inv.default_trial_days,
                "created_at": inv.created_at.isoformat() if inv.created_at else None,
                "expires_at": inv.expires_at.isoformat() if inv.expires_at else None,
                "is_valid": inv.is_valid(),
                "used_by": inv.user.telegram_id if inv.user else None,
                "used_by_name": inv.user.first_name if inv.user else None
            }
            for inv in invites
        ]
    }


@app.post("/api/admin/invite/create")
@require_admin
async def create_invite_api(
    admin_id: int,
    token: str,
    invite_data: dict,
    db: Session = Depends(get_db)
):
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∏–Ω–≤–∞–π—Ç –∫–æ–¥"""
    subscription = invite_data.get("subscription", "free")
    max_uses = invite_data.get("max_uses", 1)
    expires_days = invite_data.get("expires_days", 30)
    trial_days = invite_data.get("trial_days", 0)
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    if subscription not in ["free", "trial", "basic", "premium", "enterprise"]:
        raise HTTPException(400, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏")
    
    if max_uses < 1:
        raise HTTPException(400, "max_uses –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å >= 1")
    
    # –í–ê–ñ–ù–û: –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π user.id –∏–∑ –ë–î –ø–æ telegram_id
    # admin_id –∑–¥–µ—Å—å - —ç—Ç–æ telegram_id, –∞ created_by –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å users.id
    admin_user = db.query(User).filter(User.telegram_id == admin_id).first()
    if not admin_user:
        raise HTTPException(404, "–ê–¥–º–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–¥
    new_code = InviteCode.generate_code()
    
    invite = InviteCode(
        code=new_code,
        created_by=admin_user.id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º user.id, –∞ –Ω–µ telegram_id!
        default_subscription=subscription,
        max_uses=max_uses,
        default_trial_days=trial_days,
        expires_at=datetime.now(timezone.utc) + timedelta(days=expires_days)
    )
    
    db.add(invite)
    db.commit()
    db.refresh(invite)
    
    logger.info(f"üé´ –ê–¥–º–∏–Ω {admin_id} —Å–æ–∑–¥–∞–ª –∏–Ω–≤–∞–π—Ç –∫–æ–¥ {new_code} ({subscription}, {max_uses} uses, {expires_days} days)")
    
    return {
        "success": True,
        "code": new_code,
        "subscription": subscription,
        "max_uses": max_uses,
        "expires_at": invite.expires_at.isoformat()
    }


@app.post("/api/admin/invite/{code}/deactivate")
@require_admin
async def deactivate_invite_api(
    code: str,
    admin_id: int,
    token: str,
    db: Session = Depends(get_db)
):
    """–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∏–Ω–≤–∞–π—Ç –∫–æ–¥"""
    invite = db.query(InviteCode).filter(InviteCode.code == code).first()
    
    if not invite:
        raise HTTPException(404, "–ò–Ω–≤–∞–π—Ç –∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º expires –≤ –ø—Ä–æ—à–ª–æ–µ
    invite.expires_at = datetime.now(timezone.utc) - timedelta(days=1)
    db.commit()
    
    logger.info(f"üö´ –ê–¥–º–∏–Ω {admin_id} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –∏–Ω–≤–∞–π—Ç –∫–æ–¥ {code}")
    
    return {"success": True}


@app.get("/api/admin/invite/{code}/usage")
@require_admin
async def get_invite_usage_api(
    code: str,
    admin_id: int,
    token: str,
    db: Session = Depends(get_db)
):
    """–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∏–Ω–≤–∞–π—Ç –∫–æ–¥"""
    invite = db.query(InviteCode).filter(InviteCode.code == code).first()
    
    if not invite:
        raise HTTPException(404, "–ò–Ω–≤–∞–π—Ç –∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö —ç—Ç–∏–º –∫–æ–¥–æ–º
    users = db.query(User).filter(User.invited_by == invite.created_by).all()
    
    return {
        "code": code,
        "uses_count": invite.uses_count,
        "max_uses": invite.max_uses,
        "users": [
            {
                "telegram_id": u.telegram_id,
                "first_name": u.first_name,
                "username": u.username,
                "created_at": u.created_at.isoformat() if u.created_at else None
            }
            for u in users
        ]
    }


# ============================================================
# Admin Panel - Statistics API
# ============================================================

@app.get("/api/admin/stats/summary")
@require_admin
async def get_stats_summary_api(
    admin_id: int,
    token: str,
    db: Session = Depends(get_db)
):
    """–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    total_users = db.query(User).count()
    authenticated_users = db.query(User).filter(User.is_authenticated == True).count()
    
    # –ü–æ –ø–æ–¥–ø–∏—Å–∫–∞–º
    subscription_counts = {}
    for sub_type in ["free", "trial", "basic", "premium", "enterprise"]:
        count = db.query(User).filter(User.subscription_type == sub_type).count()
        subscription_counts[sub_type] = count
    
    # –ü–æ —Ä–æ–ª—è–º
    admins_count = db.query(User).filter(User.role == "admin").count()
    
    # –ò–Ω–≤–∞–π—Ç –∫–æ–¥—ã
    total_invites = db.query(InviteCode).count()
    active_invites = db.query(InviteCode).filter(
        InviteCode.uses_count < InviteCode.max_uses,
        InviteCode.expires_at > datetime.now(timezone.utc)
    ).count()
    
    # –ì—Ä—É–ø–ø—ã (–Ω–æ–≤–æ–µ)
    from models import Group, GroupMention
    total_groups = db.query(Group).count()
    today = datetime.now(timezone.utc).replace(hour=0, minute=0, second=0, microsecond=0)
    mentions_today = db.query(GroupMention).filter(
        GroupMention.mentioned_at >= today
    ).count()
    
    return {
        "users": {
            "total": total_users,
            "authenticated": authenticated_users,
            "admins": admins_count
        },
        "subscriptions": subscription_counts,
        "invites": {
            "total": total_invites,
            "active": active_invites
        },
        "groups": {
            "total": total_groups,
            "mentions_today": mentions_today
        }
    }


@app.get("/api/admin/stats/registrations")
@require_admin
async def get_registrations_stats_api(
    admin_id: int,
    token: str,
    days: int = 7,
    db: Session = Depends(get_db)
):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –ø–æ –¥–Ω—è–º"""
    from sqlalchemy import func, Date, cast
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π
    start_date = datetime.now(timezone.utc) - timedelta(days=days)
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º
    registrations = db.query(
        func.date(User.created_at).label('date'),
        func.count(User.id).label('count')
    ).filter(
        User.created_at >= start_date
    ).group_by(
        func.date(User.created_at)
    ).order_by(
        func.date(User.created_at)
    ).all()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –¥–ª—è Chart.js
    labels = []
    data = []
    
    for reg in registrations:
        labels.append(reg.date.strftime('%d.%m'))
        data.append(reg.count)
    
    return {
        "labels": labels,
        "data": data,
        "days": days
    }


@app.get("/api/admin/stats/subscriptions")
@require_admin
async def get_subscriptions_stats_api(
    admin_id: int,
    token: str,
    db: Session = Depends(get_db)
):
    """Breakdown –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è Pie chart"""
    subscriptions = {}
    
    for sub_type in ["free", "trial", "basic", "premium", "enterprise"]:
        count = db.query(User).filter(User.subscription_type == sub_type).count()
        subscriptions[sub_type] = count
    
    return subscriptions


# ============================================================
# Admin API - Groups Management
# ============================================================

@app.get("/api/admin/groups")
@require_admin
async def get_all_groups_api(
    admin_id: int,
    token: str,
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≥—Ä—É–ø–ø –≤ —Å–∏—Å—Ç–µ–º–µ"""
    from models import Group
    
    groups = db.query(Group).all()
    
    return {
        "total": len(groups),
        "groups": [
            {
                "id": g.id,
                "group_id": g.group_id,
                "group_title": g.group_title,
                "group_username": g.group_username,
                "created_at": g.created_at.isoformat() if g.created_at else None,
                "users_count": len(g.users)
            }
            for g in groups
        ]
    }


@app.get("/api/admin/user/{user_id}/groups")
@require_admin
async def get_user_groups_api(
    user_id: int,
    admin_id: int,
    token: str,
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–∏—Ç—å –≥—Ä—É–ø–ø—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    from models import Group, user_group
    
    user = db.query(User).filter(User.id == user_id).first()
    if not user:
        raise HTTPException(status_code=404, detail="User not found")
    
    # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    groups = db.query(Group).join(
        user_group,
        Group.id == user_group.c.group_id
    ).filter(
        user_group.c.user_id == user.id
    ).all()
    
    result = []
    for group in groups:
        subscription = db.execute(
            user_group.select().where(
                (user_group.c.user_id == user.id) &
                (user_group.c.group_id == group.id)
            )
        ).fetchone()
        
        result.append({
            "id": group.id,
            "group_id": group.group_id,
            "group_title": group.group_title,
            "group_username": group.group_username,
            "is_active": subscription.is_active if subscription else False,
            "mentions_enabled": subscription.mentions_enabled if subscription else False,
            "created_at": subscription.created_at.isoformat() if subscription and subscription.created_at else None
        })
    
    return {
        "user_id": user_id,
        "telegram_id": user.telegram_id,
        "total_groups": len(result),
        "groups": result
    }


@app.post("/api/admin/user/{user_id}/group/{group_id}/mentions")
@require_admin
async def toggle_group_mentions_api(
    user_id: int,
    group_id: int,
    admin_id: int,
    token: str,
    enabled: bool,
    db: Session = Depends(get_db)
):
    """–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É–ø–æ–º–∏–Ω–∞–Ω–∏—è—Ö –¥–ª—è –≥—Ä—É–ø–ø—ã"""
    from models import user_group
    
    user = db.query(User).filter(User.id == user_id).first()
    if not user:
        raise HTTPException(status_code=404, detail="User not found")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
    db.execute(
        user_group.update().where(
            (user_group.c.user_id == user_id) &
            (user_group.c.group_id == group_id)
        ).values(mentions_enabled=enabled)
    )
    db.commit()
    
    return {
        "success": True,
        "user_id": user_id,
        "group_id": group_id,
        "mentions_enabled": enabled
    }


@app.get("/api/admin/stats/groups")
@require_admin
async def get_groups_stats_api(
    admin_id: int,
    token: str,
    db: Session = Depends(get_db)
):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≥—Ä—É–ø–ø–∞–º"""
    from models import Group, GroupMention
    from datetime import timedelta
    
    total_groups = db.query(Group).count()
    
    # –£–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    today = datetime.now(timezone.utc).replace(hour=0, minute=0, second=0, microsecond=0)
    mentions_today = db.query(GroupMention).filter(
        GroupMention.mentioned_at >= today
    ).count()
    
    # –£–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ –Ω–µ–¥–µ–ª—é
    week_ago = datetime.now(timezone.utc) - timedelta(days=7)
    mentions_week = db.query(GroupMention).filter(
        GroupMention.mentioned_at >= week_ago
    ).count()
    
    # –°—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    from group_monitor_service import group_monitor_service
    monitor_status = group_monitor_service.get_status()
    
    return {
        "total_groups": total_groups,
        "mentions_today": mentions_today,
        "mentions_week": mentions_week,
        "active_monitors": monitor_status["active_monitors"],
        "monitored_groups_total": monitor_status["monitored_groups_total"]
    }


# ============================================================
# Admin Panel - Optimized Multi-Page UI (Lightweight)
# ============================================================

@app.get("/admin-panel", response_class=HTMLResponse)
async def admin_panel_menu(admin_id: int, token: str):
    """
    Admin Panel - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    
    Args:
        admin_id: Telegram ID –∞–¥–º–∏–Ω–∞
        token: Session token –∏–∑ Redis
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
    if not admin_panel_manager.verify_admin_session(token, admin_id):
        return HTMLResponse(content="""
            <!DOCTYPE html>
            <html>
            <head>
                <meta charset="UTF-8">
                <title>Unauthorized</title>
                <script src="https://telegram.org/js/telegram-web-app.js"></script>
            </head>
            <body style="font-family: -apple-system, sans-serif; padding: 20px; text-align: center;">
                <h1>‚ùå Unauthorized</h1>
                <p>Session –∏—Å—Ç–µ–∫–ª–∞ –∏–ª–∏ –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º</p>
                <p>–ó–∞–∫—Ä–æ–π—Ç–µ —ç—Ç–æ –æ–∫–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /admin —Å–Ω–æ–≤–∞</p>
                <script>
                    window.Telegram.WebApp.ready();
                    window.Telegram.WebApp.expand();
                </script>
            </body>
            </html>
        """)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ admin session –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–º–µ–Ω–∏
    session_data = admin_panel_manager.get_session_data(token)
    admin_name = session_data.get("admin_name", "Admin") if session_data else "Admin"
    
    # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –º–µ–Ω—é
    db = SessionLocal()
    try:
        total_users = db.query(User).count()
        total_invites = db.query(InviteCode).count()
    finally:
        db.close()
    
    # –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –º–µ–Ω—é Admin Panel (–ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏ —Å QR Auth)
    html_content = f"""
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Panel</title>
    <script src="https://telegram.org/js/telegram-web-app.js"></script>
    <style>
        body {{
            font-family: -apple-system, system-ui, sans-serif;
            background: var(--tg-theme-bg-color, #fff);
            color: var(--tg-theme-text-color, #000);
            padding: 20px;
            text-align: center;
            margin: 0;
        }}
        h2 {{
            margin-bottom: 10px;
        }}
        .subtitle {{
            color: var(--tg-theme-hint-color, #999);
            font-size: 14px;
            margin-bottom: 30px;
        }}
        .menu {{
            max-width: 400px;
            margin: 0 auto;
        }}
        .menu-item {{
            background: var(--tg-theme-secondary-bg-color, #f0f0f0);
            padding: 16px;
            margin: 12px 0;
            border-radius: 12px;
            cursor: pointer;
            transition: opacity 0.2s;
        }}
        .menu-item:active {{
            opacity: 0.7;
        }}
        .menu-item-title {{
            font-size: 16px;
            font-weight: 600;
            margin-bottom: 4px;
        }}
        .menu-item-desc {{
            font-size: 13px;
            color: var(--tg-theme-hint-color, #999);
        }}
        .stats {{
            display: flex;
            justify-content: space-around;
            margin: 20px 0 30px 0;
        }}
        .stat {{
            text-align: center;
        }}
        .stat-value {{
            font-size: 24px;
            font-weight: 700;
            color: var(--tg-theme-button-color, #0088cc);
        }}
        .stat-label {{
            font-size: 12px;
            color: var(--tg-theme-hint-color, #999);
            margin-top: 4px;
        }}
    </style>
</head>
<body>
    <h2>üëë Admin Panel</h2>
    <div class="subtitle">–ü—Ä–∏–≤–µ—Ç, {admin_name}!</div>
    
    <div class="stats">
        <div class="stat">
            <div class="stat-value">{total_users}</div>
            <div class="stat-label">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</div>
        </div>
        <div class="stat">
            <div class="stat-value">{total_invites}</div>
            <div class="stat-label">–ò–Ω–≤–∞–π—Ç –∫–æ–¥–æ–≤</div>
        </div>
    </div>
    
    <div class="menu">
        <div class="menu-item" onclick="openPage('users')">
            <div class="menu-item-title">üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</div>
            <div class="menu-item-desc">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏</div>
        </div>
        
        <div class="menu-item" onclick="openPage('invites')">
            <div class="menu-item-title">üé´ –ò–Ω–≤–∞–π—Ç –∫–æ–¥—ã</div>
            <div class="menu-item-desc">–°–æ–∑–¥–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞–º–∏</div>
        </div>
    </div>
    
    <script>
        const tg = window.Telegram.WebApp;
        const adminId = {admin_id};
        const token = "{token}";
        
        tg.ready();
        tg.expand();
        
        function openPage(page) {{
            const baseUrl = window.location.origin + window.location.pathname;
            const url = baseUrl + '/' + page + '?admin_id=' + adminId + '&token=' + token;
            
            if (tg.openLink) {{
                tg.openLink(url);
            }} else {{
                window.location.href = url;
            }}
        }}
    </script>
</body>
</html>"""
    
    return HTMLResponse(content=html_content)


@app.get("/admin-panel/users", response_class=HTMLResponse)
async def admin_panel_users(admin_id: int, token: str):
    """Admin Panel - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
    if not admin_panel_manager.verify_admin_session(token, admin_id):
        return HTMLResponse(content="""
            <!DOCTYPE html>
            <html>
            <head>
                <meta charset="UTF-8">
                <script src="https://telegram.org/js/telegram-web-app.js"></script>
            </head>
            <body style="font-family: -apple-system, sans-serif; padding: 20px; text-align: center;">
                <h1>‚ùå Unauthorized</h1>
                <p>Session –∏—Å—Ç–µ–∫–ª–∞</p>
                <script>window.Telegram.WebApp.ready(); window.Telegram.WebApp.expand();</script>
            </body>
            </html>
        """)
    
    html_content = f"""
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Users</title>
    <script src="https://telegram.org/js/telegram-web-app.js"></script>
    <style>
        body {{
            font-family: -apple-system, system-ui, sans-serif;
            background: var(--tg-theme-bg-color, #fff);
            color: var(--tg-theme-text-color, #000);
            padding: 16px;
            margin: 0;
        }}
        h3 {{
            margin-bottom: 16px;
        }}
        input {{
            width: 100%;
            padding: 12px;
            border: 1px solid var(--tg-theme-hint-color, #ccc);
            border-radius: 8px;
            background: var(--tg-theme-secondary-bg-color, #f0f0f0);
            color: var(--tg-theme-text-color, #000);
            font-size: 14px;
            margin-bottom: 16px;
        }}
        .user-card {{
            background: var(--tg-theme-secondary-bg-color, #f0f0f0);
            padding: 12px;
            margin-bottom: 10px;
            border-radius: 10px;
        }}
        .user-name {{
            font-weight: 600;
            font-size: 15px;
            margin-bottom: 6px;
        }}
        .user-info {{
            font-size: 12px;
            color: var(--tg-theme-hint-color, #999);
            margin-bottom: 8px;
        }}
        .badges {{
            display: flex;
            gap: 6px;
            flex-wrap: wrap;
        }}
        .badge {{
            padding: 4px 10px;
            border-radius: 12px;
            font-size: 11px;
            font-weight: 500;
        }}
        .badge-admin {{ background: #ff9800; color: #fff; }}
        .badge-premium {{ background: #4caf50; color: #fff; }}
        .badge-basic {{ background: #2196f3; color: #fff; }}
        .badge-free {{ background: #9e9e9e; color: #fff; }}
        button {{
            width: 100%;
            padding: 12px;
            margin: 10px 0;
            border: none;
            border-radius: 8px;
            background: var(--tg-theme-button-color, #0088cc);
            color: var(--tg-theme-button-text-color, #fff);
            font-size: 15px;
            cursor: pointer;
        }}
        button:active {{ opacity: 0.8; }}
        .loading {{
            text-align: center;
            padding: 20px;
            color: var(--tg-theme-hint-color, #999);
        }}
        .modal {{
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.5);
            z-index: 1000;
        }}
        .modal.active {{ display: flex; align-items: center; justify-content: center; }}
        .modal-content {{
            background: var(--tg-theme-bg-color, #fff);
            padding: 20px;
            border-radius: 16px;
            max-width: 90%;
            width: 400px;
        }}
        .form-group {{
            margin-bottom: 12px;
            text-align: left;
        }}
        .form-group label {{
            display: block;
            margin-bottom: 6px;
            font-size: 13px;
            font-weight: 500;
        }}
        .form-group select {{
            width: 100%;
            padding: 10px;
            border: 1px solid var(--tg-theme-hint-color, #ccc);
            border-radius: 8px;
            background: var(--tg-theme-secondary-bg-color, #f0f0f0);
            color: var(--tg-theme-text-color, #000);
        }}
        .btn-secondary {{
            background: var(--tg-theme-secondary-bg-color, #f0f0f0);
            color: var(--tg-theme-text-color, #000);
        }}
    </style>
</head>
<body>
    <h3>üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</h3>
    <input type="text" id="search" placeholder="üîç –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏..." oninput="searchUsers()">
    
    <div id="usersList" class="loading">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
    
    <button onclick="goBack()">‚Üê –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é</button>
    
    <!-- Edit User Modal -->
    <div id="editModal" class="modal">
        <div class="modal-content">
            <h4 style="margin-bottom: 16px;">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</h4>
            <div id="editForm"></div>
        </div>
    </div>
    
    <script>
        const tg = window.Telegram.WebApp;
        const adminId = {admin_id};
        const token = "{token}";
        let allUsers = [];
        
        tg.ready();
        tg.expand();
        
        async function loadUsers() {{
            try {{
                const r = await fetch(`/api/admin/users?admin_id=${{adminId}}&token=${{token}}&limit=100`);
                const data = await r.json();
                allUsers = data.users || [];
                renderUsers(allUsers);
            }} catch (e) {{
                document.getElementById('usersList').innerHTML = '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏';
            }}
        }}
        
        function renderUsers(users) {{
            const html = users.map(u => `
                <div class="user-card" onclick="editUser(${{u.id}})">
                    <div class="user-name">${{u.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}} ${{u.last_name || ''}}</div>
                    <div class="user-info">ID: ${{u.telegram_id}}</div>
                    <div class="badges">
                        ${{u.role === 'admin' ? '<span class="badge badge-admin">üëë Admin</span>' : ''}}
                        <span class="badge badge-${{u.subscription_type}}">${{u.subscription_type}}</span>
                        ${{u.is_authenticated ? '<span class="badge" style="background: #4caf50; color: #fff;">‚úÖ Auth</span>' : ''}}
                    </div>
                </div>
            `).join('');
            
            document.getElementById('usersList').innerHTML = html || '<div class="loading">–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</div>';
        }}
        
        function searchUsers() {{
            const query = document.getElementById('search').value.toLowerCase();
            const filtered = allUsers.filter(u => 
                (u.first_name || '').toLowerCase().includes(query) ||
                (u.last_name || '').toLowerCase().includes(query) ||
                String(u.telegram_id).includes(query)
            );
            renderUsers(filtered);
        }}
        
        function editUser(userId) {{
            const user = allUsers.find(u => u.id === userId);
            if (!user) return;
            
            document.getElementById('editForm').innerHTML = `
                <div class="form-group">
                    <label>–†–æ–ª—å:</label>
                    <select id="editRole">
                        <option value="user" ${{user.role === 'user' ? 'selected' : ''}}>User</option>
                        <option value="admin" ${{user.role === 'admin' ? 'selected' : ''}}>Admin</option>
                    </select>
                </div>
                <div class="form-group">
                    <label>–ü–æ–¥–ø–∏—Å–∫–∞:</label>
                    <select id="editSub">
                        <option value="free" ${{user.subscription_type === 'free' ? 'selected' : ''}}>Free</option>
                        <option value="trial" ${{user.subscription_type === 'trial' ? 'selected' : ''}}>Trial</option>
                        <option value="basic" ${{user.subscription_type === 'basic' ? 'selected' : ''}}>Basic</option>
                        <option value="premium" ${{user.subscription_type === 'premium' ? 'selected' : ''}}>Premium</option>
                        <option value="enterprise" ${{user.subscription_type === 'enterprise' ? 'selected' : ''}}>Enterprise</option>
                    </select>
                </div>
                <button onclick="saveChanges(${{userId}})">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
                <button class="btn-secondary" onclick="closeModal()">–û—Ç–º–µ–Ω–∞</button>
            `;
            
            document.getElementById('editModal').classList.add('active');
        }}
        
        async function saveChanges(userId) {{
            const role = document.getElementById('editRole').value;
            const sub = document.getElementById('editSub').value;
            
            try {{
                await fetch(`/api/admin/user/${{userId}}/role?admin_id=${{adminId}}&token=${{token}}`, {{
                    method: 'POST',
                    headers: {{'Content-Type': 'application/json'}},
                    body: JSON.stringify({{role}})
                }});
                
                await fetch(`/api/admin/user/${{userId}}/subscription?admin_id=${{adminId}}&token=${{token}}`, {{
                    method: 'POST',
                    headers: {{'Content-Type': 'application/json'}},
                    body: JSON.stringify({{type: sub, days: 0}})
                }});
                
                closeModal();
                loadUsers();
                tg.showAlert('‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ!');
            }} catch (e) {{
                tg.showAlert('‚ùå –û—à–∏–±–∫–∞: ' + e.message);
            }}
        }}
        
        function closeModal() {{
            document.getElementById('editModal').classList.remove('active');
        }}
        
        function goBack() {{
            const url = window.location.origin + '/admin-panel?admin_id=' + adminId + '&token=' + token;
            if (tg.openLink) {{
                tg.openLink(url);
            }} else {{
                window.location.href = url;
            }}
        }}
        
        loadUsers();
    </script>
</body>
</html>"""
    
    return HTMLResponse(content=html_content)


@app.get("/admin-panel/invites", response_class=HTMLResponse)
async def admin_panel_invites(admin_id: int, token: str):
    """Admin Panel - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–≤–∞–π—Ç –∫–æ–¥–∞–º–∏"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
    if not admin_panel_manager.verify_admin_session(token, admin_id):
        return HTMLResponse(content="""
            <!DOCTYPE html>
            <html>
            <head>
                <meta charset="UTF-8">
                <script src="https://telegram.org/js/telegram-web-app.js"></script>
            </head>
            <body style="font-family: -apple-system, sans-serif; padding: 20px; text-align: center;">
                <h1>‚ùå Unauthorized</h1>
                <p>Session –∏—Å—Ç–µ–∫–ª–∞</p>
                <script>window.Telegram.WebApp.ready(); window.Telegram.WebApp.expand();</script>
            </body>
            </html>
        """)
    
    html_content = f"""
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Invite Codes</title>
    <script src="https://telegram.org/js/telegram-web-app.js"></script>
    <style>
        body {{
            font-family: -apple-system, system-ui, sans-serif;
            background: var(--tg-theme-bg-color, #fff);
            color: var(--tg-theme-text-color, #000);
            padding: 16px;
            margin: 0;
        }}
        h3 {{
            margin-bottom: 16px;
        }}
        .invite-card {{
            background: var(--tg-theme-secondary-bg-color, #f0f0f0);
            padding: 12px;
            margin-bottom: 10px;
            border-radius: 10px;
        }}
        .invite-code {{
            font-family: monospace;
            font-size: 18px;
            font-weight: 700;
            margin-bottom: 8px;
            color: var(--tg-theme-button-color, #0088cc);
        }}
        .invite-info {{
            font-size: 12px;
            color: var(--tg-theme-hint-color, #999);
            margin-bottom: 4px;
        }}
        .badge {{
            display: inline-block;
            padding: 4px 10px;
            border-radius: 12px;
            font-size: 11px;
            font-weight: 500;
            margin-right: 6px;
        }}
        .badge-active {{ background: #4caf50; color: #fff; }}
        .badge-expired {{ background: #f44336; color: #fff; }}
        .badge-used {{ background: #9e9e9e; color: #fff; }}
        button {{
            width: 100%;
            padding: 12px;
            margin: 10px 0;
            border: none;
            border-radius: 8px;
            background: var(--tg-theme-button-color, #0088cc);
            color: var(--tg-theme-button-text-color, #fff);
            font-size: 15px;
            cursor: pointer;
        }}
        button:active {{ opacity: 0.8; }}
        .btn-secondary {{
            background: var(--tg-theme-secondary-bg-color, #f0f0f0);
            color: var(--tg-theme-text-color, #000);
        }}
        .loading {{
            text-align: center;
            padding: 20px;
            color: var(--tg-theme-hint-color, #999);
        }}
        .modal {{
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.5);
            z-index: 1000;
        }}
        .modal.active {{ display: flex; align-items: center; justify-content: center; }}
        .modal-content {{
            background: var(--tg-theme-bg-color, #fff);
            padding: 20px;
            border-radius: 16px;
            max-width: 90%;
            width: 400px;
        }}
        .form-group {{
            margin-bottom: 12px;
            text-align: left;
        }}
        .form-group label {{
            display: block;
            margin-bottom: 6px;
            font-size: 13px;
            font-weight: 500;
        }}
        .form-group select,
        .form-group input {{
            width: 100%;
            padding: 10px;
            border: 1px solid var(--tg-theme-hint-color, #ccc);
            border-radius: 8px;
            background: var(--tg-theme-secondary-bg-color, #f0f0f0);
            color: var(--tg-theme-text-color, #000);
        }}
    </style>
</head>
<body>
    <h3>üé´ –ò–Ω–≤–∞–π—Ç –∫–æ–¥—ã</h3>
    
    <button onclick="showCreateModal()">+ –°–æ–∑–¥–∞—Ç—å –∫–æ–¥</button>
    
    <div id="invitesList" class="loading">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
    
    <button class="btn-secondary" onclick="goBack()">‚Üê –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é</button>
    
    <!-- Create Invite Modal -->
    <div id="createModal" class="modal">
        <div class="modal-content">
            <h4 style="margin-bottom: 16px;">–°–æ–∑–¥–∞—Ç—å –∏–Ω–≤–∞–π—Ç –∫–æ–¥</h4>
            <div class="form-group">
                <label>–ü–æ–¥–ø–∏—Å–∫–∞:</label>
                <select id="inviteSub">
                    <option value="free">Free (3 –∫–∞–Ω–∞–ª–∞)</option>
                    <option value="trial">Trial (10 –∫–∞–Ω–∞–ª–æ–≤, 7 –¥–Ω–µ–π)</option>
                    <option value="basic">Basic (10 –∫–∞–Ω–∞–ª–æ–≤)</option>
                    <option value="premium" selected>Premium (50 –∫–∞–Ω–∞–ª–æ–≤)</option>
                    <option value="enterprise">Enterprise (999 –∫–∞–Ω–∞–ª–æ–≤)</option>
                </select>
            </div>
            <div class="form-group">
                <label>–ú–∞–∫—Å. –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π:</label>
                <input type="number" id="inviteMaxUses" value="1" min="1">
            </div>
            <div class="form-group">
                <label>Trial –ø–µ—Ä–∏–æ–¥ (–¥–Ω–µ–π):</label>
                <input type="number" id="inviteTrialDays" value="0" min="0">
            </div>
            <div class="form-group">
                <label>–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è (–¥–Ω–µ–π):</label>
                <input type="number" id="inviteExpires" value="30" min="1">
            </div>
            <button onclick="createInvite()">–°–æ–∑–¥–∞—Ç—å</button>
            <button class="btn-secondary" onclick="closeModal()">–û—Ç–º–µ–Ω–∞</button>
        </div>
    </div>
    
    <script>
        const tg = window.Telegram.WebApp;
        const adminId = {admin_id};
        const token = "{token}";
        
        tg.ready();
        tg.expand();
        
        async function loadInvites() {{
            try {{
                const r = await fetch(`/api/admin/invites?admin_id=${{adminId}}&token=${{token}}&limit=100`);
                const data = await r.json();
                renderInvites(data.invites || []);
            }} catch (e) {{
                document.getElementById('invitesList').innerHTML = '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏';
            }}
        }}
        
        function renderInvites(invites) {{
            const html = invites.map(inv => {{
                const now = new Date();
                const expires = new Date(inv.expires_at);
                const isExpired = expires < now;
                const isUsed = inv.uses_count >= inv.max_uses;
                
                let status = '';
                if (isUsed) status = '<span class="badge badge-used">–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω</span>';
                else if (isExpired) status = '<span class="badge badge-expired">–ò—Å—Ç–µ–∫</span>';
                else status = '<span class="badge badge-active">–ê–∫—Ç–∏–≤–µ–Ω</span>';
                
                return `
                    <div class="invite-card">
                        <div class="invite-code">${{inv.code}}</div>
                        <div class="invite-info">–ü–æ–¥–ø–∏—Å–∫–∞: ${{inv.default_subscription}}</div>
                        <div class="invite-info">–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: ${{inv.uses_count}}/${{inv.max_uses}}</div>
                        <div class="invite-info">–ò—Å—Ç–µ–∫–∞–µ—Ç: ${{expires.toLocaleDateString('ru-RU')}}</div>
                        <div>${{status}}</div>
                    </div>
                `;
            }}).join('');
            
            document.getElementById('invitesList').innerHTML = html || '<div class="loading">–ù–µ—Ç –∫–æ–¥–æ–≤</div>';
        }}
        
        function showCreateModal() {{
            document.getElementById('createModal').classList.add('active');
        }}
        
        async function createInvite() {{
            const sub = document.getElementById('inviteSub').value;
            const maxUses = parseInt(document.getElementById('inviteMaxUses').value);
            const trialDays = parseInt(document.getElementById('inviteTrialDays').value);
            const expiresDays = parseInt(document.getElementById('inviteExpires').value);
            
            try {{
                const r = await fetch(`/api/admin/invite/create?admin_id=${{adminId}}&token=${{token}}`, {{
                    method: 'POST',
                    headers: {{'Content-Type': 'application/json'}},
                    body: JSON.stringify({{
                        subscription: sub,
                        max_uses: maxUses,
                        trial_days: trialDays,
                        expires_days: expiresDays
                    }})
                }});
                
                if (!r.ok) {{
                    const err = await r.json();
                    throw new Error(err.detail || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è');
                }}
                
                const data = await r.json();
                closeModal();
                loadInvites();
                tg.showAlert('‚úÖ –ö–æ–¥ —Å–æ–∑–¥–∞–Ω: ' + data.code);
            }} catch (e) {{
                tg.showAlert('‚ùå –û—à–∏–±–∫–∞: ' + e.message);
            }}
        }}
        
        function closeModal() {{
            document.getElementById('createModal').classList.remove('active');
        }}
        
        function goBack() {{
            const url = window.location.origin + '/admin-panel?admin_id=' + adminId + '&token=' + token;
            if (tg.openLink) {{
                tg.openLink(url);
            }} else {{
                window.location.href = url;
            }}
        }}
        
        loadInvites();
        
        // Close modal on click outside
        document.getElementById('createModal').addEventListener('click', (e) => {{
            if (e.target.id === 'createModal') closeModal();
        }});
    </script>
</body>
</html>"""
    
    return HTMLResponse(content=html_content)


# ============================================================
# End of Admin Panel endpoints
# ============================================================

# ============================================================================
# Neo4j Knowledge Graph API Endpoints
# ============================================================================

# Neo4j client
try:
    from graph.neo4j_client import neo4j_client
except ImportError:
    neo4j_client = None
    logger.warning("‚ö†Ô∏è Neo4j graph module not available")


@app.get("/graph/post/{post_id}/related")
async def get_related_posts_endpoint(post_id: int, limit: int = 10):
    """
    –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å—Ç—ã —Å–≤—è–∑–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –æ–±—â–∏–µ —Ç–µ–≥–∏
    
    Args:
        post_id: ID –ø–æ—Å—Ç–∞ –∏–∑ PostgreSQL
        limit: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (default: 10)
        
    Returns:
        {
            "post_id": 123,
            "related_posts": [
                {
                    "post_id": 456,
                    "title": "Related Post",
                    "common_tags": 3,
                    "channel_id": "@channel"
                }
            ]
        }
    """
    if not neo4j_client or not neo4j_client.enabled:
        raise HTTPException(
            503,
            "Neo4j Knowledge Graph disabled. Set NEO4J_ENABLED=true in .env"
        )
    
    try:
        related = await neo4j_client.get_related_posts(post_id, limit)
        return {
            "post_id": post_id,
            "related_posts": related,
            "count": len(related)
        }
    except Exception as e:
        logger.error(f"‚ùå Graph query error: {e}")
        raise HTTPException(500, f"Graph query failed: {str(e)}")


@app.get("/graph/tag/{tag_name}/relationships")
async def get_tag_relationships_endpoint(tag_name: str, limit: int = 20):
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–≤—è–∑–∏ —Ç–µ–≥–∞ —Å –¥—Ä—É–≥–∏–º–∏ —Ç–µ–≥–∞–º–∏ (co-occurrence)
    
    Args:
        tag_name: –ò–º—è —Ç–µ–≥–∞
        limit: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (default: 20)
        
    Returns:
        {
            "tag": "AI",
            "related_tags": [
                {
                    "tag": "Python",
                    "weight": 15,
                    "posts_count": 42
                }
            ]
        }
    """
    if not neo4j_client or not neo4j_client.enabled:
        raise HTTPException(
            503,
            "Neo4j Knowledge Graph disabled. Set NEO4J_ENABLED=true in .env"
        )
    
    try:
        relationships = await neo4j_client.get_tag_relationships(tag_name, limit)
        return {
            "tag": tag_name,
            "related_tags": relationships,
            "count": len(relationships)
        }
    except Exception as e:
        logger.error(f"‚ùå Graph query error: {e}")
        raise HTTPException(500, f"Graph query failed: {str(e)}")


@app.get("/graph/user/{user_id}/interests")
async def get_user_interests_endpoint(user_id: int, limit: int = 20, db: Session = Depends(get_db)):
    """
    –ê–Ω–∞–ª–∏–∑ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –≥—Ä–∞—Ñ
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ PostgreSQL
        limit: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–ø —Ç–µ–≥–æ–≤ (default: 20)
        
    Returns:
        {
            "user_id": 123,
            "telegram_id": 456789,
            "interests": [
                {
                    "tag": "AI",
                    "posts_count": 42,
                    "usage_percent": 15.5
                }
            ]
        }
    """
    if not neo4j_client or not neo4j_client.enabled:
        raise HTTPException(
            503,
            "Neo4j Knowledge Graph disabled. Set NEO4J_ENABLED=true in .env"
        )
    
    # –ü–æ–ª—É—á–∏—Ç—å telegram_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = db.query(User).filter(User.id == user_id).first()
    if not user:
        raise HTTPException(404, "User not found")
    
    try:
        interests = await neo4j_client.get_user_interests(user.telegram_id, limit)
        return {
            "user_id": user_id,
            "telegram_id": user.telegram_id,
            "interests": interests,
            "count": len(interests)
        }
    except Exception as e:
        logger.error(f"‚ùå Graph query error: {e}")
        raise HTTPException(500, f"Graph query failed: {str(e)}")


@app.get("/graph/health")
async def graph_health_check():
    """
    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Neo4j
    
    Returns:
        {
            "neo4j_enabled": true,
            "neo4j_connected": true
        }
    """
    if not neo4j_client:
        return {"neo4j_enabled": False, "neo4j_connected": False}
    
    is_healthy = await neo4j_client.health_check() if neo4j_client.enabled else False
    
    return {
        "neo4j_enabled": neo4j_client.enabled,
        "neo4j_connected": is_healthy
    }
