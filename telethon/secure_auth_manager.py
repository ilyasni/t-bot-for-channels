"""
–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
–£—Å—Ç—Ä–∞–Ω—è–µ—Ç –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤–≤–æ–¥ –∫–æ–¥–æ–≤ —á–µ—Ä–µ–∑ Telegram —á–∞—Ç
"""

import asyncio
import logging
import secrets
import string
from datetime import datetime, timedelta, timezone
from typing import Optional, Dict, Any
from telethon import TelegramClient
from telethon.errors import FloodWaitError, AuthKeyError, RPCError, SessionPasswordNeededError
from sqlalchemy.orm import Session

from models import User
from crypto_utils import crypto_manager
from database import SessionLocal

logger = logging.getLogger(__name__)

class SecureAuthManager:
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    
    def __init__(self):
        self.active_clients = {}  # –°–ª–æ–≤–∞—Ä—å –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ user_id
        self.auth_sessions = {}  # –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        self.sessions_dir = "sessions"
        self._ensure_sessions_dir()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        self.max_failed_attempts = 5  # –ú–∞–∫—Å–∏–º—É–º –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
        self.block_duration = timedelta(hours=1)  # –í—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        self.session_timeout = timedelta(hours=2)  # –¢–∞–π–º–∞—É—Ç —Å–µ—Å—Å–∏–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
        import os
        self.timezone_name = os.getenv('TZ', 'Europe/Moscow')
        try:
            import zoneinfo
            self.local_tz = zoneinfo.ZoneInfo(self.timezone_name)
        except ImportError:
            # Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π Python
            from datetime import timezone
            # –î–ª—è MSK (UTC+3)
            self.local_tz = timezone(timedelta(hours=3))
        self.rate_limit_window = timedelta(minutes=5)  # –û–∫–Ω–æ –¥–ª—è rate limiting
        self.max_requests_per_window = 3  # –ú–∞–∫—Å–∏–º—É–º –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –æ–∫–Ω–µ
    
    def _ensure_sessions_dir(self):
        """–°–æ–∑–¥–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–µ—Å—Å–∏–π –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç"""
        import os
        if not os.path.exists(self.sessions_dir):
            os.makedirs(self.sessions_dir)
    
    def _get_session_path(self, user_id: int) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        import os
        return os.path.join(self.sessions_dir, f"user_{user_id}.session")
    
    def _generate_session_id(self) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Å–µ—Å—Å–∏–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        alphabet = string.ascii_letters + string.digits
        return ''.join(secrets.choice(alphabet) for _ in range(32))
    
    def _now(self) -> datetime:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ UTC –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î"""
        return datetime.now(timezone.utc)
    
    def _is_user_blocked(self, user: User) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
        if not user.is_blocked:
            return False
        
        if user.block_expires and user.block_expires > self._now():
            return True
        
        # –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –≤—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏—Å—Ç–µ–∫–ª–æ
        user.is_blocked = False
        user.block_expires = None
        user.failed_auth_attempts = 0
        return False
    
    def _check_rate_limit(self, user: User) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç rate limiting –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        now = self._now()
        
        if not user.last_auth_attempt:
            return True
        
        time_since_last = now - user.last_auth_attempt
        if time_since_last < self.rate_limit_window:
            # –í –æ–∫–Ω–µ rate limiting - –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
            # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã —Å—á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ø—ã—Ç–∫–∏
            return user.failed_auth_attempts < self.max_requests_per_window
        
        # –û–∫–Ω–æ –∏—Å—Ç–µ–∫–ª–æ - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
        user.failed_auth_attempts = 0
        return True
    
    async def _update_user_auth_status(self, user: User, is_authenticated: bool, error: str = None):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ –ë–î"""
        try:
            db = SessionLocal()
            db_user = db.query(User).filter(User.id == user.id).first()
            
            if db_user:
                db_user.is_authenticated = is_authenticated
                db_user.last_auth_check = self._now()
                db_user.last_auth_attempt = self._now()
                
                if error:
                    db_user.auth_error = error
                    db_user.failed_auth_attempts += 1
                    
                    # –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞
                    if db_user.failed_auth_attempts >= self.max_failed_attempts:
                        db_user.is_blocked = True
                        db_user.block_expires = self._now() + self.block_duration
                        logger.warning(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.telegram_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–æ {db_user.block_expires}")
                else:
                    db_user.auth_error = None
                    db_user.failed_auth_attempts = 0
                    db_user.is_blocked = False
                    db_user.block_expires = None
                
                db.commit()
            
            db.close()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {str(e)}")
    
    async def create_auth_session(self, user: User) -> Optional[str]:
        """
        –°–æ–∑–¥–∞–µ—Ç —Å–µ—Å—Å–∏—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            
        Returns:
            str: ID —Å–µ—Å—Å–∏–∏ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
            if self._is_user_blocked(user):
                logger.warning(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.telegram_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
                return None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limiting
            if not self._check_rate_limit(user):
                logger.warning(f"üö´ Rate limit –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}")
                return None
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID —Å–µ—Å—Å–∏–∏
            session_id = self._generate_session_id()
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
            self.auth_sessions[session_id] = {
                'user_id': user.id,
                'telegram_id': user.telegram_id,
                'created_at': self._now(),
                'expires_at': self._now() + self.session_timeout,
                'status': 'created'
            }
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
            db = SessionLocal()
            db_user = db.query(User).filter(User.id == user.id).first()
            if db_user:
                db_user.auth_session_id = session_id
                db_user.auth_session_expires = self._now() + self.session_timeout
                db.commit()
                logger.info(f"‚úÖ –°–µ—Å—Å–∏—è {session_id[:8]}... —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î –¥–æ {db_user.auth_session_expires}")
            db.close()
            
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Å–µ—Å—Å–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ {session_id[:8]}... –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}")
            return session_id
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}: {str(e)}")
            return None
    
    async def validate_auth_session(self, session_id: str) -> Optional[Dict[str, Any]]:
        """
        –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Å–µ—Å—Å–∏—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        
        Args:
            session_id: ID —Å–µ—Å—Å–∏–∏
            
        Returns:
            dict: –î–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω–∞
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            db = SessionLocal()
            user = db.query(User).filter(User.auth_session_id == session_id).first()
            
            if not user:
                db.close()
                return None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–µ—á–µ–Ω–∏–µ
            now = self._now()
            
            # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –≤—Ä–µ–º—è –≤ –ë–î —Ç–æ–∂–µ —Å timezone
            expires_at = user.auth_session_expires
            if expires_at and expires_at.tzinfo is None:
                # –ï—Å–ª–∏ –≤—Ä–µ–º—è –≤ –ë–î –±–µ–∑ timezone, —Å—á–∏—Ç–∞–µ–º –µ–≥–æ UTC
                expires_at = expires_at.replace(tzinfo=timezone.utc)
            
            logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Å—Å–∏–∏ {session_id[:8]}...: —Å–µ–π—á–∞—Å {now}, –∏—Å—Ç–µ–∫–∞–µ—Ç {expires_at}")
            
            if not expires_at or now > expires_at:
                # –û—á–∏—â–∞–µ–º –∏—Å—Ç–µ–∫—à—É—é —Å–µ—Å—Å–∏—é
                logger.warning(f"‚è∞ –°–µ—Å—Å–∏—è {session_id[:8]}... –∏—Å—Ç–µ–∫–ª–∞: {now} > {expires_at}")
                user.auth_session_id = None
                user.auth_session_expires = None
                db.commit()
                db.close()
                return None
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
            session_data = {
                'user_id': user.id,
                'telegram_id': user.telegram_id,
                'created_at': user.auth_session_expires - self.session_timeout,
                'expires_at': user.auth_session_expires,
                'status': 'valid'
            }
            
            db.close()
            return session_data
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–∏ {session_id}: {str(e)}")
            return None
    
    async def process_auth_data(self, session_id: str, api_id: str, api_hash: str, phone: str) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–∑ –≤–µ–±-—Ñ–æ—Ä–º—ã
        
        Args:
            session_id: ID —Å–µ—Å—Å–∏–∏
            api_id: API ID
            api_hash: API Hash
            phone: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            
        Returns:
            dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        try:
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é
            session = await self.validate_auth_session(session_id)
            if not session:
                return {
                    'success': False,
                    'error': '–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞ –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞',
                    'requires_code': False
                }
            
            user_id = session['user_id']
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
            db = SessionLocal()
            user = db.query(User).filter(User.id == user_id).first()
            if not user:
                db.close()
                return {
                    'success': False,
                    'error': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω',
                    'requires_code': False
                }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
            if self._is_user_blocked(user):
                db.close()
                return {
                    'success': False,
                    'error': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω',
                    'requires_code': False
                }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ (–∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–º–∏)
            try:
                user.api_id = api_id
                user.set_encrypted_api_hash(api_hash)
                user.set_encrypted_phone_number(phone)
                db.commit()
                
                logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}")
                
            except Exception as e:
                db.close()
                return {
                    'success': False,
                    'error': f'–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {str(e)}',
                    'requires_code': False
                }
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –∏ –Ω–∞—á–∏–Ω–∞–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
            try:
                client = await self._create_client(user, api_id, api_hash)
                await client.connect()
                
                if not client.is_connected():
                    db.close()
                    return {
                        'success': False,
                        'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram',
                        'requires_code': False
                    }
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
                if await client.is_user_authorized():
                    # –£–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
                    await self._update_user_auth_status(user, True, None)
                    self.active_clients[user.id] = client
                    
                    # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
                    del self.auth_sessions[session_id]
                    user.auth_session_id = None
                    user.auth_session_expires = None
                    db.commit()
                    db.close()
                    
                    return {
                        'success': True,
                        'error': None,
                        'requires_code': False,
                        'message': '–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞'
                    }
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥
                await client.send_code_request(phone)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–≤–æ–¥–∞ –∫–æ–¥–∞
                self.active_clients[user.id] = client
                session['status'] = 'waiting_code'
                session['client_created'] = True
                
                await self._update_user_auth_status(user, False, "–û–∂–∏–¥–∞–µ—Ç—Å—è –≤–≤–æ–¥ –∫–æ–¥–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
                
                db.close()
                
                return {
                    'success': True,
                    'error': None,
                    'requires_code': True,
                    'message': '–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞'
                }
                
            except FloodWaitError as e:
                error_msg = f"–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å {e.seconds} —Å–µ–∫—É–Ω–¥"
                await self._update_user_auth_status(user, False, error_msg)
                db.close()
                
                return {
                    'success': False,
                    'error': error_msg,
                    'requires_code': False
                }
                
            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {str(e)}"
                await self._update_user_auth_status(user, False, error_msg)
                db.close()
                
                return {
                    'success': False,
                    'error': error_msg,
                    'requires_code': False
                }
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {str(e)}")
            return {
                'success': False,
                'error': f'–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: {str(e)}',
                'requires_code': False
            }
    
    async def verify_auth_code(self, session_id: str, code: str) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–¥ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–∑ –≤–µ–±-—Ñ–æ—Ä–º—ã
        
        Args:
            session_id: ID —Å–µ—Å—Å–∏–∏
            code: –ö–æ–¥ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            
        Returns:
            dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
        """
        try:
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é
            session = await self.validate_auth_session(session_id)
            if not session:
                return {
                    'success': False,
                    'error': '–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞ –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞'
                }
            
            user_id = session['user_id']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω
            if user_id not in self.active_clients:
                return {
                    'success': False,
                    'error': '–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ'
                }
            
            client = self.active_clients[user_id]
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
            db = SessionLocal()
            user = db.query(User).filter(User.id == user_id).first()
            if not user:
                db.close()
                return {
                    'success': False,
                    'error': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
                }
            
            phone = user.get_decrypted_phone_number()
            if not phone:
                db.close()
                return {
                    'success': False,
                    'error': '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω'
                }
            
            try:
                # –í–≤–æ–¥–∏–º –∫–æ–¥
                await client.sign_in(phone=phone, code=code)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å
                if await client.is_user_authorized():
                    await self._update_user_auth_status(user, True, None)
                    
                    # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
                    del self.auth_sessions[session_id]
                    user.auth_session_id = None
                    user.auth_session_expires = None
                    db.commit()
                    db.close()
                    
                    return {
                        'success': True,
                        'error': None,
                        'message': '–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞'
                    }
                else:
                    error_msg = "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"
                    await self._update_user_auth_status(user, False, error_msg)
                    db.close()
                    
                    return {
                        'success': False,
                        'error': error_msg
                    }
                    
            except SessionPasswordNeededError:
                # –¢—Ä–µ–±—É–µ—Ç—Å—è 2FA –ø–∞—Ä–æ–ª—å
                session['status'] = 'waiting_2fa'
                return {
                    'success': True,
                    'requires_2fa': True,
                    'message': '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏'
                }
                
            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞: {str(e)}"
                await self._update_user_auth_status(user, False, error_msg)
                db.close()
                
                return {
                    'success': False,
                    'error': error_msg
                }
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {str(e)}")
            return {
                'success': False,
                'error': f'–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: {str(e)}'
            }
    
    async def _create_client(self, user: User, api_id: str, api_hash: str) -> TelegramClient:
        """–°–æ–∑–¥–∞–µ—Ç Telegram –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å API_ID
            try:
                api_id_int = int(api_id)
            except ValueError:
                raise ValueError("API_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            
            # –°–æ–∑–¥–∞–µ–º –ø—É—Ç—å –∫ —Å–µ—Å—Å–∏–∏
            session_path = self._get_session_path(user.id)
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
            client = TelegramClient(
                session_path,
                api_id_int,
                api_hash,
                connection_retries=3,
                retry_delay=5,
                timeout=30,
                request_retries=3
            )
            
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}")
            return client
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}: {str(e)}")
            raise
    
    async def cleanup_expired_sessions(self):
        """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö —Å–µ—Å—Å–∏–π"""
        now = self._now()
        expired_sessions = []
        
        for session_id, session in self.auth_sessions.items():
            if now > session['expires_at']:
                expired_sessions.append(session_id)
        
        for session_id in expired_sessions:
            del self.auth_sessions[session_id]
        
        if expired_sessions:
            logger.info(f"üßπ –û—á–∏—â–µ–Ω–æ {len(expired_sessions)} –∏—Å—Ç–µ–∫—à–∏—Ö —Å–µ—Å—Å–∏–π")
    
    async def get_user_client(self, user: User) -> Optional[TelegramClient]:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
            if user.id in self.active_clients:
                client = self.active_clients[user.id]
                if client.is_connected():
                    return client
                else:
                    # –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
                    await client.connect()
                    if client.is_connected():
                        return client
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç
            api_hash = user.get_decrypted_api_hash()
            if not user.api_id or not api_hash:
                raise ValueError("API –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            
            client = await self._create_client(user, user.api_id, api_hash)
            await client.connect()
            
            if not client.is_connected():
                raise ConnectionError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            if not await client.is_user_authorized():
                raise ValueError("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
            
            self.active_clients[user.id] = client
            return client
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}: {str(e)}")
            raise

    async def verify_two_factor(self, session_id: str, password: str) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–∞—Ä–æ–ª—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        
        Args:
            session_id: ID —Å–µ—Å—Å–∏–∏
            password: –ü–∞—Ä–æ–ª—å 2FA
            
        Returns:
            dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
        """
        try:
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é
            session = await self.validate_auth_session(session_id)
            if not session:
                return {
                    'success': False,
                    'error': '–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞ –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞'
                }
            
            user_id = session['user_id']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω
            if user_id not in self.active_clients:
                return {
                    'success': False,
                    'error': '–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ'
                }
            
            client = self.active_clients[user_id]
            
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å 2FA
                await client.sign_in(password=password)
                
                # –£—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
                logger.info(f"‚úÖ 2FA –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                db = SessionLocal()
                user = db.query(User).filter(User.id == user_id).first()
                if user:
                    await self._update_user_auth_status(user, True, None)
                    
                    # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
                    user.auth_session_id = None
                    user.auth_session_expires = None
                    db.commit()
                
                db.close()
                
                # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
                if session_id in self.auth_sessions:
                    del self.auth_sessions[session_id]
                
                return {
                    'success': True,
                    'message': '–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞'
                }
                
            except Exception as e:
                error_msg = f"–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å 2FA: {str(e)}"
                logger.warning(f"‚ö†Ô∏è {error_msg}")
                
                return {
                    'success': False,
                    'error': error_msg
                }
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ 2FA: {str(e)}")
            return {
                'success': False,
                'error': f'–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: {str(e)}'
            }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
secure_auth_manager = SecureAuthManager()
