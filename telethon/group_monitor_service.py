"""
Group Monitor Service
Real-time –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ Telegram –≥—Ä—É–ø–ø–∞—Ö
"""
import asyncio
import logging
import os
from typing import Dict, List, Optional
from datetime import datetime, timezone
from telethon import TelegramClient, events
from telethon.tl.types import Message

from database import SessionLocal
from models import User, Group, GroupMention, GroupSettings, user_group
from shared_auth_manager import shared_auth_manager
from group_digest_generator import group_digest_generator
from dotenv import load_dotenv

load_dotenv()

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class GroupMonitorService:
    """–°–µ—Ä–≤–∏—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ Telegram –≥—Ä—É–ø–ø–∞—Ö"""
    
    def __init__(self):
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –º–æ–Ω–∏—Ç–æ—Ä—ã: {user_telegram_id: TelegramClient}
        self.active_monitors: Dict[int, TelegramClient] = {}
        
        # –ì—Ä—É–ø–ø—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {user_telegram_id: [group_ids]}
        self.monitored_groups: Dict[int, List[int]] = {}
        
        logger.info("‚úÖ GroupMonitorService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def start_monitoring(self, user_telegram_id: int) -> bool:
        """
        –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_telegram_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            True –µ—Å–ª–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω, False –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
        """
        try:
            logger.info(f"üîÑ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_telegram_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            client = await shared_auth_manager.get_user_client(user_telegram_id)
            
            if not client:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç –¥–ª—è {user_telegram_id}")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            if not client.is_connected():
                logger.error(f"‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –¥–ª—è {user_telegram_id}")
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            me = await client.get_me()
            username = me.username or me.first_name or "Unknown"
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
            db = SessionLocal()
            try:
                user = db.query(User).filter(User.telegram_id == user_telegram_id).first()
                if not user:
                    logger.error(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
                    return False
                
                # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –≥—Ä—É–ø–ø—ã
                active_groups = db.query(Group).join(
                    user_group,
                    Group.id == user_group.c.group_id
                ).filter(
                    user_group.c.user_id == user.id,
                    user_group.c.is_active == True,
                    user_group.c.mentions_enabled == True
                ).all()
                
                if not active_groups:
                    logger.info(f"üì≠ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_telegram_id} –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä—É–ø–ø –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
                    return True  # –ù–µ –æ—à–∏–±–∫–∞, –ø—Ä–æ—Å—Ç–æ –Ω–µ—Ç –≥—Ä—É–ø–ø
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º group_ids –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                group_ids = [g.group_id for g in active_groups]
                self.monitored_groups[user_telegram_id] = group_ids
                
                logger.info(f"üìä –ì—Ä—É–ø–ø –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {len(active_groups)}")
                for group in active_groups:
                    logger.info(f"   ‚Ä¢ {group.group_title or group.group_id}")
                
            finally:
                db.close()
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º event handler –¥–ª—è —É–ø–æ–º–∏–Ω–∞–Ω–∏–π
            @client.on(events.NewMessage(chats=group_ids))
            async def mention_handler(event):
                """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–∞—Ö"""
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                    if not event.message.text:
                        return
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ username –∏–ª–∏ ID
                    mentioned = False
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ @username
                    if username and f"@{username}" in event.message.text:
                        mentioned = True
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ entities (—É–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –∫–ª–∏–∫)
                    if hasattr(event.message, 'entities') and event.message.entities:
                        for entity in event.message.entities:
                            if hasattr(entity, 'user_id') and entity.user_id == user_telegram_id:
                                mentioned = True
                                break
                    
                    if mentioned:
                        logger.info(f"üîî –£–ø–æ–º–∏–Ω–∞–Ω–∏–µ @{username} –≤ –≥—Ä—É–ø–ø–µ {event.chat_id}")
                        await self._process_mention(user_telegram_id, event)
                        
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ mention_handler: {e}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∏–µ–Ω—Ç
            self.active_monitors[user_telegram_id] = client
            
            logger.info(f"‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω –¥–ª—è @{username} ({len(group_ids)} –≥—Ä—É–ø–ø)")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è {user_telegram_id}: {e}")
            return False
    
    async def stop_monitoring(self, user_telegram_id: int):
        """
        –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_telegram_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        if user_telegram_id in self.active_monitors:
            # –£–¥–∞–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç
            del self.active_monitors[user_telegram_id]
            
            # –£–¥–∞–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø
            if user_telegram_id in self.monitored_groups:
                del self.monitored_groups[user_telegram_id]
            
            logger.info(f"üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è {user_telegram_id}")
    
    async def _process_mention(self, user_telegram_id: int, event):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_telegram_id: Telegram ID —É–ø–æ–º—è–Ω—É—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            event: Telethon NewMessage event
        """
        try:
            logger.info(f"üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è {user_telegram_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç
            client = self.active_monitors.get(user_telegram_id)
            if not client:
                logger.error(f"‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è {user_telegram_id}")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            db = SessionLocal()
            try:
                user = db.query(User).filter(User.telegram_id == user_telegram_id).first()
                if not user:
                    logger.error(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return
                
                # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                settings = db.query(GroupSettings).filter(GroupSettings.user_id == user.id).first()
                context_size = settings.mention_context_messages if settings else 5
                
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç (—Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ/–ø–æ—Å–ª–µ)
                logger.info(f"üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ ({context_size} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ/–ø–æ—Å–ª–µ)")
                context_messages = await self._get_context_messages(
                    client, 
                    event.chat_id, 
                    event.message.id,
                    context_size
                )
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ n8n workflow
                logger.info(f"ü§ñ –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ n8n workflow...")
                me = await client.get_me()
                analysis = await group_digest_generator.analyze_mention(
                    mentioned_user=me.username or str(user_telegram_id),
                    context_messages=context_messages
                )
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
                group_entity = await client.get_entity(event.chat_id)
                group_title = getattr(group_entity, 'title', str(event.chat_id))
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
                group = db.query(Group).filter(Group.group_id == event.chat_id).first()
                if group:
                    mention = GroupMention(
                        user_id=user.id,
                        group_id=group.id,
                        message_id=event.message.id,
                        mentioned_at=event.message.date,
                        context=analysis.get('context_summary', ''),
                        reason=analysis.get('mention_reason', ''),
                        urgency=analysis.get('urgency', 'medium'),
                        notified=False  # –ü–æ–∫–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏
                    )
                    db.add(mention)
                    db.commit()
                    logger.info(f"üíæ –£–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î (mention_id: {mention.id})")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await self._notify_user(user_telegram_id, analysis, group_title, event)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                if group:
                    mention.notified = True
                    mention.notified_at = datetime.now(timezone.utc)
                    db.commit()
                
            finally:
                db.close()
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}", exc_info=True)
    
    async def _get_context_messages(
        self, 
        client: TelegramClient, 
        chat_id: int, 
        message_id: int,
        context_size: int = 5
    ) -> List[Message]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–æ–∫—Ä—É–≥ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è (N —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ/–ø–æ—Å–ª–µ)
        
        Args:
            client: Telethon –∫–ª–∏–µ–Ω—Ç
            chat_id: ID –≥—Ä—É–ø–ø—ã
            message_id: ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º
            context_size: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ/–ø–æ—Å–ª–µ
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π (–∫–æ–Ω—Ç–µ–∫—Å—Ç)
        """
        try:
            messages = []
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
            async for msg in client.iter_messages(
                chat_id,
                limit=context_size,
                offset_id=message_id,
                reverse=False
            ):
                messages.insert(0, msg)  # –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–∞–º–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º
            mention_msg = await client.get_messages(chat_id, ids=message_id)
            if mention_msg:
                messages.append(mention_msg)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
            async for msg in client.iter_messages(
                chat_id,
                limit=context_size,
                min_id=message_id,
                reverse=True
            ):
                if msg.id != message_id:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∞–º–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                    messages.append(msg)
            
            logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞")
            return messages
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")
            return []
    
    async def _notify_user(
        self, 
        user_telegram_id: int,
        analysis: Dict,
        group_title: str,
        event
    ):
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± —É–ø–æ–º–∏–Ω–∞–Ω–∏–∏
        
        Args:
            user_telegram_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            analysis: –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
            group_title: –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
            event: Telethon event
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç
            client = self.active_monitors.get(user_telegram_id)
            if not client:
                logger.error(f"‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message_link = f"https://t.me/c/{str(event.chat_id)[4:]}/{event.message.id}"
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            notification = group_digest_generator.format_mention_for_telegram(
                analysis=analysis,
                group_title=group_title,
                message_link=message_link
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            await client.send_message(
                user_telegram_id,
                notification,
                parse_mode='HTML'
            )
            
            logger.info(f"üì¨ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_telegram_id}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    
    async def start_all_monitors(self) -> int:
        """
        –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è –≤—Å–µ—Ö –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –º–æ–Ω–∏—Ç–æ—Ä–æ–≤
        """
        db = SessionLocal()
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –≥—Ä—É–ø–ø–∞–º–∏
            users = db.query(User).filter(
                User.is_authenticated == True
            ).all()
            
            logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
            
            started = 0
            for user in users:
                try:
                    success = await self.start_monitoring(user.telegram_id)
                    if success:
                        started += 1
                        # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–∞–º–∏
                        await asyncio.sleep(1)
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è {user.telegram_id}: {e}")
            
            logger.info(f"‚úÖ –ó–∞–ø—É—â–µ–Ω–æ –º–æ–Ω–∏—Ç–æ—Ä–æ–≤: {started}/{len(users)}")
            return started
            
        finally:
            db.close()
    
    async def stop_all_monitors(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –º–æ–Ω–∏—Ç–æ—Ä—ã"""
        user_ids = list(self.active_monitors.keys())
        
        for user_id in user_ids:
            await self.stop_monitoring(user_id)
        
        logger.info(f"üõë –í—Å–µ –º–æ–Ω–∏—Ç–æ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã ({len(user_ids)} —à—Ç.)")
    
    def get_status(self) -> Dict:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞
        
        Returns:
            {
                "active_monitors": int,
                "monitored_groups_total": int,
                "users": List[int]
            }
        """
        total_groups = sum(len(groups) for groups in self.monitored_groups.values())
        
        return {
            "active_monitors": len(self.active_monitors),
            "monitored_groups_total": total_groups,
            "users": list(self.active_monitors.keys())
        }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
group_monitor_service = GroupMonitorService()

