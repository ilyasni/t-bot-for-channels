"""
Shared Auth Manager - —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å –º–∞—Å—Ç–µ—Ä credentials

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –æ–¥–∏–Ω –Ω–∞–±–æ—Ä API_ID/API_HASH –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π,
–Ω–æ –∫–∞–∂–¥—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç —Å–≤–æ—é –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é —Å–µ—Å—Å–∏—é.
"""

import asyncio
import logging
import os
from datetime import datetime, timedelta, timezone
from typing import Optional, Dict, Any
from telethon import TelegramClient
from telethon.sessions import StringSession
from telethon.errors import FloodWaitError, AuthKeyError, RPCError, SessionPasswordNeededError, PhoneCodeInvalidError
from sqlalchemy.orm import Session

from models import User
from crypto_utils import crypto_manager
from database import SessionLocal

logger = logging.getLogger(__name__)

# –í–∫–ª—é—á–∞–µ–º DEBUG –¥–ª—è Telethon
logging.getLogger('telethon').setLevel(logging.DEBUG)


class SharedAuthManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å shared master credentials"""
    
    def __init__(self):
        self.active_clients = {}  # telegram_id -> TelegramClient
        self.phone_code_hashes = {}  # telegram_id -> phone_code_hash
        self.sent_codes = {}  # telegram_id -> SentCode object
        self.sessions_dir = "sessions"
        self._ensure_sessions_dir()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞—Å—Ç–µ—Ä credentials
        self.master_api_id = os.getenv("MASTER_API_ID")
        self.master_api_hash = os.getenv("MASTER_API_HASH")
        
        if not self.master_api_id or not self.master_api_hash:
            logger.error("üö® MASTER_API_ID –∏ MASTER_API_HASH –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ .env!")
            raise ValueError("MASTER_API_ID –∏ MASTER_API_HASH –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        self.max_failed_attempts = 5
        self.block_duration = timedelta(hours=1)
        self.rate_limit_window = timedelta(minutes=5)
        self.max_requests_per_window = 3
        
        # Async locks –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        self.client_locks = {}  # telegram_id -> asyncio.Lock
        
        logger.info(f"‚úÖ SharedAuthManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å MASTER_API_ID: {self.master_api_id}")
    
    def _ensure_sessions_dir(self):
        """–°–æ–∑–¥–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–µ—Å—Å–∏–π"""
        if not os.path.exists(self.sessions_dir):
            os.makedirs(self.sessions_dir)
            os.chmod(self.sessions_dir, 0o700)  # –¢–æ–ª—å–∫–æ owner
    
    def _get_session_path(self, telegram_id: int) -> str:
        """–ü—É—Ç—å –∫ session —Ñ–∞–π–ª—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return os.path.join(self.sessions_dir, f"user_{telegram_id}.session")
    
    def _get_client_lock(self, telegram_id: int) -> asyncio.Lock:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å lock –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if telegram_id not in self.client_locks:
            self.client_locks[telegram_id] = asyncio.Lock()
        return self.client_locks[telegram_id]
    
    async def _create_client(self, telegram_id: int) -> TelegramClient:
        """–°–æ–∑–¥–∞—Ç—å Telethon client –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        session_path = self._get_session_path(telegram_id)
        
        client = TelegramClient(
            session_path,
            int(self.master_api_id),
            self.master_api_hash,
            connection_retries=3,
            retry_delay=5,
            timeout=30,
            request_retries=3
        )
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π sleep –ø—Ä–∏ flood wait < 2 –º–∏–Ω—É—Ç
        client.flood_sleep_threshold = 120
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –Ω–∞ session —Ñ–∞–π–ª
        if os.path.exists(session_path):
            os.chmod(session_path, 0o600)
        
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω Telethon client –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
        return client
    
    def _is_user_blocked(self, user: User) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not user.is_blocked:
            return False
        
        if user.block_expires:
            # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ block_expires timezone-aware
            block_expires = user.block_expires
            if block_expires.tzinfo is None:
                block_expires = block_expires.replace(tzinfo=timezone.utc)
            
            if block_expires > datetime.now(timezone.utc):
                return True
        
        # –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –µ—Å–ª–∏ –≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ
        user.is_blocked = False
        user.block_expires = None
        user.failed_auth_attempts = 0
        return False
    
    def _check_rate_limit(self, user: User) -> bool:
        """Rate limiting –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        now = datetime.now(timezone.utc)
        
        if not user.last_auth_attempt:
            return True
        
        # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ last_auth_attempt timezone-aware
        last_attempt = user.last_auth_attempt
        if last_attempt.tzinfo is None:
            last_attempt = last_attempt.replace(tzinfo=timezone.utc)
        
        time_since_last = now - last_attempt
        if time_since_last < self.rate_limit_window:
            return user.failed_auth_attempts < self.max_requests_per_window
        
        # –û–∫–Ω–æ –∏—Å—Ç–µ–∫–ª–æ - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
        user.failed_auth_attempts = 0
        return True
    
    async def send_code(self, telegram_id: int, phone: str) -> Dict[str, Any]:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å SMS –∫–æ–¥ –Ω–∞ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        
        Args:
            telegram_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            phone: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
            
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º: {"success": bool, "error": str}
        """
        db = SessionLocal()
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = db.query(User).filter(User.telegram_id == telegram_id).first()
            if not user:
                return {"success": False, "error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
            if self._is_user_blocked(user):
                return {
                    "success": False, 
                    "error": f"–ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–æ {user.block_expires.strftime('%H:%M')}"
                }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limit
            if not self._check_rate_limit(user):
                return {
                    "success": False,
                    "error": "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–¥–æ–∂–¥–∏—Ç–µ 5 –º–∏–Ω—É—Ç."
                }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä (–∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π)
            user.set_encrypted_phone_number(phone)
            user.last_auth_attempt = datetime.now(timezone.utc)
            db.commit()
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç —Å lock
            lock = self._get_client_lock(telegram_id)
            async with lock:
                # –ö–†–ò–¢–ò–ß–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª–∏–µ–Ω—Ç –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
                if telegram_id in self.active_clients:
                    client = self.active_clients[telegram_id]
                    logger.info(f"‚ôªÔ∏è –ò—Å–ø–æ–ª—å–∑—É—é —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è {telegram_id}")
                    
                    # –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –µ—Å–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω
                    if not client.is_connected():
                        await client.connect()
                else:
                    client = await self._create_client(telegram_id)
                    await client.connect()
                    logger.info(f"üÜï –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è {telegram_id}")
                
                if not client.is_connected():
                    return {"success": False, "error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram"}
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
                if await client.is_user_authorized():
                    logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
                    user.is_authenticated = True
                    db.commit()
                    self.active_clients[telegram_id] = client
                    return {"success": True, "already_authorized": True}
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥
                logger.info(f"üì± –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –Ω–∞ {phone} –¥–ª—è {telegram_id}")
                sent_code = await client.send_code_request(phone)
                logger.info(f"‚úÖ SMS –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω (phone_code_hash: {sent_code.phone_code_hash[:10]}...)")
                
                # –ö–†–ò–¢–ò–ß–ù–û: –Ø–≤–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º session —Ñ–∞–π–ª –ø–æ—Å–ª–µ send_code_request
                # –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∑–∞–ø–∏—Å–∞–Ω–æ –Ω–∞ –¥–∏—Å–∫
                logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ session —Ñ–∞–π–ª–∞ –¥–ª—è {telegram_id}")
                client.session.save()
                logger.info(f"‚úÖ Session —Å–æ—Ö—Ä–∞–Ω–µ–Ω –Ω–∞ –¥–∏—Å–∫")
                
                # –ö–†–ò–¢–ò–ß–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∏–µ–Ω—Ç –ò phone_code_hash –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ sign_in
                # –≠—Ç–æ—Ç –∂–µ –∫–ª–∏–µ–Ω—Ç –∏ hash –î–û–õ–ñ–ù–´ –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –¥–ª—è verify_code!
                self.active_clients[telegram_id] = client
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º phone_code_hash –≤ –ø–∞–º—è—Ç–∏ –¥–ª—è verify
                self.phone_code_hashes[telegram_id] = sent_code.phone_code_hash
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ—Å—å sent_code –æ–±—ä–µ–∫—Ç
                self.sent_codes[telegram_id] = sent_code
                
                return {
                    "success": True,
                    "phone_code_hash": sent_code.phone_code_hash
                }
        
        except FloodWaitError as e:
            error_msg = f"–ù—É–∂–Ω–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å {e.seconds} —Å–µ–∫—É–Ω–¥"
            logger.warning(f"‚è≥ FloodWait –¥–ª—è {telegram_id}: {e.seconds}s")
            user.failed_auth_attempts += 1
            user.auth_error = error_msg
            db.commit()
            return {"success": False, "error": error_msg}
        
        except RPCError as e:
            error_msg = str(e)
            logger.error(f"‚ùå RPCError –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞ –¥–ª—è {telegram_id}: {error_msg}")
            user.failed_auth_attempts += 1
            user.auth_error = error_msg
            db.commit()
            return {"success": False, "error": f"–û—à–∏–±–∫–∞ Telegram: {error_msg}"}
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞ –¥–ª—è {telegram_id}: {e}")
            user.failed_auth_attempts += 1
            user.auth_error = str(e)
            db.commit()
            return {"success": False, "error": str(e)}
        
        finally:
            db.close()
    
    async def verify_code(self, telegram_id: int, phone: str, code: str) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å SMS –∫–æ–¥ –∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            telegram_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            phone: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            code: SMS –∫–æ–¥
            
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º: {"success": bool, "requires_2fa": bool, "error": str}
        """
        db = SessionLocal()
        
        try:
            user = db.query(User).filter(User.telegram_id == telegram_id).first()
            if not user:
                return {"success": False, "error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
            if telegram_id not in self.active_clients:
                return {
                    "success": False,
                    "error": "–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ —Å /login"
                }
            
            client = self.active_clients[telegram_id]
            
            # –ö–†–ò–¢–ò–ß–ù–û: –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω
            if not client.is_connected():
                logger.warning(f"‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω! –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è...")
                await client.connect()
                logger.info(f"‚úÖ –ö–ª–∏–µ–Ω—Ç –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω")
            
            logger.info(f"üîó –ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: {client.is_connected()}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π phone_code_hash
            phone_code_hash = None
            if telegram_id in self.phone_code_hashes:
                phone_code_hash = self.phone_code_hashes[telegram_id]
                logger.info(f"üíæ –ò—Å–ø–æ–ª—å–∑—É—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π phone_code_hash: {phone_code_hash[:10]}...")
            
            try:
                # –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è –ø–æ –∫–æ–¥—É —Å phone_code_hash
                logger.info(f"üîê –ü–æ–ø—ã—Ç–∫–∞ sign_in –¥–ª—è {telegram_id} —Å –∫–æ–¥–æ–º {code[:2]}***")
                
                if phone_code_hash:
                    await client.sign_in(phone, code, phone_code_hash=phone_code_hash)
                else:
                    await client.sign_in(phone, code)
                
                logger.info(f"‚úÖ sign_in –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ –¥–ª—è {telegram_id}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å
                if await client.is_user_authorized():
                    # ‚úÖ –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ session –≤–ª–∞–¥–µ–ª—å—Ü–∞
                    me = await client.get_me()
                    if me.id != telegram_id:
                        logger.error(f"üö® SECURITY: Session mismatch! Expected {telegram_id}, got {me.id}")
                        await client.disconnect()
                        del self.active_clients[telegram_id]
                        return {"success": False, "error": "–û—à–∏–±–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å–µ—Å—Å–∏–∏"}
                    
                    # –í—Å–µ –û–ö - –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    user.is_authenticated = True
                    user.failed_auth_attempts = 0
                    user.auth_error = None
                    user.last_auth_check = datetime.now(timezone.utc)
                    db.commit()
                    
                    # –û—á–∏—â–∞–µ–º phone_code_hash –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                    if hasattr(self, 'phone_code_hashes') and telegram_id in self.phone_code_hashes:
                        del self.phone_code_hashes[telegram_id]
                    
                    logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
                    return {"success": True}
                else:
                    return {"success": False, "error": "–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è"}
            
            except SessionPasswordNeededError:
                # –¢—Ä–µ–±—É–µ—Ç—Å—è 2FA –ø–∞—Ä–æ–ª—å
                logger.info(f"üîê –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id} —Ç—Ä–µ–±—É–µ—Ç—Å—è 2FA")
                return {"success": False, "requires_2fa": True}
            
            except PhoneCodeInvalidError:
                user.failed_auth_attempts += 1
                user.auth_error = "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥"
                
                # –ë–ª–æ–∫–∏—Ä—É–µ–º –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞
                if user.failed_auth_attempts >= self.max_failed_attempts:
                    user.is_blocked = True
                    user.block_expires = datetime.now(timezone.utc) + self.block_duration
                    logger.warning(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
                
                db.commit()
                return {"success": False, "error": "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥"}
            
            except RPCError as e:
                # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏ Telegram
                error_message = str(e)
                logger.error(f"üö® RPCError –ø—Ä–∏ verify_code –¥–ª—è {telegram_id}:")
                logger.error(f"   –¢–∏–ø: {type(e).__name__}")
                logger.error(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {error_message}")
                
                # –°—á–∏—Ç–∞–µ–º –≤—Ä–µ–º—è —Å —É—á–µ—Ç–æ–º timezone
                if user.last_auth_attempt:
                    last_attempt = user.last_auth_attempt
                    if last_attempt.tzinfo is None:
                        last_attempt = last_attempt.replace(tzinfo=timezone.utc)
                    seconds_since = (datetime.now(timezone.utc) - last_attempt).total_seconds()
                    logger.error(f"   –ö–æ–¥ –≤–≤–µ–¥–µ–Ω —á–µ—Ä–µ–∑: {seconds_since:.1f} —Å–µ–∫—É–Ω–¥")
                else:
                    logger.error(f"   –í—Ä–µ–º—è: N/A")
                
                if "confirmation code has expired" in error_message.lower():
                    return {
                        "success": False,
                        "error": "–ö–æ–¥ –∏—Å—Ç–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏ –≤–≤–æ–¥–∏—Ç–µ –∫–æ–¥ –±—ã—Å—Ç—Ä–µ–µ (–≤ —Ç–µ—á–µ–Ω–∏–µ 2-3 –º–∏–Ω—É—Ç)"
                    }
                elif "previously shared" in error_message.lower() or "not allowed" in error_message.lower():
                    return {
                        "success": False,
                        "error": "Telegram –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –≤—Ö–æ–¥ –ø–æ —Å–æ–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
                    }
                else:
                    return {"success": False, "error": f"–û—à–∏–±–∫–∞ Telegram: {error_message}"}
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–æ–¥–∞ –¥–ª—è {telegram_id}: {e}")
            return {"success": False, "error": str(e)}
        
        finally:
            db.close()
    
    async def verify_2fa(self, telegram_id: int, password: str) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å 2FA –ø–∞—Ä–æ–ª—å
        
        Args:
            telegram_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            password: 2FA –ø–∞—Ä–æ–ª—å
            
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º: {"success": bool, "error": str}
        """
        db = SessionLocal()
        
        try:
            user = db.query(User).filter(User.telegram_id == telegram_id).first()
            if not user:
                return {"success": False, "error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"}
            
            if telegram_id not in self.active_clients:
                return {"success": False, "error": "–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞"}
            
            client = self.active_clients[telegram_id]
            
            try:
                await client.sign_in(password=password)
                
                # ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Å–µ—Å—Å–∏–∏
                me = await client.get_me()
                if me.id != telegram_id:
                    logger.error(f"üö® SECURITY: Session mismatch in 2FA!")
                    await client.disconnect()
                    del self.active_clients[telegram_id]
                    return {"success": False, "error": "–û—à–∏–±–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"}
                
                # –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
                user.is_authenticated = True
                user.failed_auth_attempts = 0
                user.auth_error = None
                user.last_auth_check = datetime.now(timezone.utc)
                db.commit()
                
                logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–µ–ª 2FA")
                return {"success": True}
            
            except Exception as e:
                logger.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π 2FA –ø–∞—Ä–æ–ª—å –¥–ª—è {telegram_id}: {e}")
                return {"success": False, "error": "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å"}
        
        finally:
            db.close()
    
    async def disconnect_client(self, telegram_id: int):
        """–û—Ç–∫–ª—é—á–∏—Ç—å –∏ —É–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö"""
        if telegram_id in self.active_clients:
            client = self.active_clients[telegram_id]
            try:
                await client.disconnect()
            except:
                pass
            del self.active_clients[telegram_id]
            logger.info(f"üîå –ö–ª–∏–µ–Ω—Ç –¥–ª—è {telegram_id} –æ—Ç–∫–ª—é—á–µ–Ω –∏ —É–¥–∞–ª–µ–Ω")
        
        # –û—á–∏—â–∞–µ–º —Ç–∞–∫–∂–µ phone_code_hashes –∏ sent_codes
        if telegram_id in self.phone_code_hashes:
            del self.phone_code_hashes[telegram_id]
        if telegram_id in self.sent_codes:
            del self.sent_codes[telegram_id]
    
    async def get_user_client(self, telegram_id: int) -> Optional[TelegramClient]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            telegram_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            TelegramClient –∏–ª–∏ None
        """
        lock = self._get_client_lock(telegram_id)
        
        async with lock:
            # –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω - –ø—Ä–æ–≤–µ—Ä—è–µ–º event loop
            if telegram_id in self.active_clients:
                client = self.active_clients[telegram_id]
                
                # –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º event loop
                try:
                    if client.is_connected():
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º event loop
                        current_loop = asyncio.get_event_loop()
                        if client.loop != current_loop:
                            logger.warning(f"‚ö†Ô∏è Client {telegram_id} –≤ –¥—Ä—É–≥–æ–º event loop - –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º")
                            await client.disconnect()
                            del self.active_clients[telegram_id]
                        else:
                            return client
                    else:
                        await client.connect()
                        if client.is_connected():
                            return client
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞ {telegram_id}: {e} - –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º")
                    if telegram_id in self.active_clients:
                        del self.active_clients[telegram_id]
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –≤ —Ç–µ–∫—É—â–µ–º event loop
            client = await self._create_client(telegram_id)
            await client.connect()
            
            if not client.is_connected():
                raise ConnectionError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            if not await client.is_user_authorized():
                raise ValueError("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
            
            # ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Å–µ—Å—Å–∏–∏
            me = await client.get_me()
            if me.id != telegram_id:
                logger.error(f"üö® SECURITY: Session belongs to {me.id}, not {telegram_id}")
                await client.disconnect()
                raise SecurityError("Session file belongs to another user!")
            
            self.active_clients[telegram_id] = client
            logger.info(f"‚úÖ Client {telegram_id} —Å–æ–∑–¥–∞–Ω –≤ event loop {id(client.loop)}")
            return client
    
    async def disconnect_client(self, telegram_id: int):
        """–û—Ç–∫–ª—é—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if telegram_id in self.active_clients:
            try:
                client = self.active_clients[telegram_id]
                if client.is_connected():
                    await client.disconnect()
                del self.active_clients[telegram_id]
                logger.info(f"üîå –ö–ª–∏–µ–Ω—Ç {telegram_id} –æ—Ç–∫–ª—é—á–µ–Ω")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ {telegram_id}: {e}")
    
    async def cleanup_inactive_clients(self):
        """–û—á–∏—Å—Ç–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤"""
        inactive = []
        
        for telegram_id, client in self.active_clients.items():
            try:
                if not client.is_connected():
                    inactive.append(telegram_id)
                elif not await client.is_user_authorized():
                    inactive.append(telegram_id)
            except:
                inactive.append(telegram_id)
        
        for telegram_id in inactive:
            await self.disconnect_client(telegram_id)
        
        if inactive:
            logger.info(f"üßπ –û—á–∏—â–µ–Ω–æ {len(inactive)} –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
shared_auth_manager = SharedAuthManager()

