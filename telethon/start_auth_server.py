#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
–ó–∞–ø—É—Å–∫–∞–µ—Ç HTTPS —Å–µ—Ä–≤–µ—Ä –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""

import asyncio
import logging
import os
import sys
import argparse
from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from auth_web_server import start_auth_server
from database import create_tables

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    parser = argparse.ArgumentParser(description="Telegram Auth Web Server")
    parser.add_argument("--host", default="0.0.0.0", help="Host to bind to")
    parser.add_argument("--port", type=int, default=8000, help="Port to bind to")
    parser.add_argument("--ssl-cert", help="SSL certificate file")
    parser.add_argument("--ssl-key", help="SSL private key file")
    parser.add_argument("--dev", action="store_true", help="Development mode (no SSL)")
    
    args = parser.parse_args()
    
    logger.info("üîê –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
    logger.info("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    auth_base_url = os.getenv("AUTH_BASE_URL")
    encryption_key = os.getenv("ENCRYPTION_KEY")
    
    if not encryption_key or encryption_key == "your_32_byte_base64_encryption_key_here":
        logger.error("‚ùå ENCRYPTION_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
        logger.info("üí° –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –∫–ª—é—á –∫–æ–º–∞–Ω–¥–æ–π:")
        logger.info("   python -c \"from cryptography.fernet import Fernet; print(Fernet.generate_key().decode())\"")
        return
    
    if not auth_base_url or auth_base_url == "https://yourdomain.com:8000":
        logger.warning("‚ö†Ô∏è AUTH_BASE_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
        logger.info("üí° –î–æ–±–∞–≤—å—Ç–µ –≤ .env —Ñ–∞–π–ª:")
        logger.info(f"   AUTH_BASE_URL=https://{args.host}:{args.port}")
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        logger.info("üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        create_tables()
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ SSL
        ssl_cert = args.ssl_cert or os.getenv("SSL_CERT_PATH")
        ssl_key = args.ssl_key or os.getenv("SSL_KEY_PATH")
        
        if args.dev:
            logger.warning("‚ö†Ô∏è –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ - SSL –æ—Ç–∫–ª—é—á–µ–Ω")
            ssl_cert = None
            ssl_key = None
        elif not ssl_cert or not ssl_key:
            logger.warning("‚ö†Ô∏è SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            logger.info("üí° –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ SSL:")
            logger.info("   1. –ü–æ–ª—É—á–∏—Ç–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç")
            logger.info("   2. –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç–∏ –≤ .env —Ñ–∞–π–ª–µ:")
            logger.info("      SSL_CERT_PATH=/path/to/certificate.crt")
            logger.info("      SSL_KEY_PATH=/path/to/private.key")
            logger.info("   3. –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ --ssl-cert –∏ --ssl-key")
        
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞...")
        logger.info(f"üìç –ê–¥—Ä–µ—Å: https://{args.host}:{args.port}")
        logger.info("üí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        start_auth_server(
            host=args.host,
            port=args.port,
            ssl_cert=ssl_cert,
            ssl_key=ssl_key
        )
        
    except KeyboardInterrupt:
        logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞: {str(e)}")
        logger.info("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        logger.info("   1. –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ .env —Ñ–∞–π–ª–µ")
        logger.info("   2. –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ—Ä—Ç–∞")
        logger.info("   3. –ù–∞–ª–∏—á–∏–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ (–¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞)")

if __name__ == "__main__":
    main()
