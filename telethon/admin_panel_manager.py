"""
Admin Panel Manager –¥–ª—è Telegram Mini App

–£–ø—Ä–∞–≤–ª—è–µ—Ç admin sessions —á–µ—Ä–µ–∑ Redis –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
–ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω –æ—Ç QR Login (—Ä–∞–∑–Ω—ã–µ prefixes: admin_session: vs qr_session:)
"""

import logging
import os
import uuid
import json
from datetime import datetime, timedelta, timezone
from typing import Optional, Dict, Any

import redis

from database import SessionLocal
from models import User

logger = logging.getLogger(__name__)


class AdminPanelManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
    
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Redis –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è admin sessions
    TTL: 1 —á–∞—Å (–ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ –∑–∞–Ω–æ–≤–æ –æ—Ç–∫—Ä—ã—Ç—å /admin)
    """
    
    def __init__(self):
        # Redis –¥–ª—è admin sessions
        redis_host = os.getenv("REDIS_HOST", "redis")
        redis_port = int(os.getenv("REDIS_PORT", 6379))
        redis_password = os.getenv("REDIS_PASSWORD")
        
        try:
            redis_kwargs = {
                "host": redis_host,
                "port": redis_port,
                "decode_responses": True
            }
            
            if redis_password:
                redis_kwargs["password"] = redis_password
            
            self.redis_client = redis.Redis(**redis_kwargs)
            self.redis_client.ping()
            
            logger.info(f"‚úÖ AdminPanelManager –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ Redis ({redis_host}:{redis_port})")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis: {e}")
            self.redis_client = None
            raise RuntimeError("AdminPanelManager —Ç—Ä–µ–±—É–µ—Ç Redis –¥–ª—è —Ä–∞–±–æ—Ç—ã")
        
        self.session_ttl = 3600  # 1 —á–∞—Å
        logger.info("‚úÖ AdminPanelManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def create_admin_session(self, telegram_id: int) -> Optional[str]:
        """
        –°–æ–∑–¥–∞—Ç—å admin session –≤ Redis
        
        Args:
            telegram_id: Telegram ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            
        Returns:
            Session token –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –∞–¥–º–∏–Ω
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞ –≤ PostgreSQL
        db = SessionLocal()
        
        try:
            user = db.query(User).filter(
                User.telegram_id == telegram_id,
                User.role == "admin"
            ).first()
            
            if not user:
                logger.warning(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è admin session –æ—Ç –Ω–µ-–∞–¥–º–∏–Ω–∞: {telegram_id}")
                return None
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π token
            session_token = str(uuid.uuid4())
            
            # –°–æ–∑–¥–∞–µ–º session data
            session_data = {
                "admin_id": telegram_id,
                "admin_name": user.first_name,
                "role": user.role,
                "created_at": datetime.now(timezone.utc).isoformat(),
                "expires": (datetime.now(timezone.utc) + timedelta(seconds=self.session_ttl)).isoformat()
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Redis —Å TTL
            redis_key = f"admin_session:{session_token}"
            self.redis_client.setex(
                redis_key,
                self.session_ttl,
                json.dumps(session_data)
            )
            
            logger.info(f"‚úÖ Admin session —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è {telegram_id} ({user.first_name})")
            
            return session_token
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è admin session: {e}")
            return None
        finally:
            db.close()
    
    def verify_admin_session(self, token: str, admin_id: int) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å admin session
        
        Args:
            token: Session token
            admin_id: Telegram ID –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            
        Returns:
            True –µ—Å–ª–∏ session –≤–∞–ª–∏–¥–Ω–∞ –∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç admin_id
        """
        if not self.redis_client:
            return False
        
        try:
            redis_key = f"admin_session:{token}"
            data = self.redis_client.get(redis_key)
            
            if not data:
                logger.warning(f"‚ö†Ô∏è Admin session –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {token[:8]}...")
                return False
            
            session_data = json.loads(data)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ admin_id —Å–æ–≤–ø–∞–¥–∞–µ—Ç
            if session_data["admin_id"] != admin_id:
                logger.warning(f"üö® Admin session mismatch: {admin_id} != {session_data['admin_id']}")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º expires (timezone-aware)
            expires = datetime.fromisoformat(session_data["expires"])
            if expires.tzinfo is None:
                expires = expires.replace(tzinfo=timezone.utc)
            
            if datetime.now(timezone.utc) > expires:
                logger.warning(f"‚è∞ Admin session –∏—Å—Ç–µ–∫–ª–∞: {token[:8]}...")
                self.redis_client.delete(redis_key)
                return False
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ admin session: {e}")
            return False
    
    def get_session_data(self, token: str) -> Optional[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ admin session
        
        Args:
            token: Session token
            
        Returns:
            Session data –∏–ª–∏ None
        """
        if not self.redis_client:
            return None
        
        try:
            redis_key = f"admin_session:{token}"
            data = self.redis_client.get(redis_key)
            
            if data:
                return json.loads(data)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è session: {e}")
        
        return None
    
    def invalidate_session(self, token: str):
        """
        –ò–Ω–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å admin session
        
        Args:
            token: Session token
        """
        if not self.redis_client:
            return
        
        try:
            redis_key = f"admin_session:{token}"
            self.redis_client.delete(redis_key)
            logger.info(f"‚úÖ Admin session —É–¥–∞–ª–µ–Ω–∞: {token[:8]}...")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è session: {e}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
admin_panel_manager = AdminPanelManager()

