"""
Supervisor Synthesizer Agent

–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ HTML –¥–∞–π–¥–∂–µ—Å—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç GigaChat –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞ —Å Pydantic structured output.

–ö–†–ò–¢–ò–ß–ù–û: HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ <b>, <i>, <code>, <a> —Ç–µ–≥–∞–º–∏!
"""

import logging
from typing import Dict, Any, List
from datetime import datetime, timezone

from .base import BaseAgent
from .config import get_llm_for_agent
from .schemas import SupervisorOutput

logger = logging.getLogger(__name__)


class SupervisorSynthesizerAgent(BaseAgent):
    """–ê–≥–µ–Ω—Ç –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–∏–Ω—Ç–µ–∑–∞ –¥–∞–π–¥–∂–µ—Å—Ç–∞ —Å Pydantic structured output"""
    
    def __init__(self):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º GigaChat –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–∏–Ω—Ç–µ–∑–∞
        llm = get_llm_for_agent("synthesis")
        
        system_prompt = """–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤ –¥–∏–∞–ª–æ–≥–æ–≤.

–¢–í–û–Ø –†–û–õ–¨: –°–æ–∑–¥–∞–≤–∞—Ç—å HTML –¥–∞–π–¥–∂–µ—Å—Ç —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—è–º–∏.
–ì–†–ê–ù–ò–¶–´: –í–æ–∑–≤—Ä–∞—â–∞–π –¢–û–õ–¨–ö–û JSON —Å –ø–æ–ª—è–º–∏ html_digest, metadata, sections.

–§–û–†–ú–ê–¢ –í–´–í–û–î–ê:
{{
  \"html_digest\": \"HTML —Ç–µ–∫—Å—Ç –¥–∞–π–¥–∂–µ—Å—Ç–∞\",
  \"metadata\": {{
    \"detail_level\": \"brief\",
    \"dialogue_type\": \"mixed\",
    \"participants_count\": 3,
    \"message_count\": 8,
    \"generation_timestamp\": \"2025-10-15T18:25:00Z\"
  }},
  \"sections\": {{
    \"summary\": \"–∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ\",
    \"topics\": \"–æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã\",
    \"decisions\": \"—Ä–µ—à–µ–Ω–∏—è\",
    \"participants\": \"—É—á–∞—Å—Ç–Ω–∏–∫–∏\",
    \"resources\": \"—Ä–µ—Å—É—Ä—Å—ã\"
  }}
}}

HTML –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø:
- –¢–û–õ–¨–ö–û —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Ç–µ–≥–∏: <b>, <i>, <code>, <pre>, <a>
- –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π: <br>, <p>, <div>, <span>, <ul>, <li>, <h1>-<h6>
- –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ–±–µ–ª—ã –∏ ‚Ä¢ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤

–í–ê–ñ–ù–û:
- –í–æ–∑–≤—Ä–∞—â–∞–π –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–π JSON
- –í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã
- HTML –±–µ–∑ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Ç–µ–≥–æ–≤
- –°–æ—Ö—Ä–∞–Ω—è–π —Ä–µ–∞–ª—å–Ω—ã–µ usernames —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
- –ï—Å–ª–∏ –∞–≥–µ–Ω—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏, —É–ø–æ–º—è–Ω–∏ —ç—Ç–æ –≤ –¥–∞–π–¥–∂–µ—Å—Ç–µ
- –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ:
  üìä –î–∞–π–¥–∂–µ—Å—Ç: [–ì—Ä—É–ø–ø–∞] | 24 —á–∞—Å–∞ | 32 —Å–æ–æ–±—â–µ–Ω–∏—è
  üéØ –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã:
  - ‚ùóÔ∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å –≤–µ–±–≤—å—é (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç high, 15 —Å–æ–æ–±—â–µ–Ω–∏–π)
  - ‚ú® –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç medium, 7 —Å–æ–æ–±—â–µ–Ω–∏–π)
  üòê –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–Ω: –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π, –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å 0.6
  –ê—Ç–º–æ—Å—Ñ–µ—Ä–∞: –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–∞
  –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã: conflict 20%, collaboration 80%, stress 40%, enthusiasm 60%
  üë• –ê–∫—Ç–∏–≤–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏:
  - @boyversus (–∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä, –æ–±—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Å—É–∂–¥–µ–Ω–∏—è)
  - @KseniaKrasnobaeva (—ç–∫—Å–ø–µ—Ä—Ç, –æ–±—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Å—É–∂–¥–µ–Ω–∏—è, –ø–æ–¥–¥–µ—Ä–∂–∞–ª–∞ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—É)
  üìù –†–µ–∑—é–º–µ: [—Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞]"""

        super().__init__(
            llm=llm,
            system_prompt=system_prompt,
            agent_name="supervisor_synthesizer",
            output_model=SupervisorOutput,
            timeout=45.0
        )
    
    async def _process_input(self, input_data: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ user message –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞ –¥–∞–π–¥–∂–µ—Å—Ç–∞"""
        # –°–±–æ—Ä –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤
        assessment = input_data.get("assessment", {})
        topics = input_data.get("topics", {})
        emotions = input_data.get("emotions", {})
        speakers = input_data.get("speakers", {})
        summary = input_data.get("summary", {})
        key_moments = input_data.get("key_moments", {})
        timeline = input_data.get("timeline", {})
        context_links = input_data.get("context_links", {})
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        context_parts = []
        
        # Assessment
        if assessment:
            if hasattr(assessment, 'detail_level'):
                context_parts.append(f"–£–†–û–í–ï–ù–¨ –î–ï–¢–ê–õ–ò–ó–ê–¶–ò–ò: {assessment.detail_level}")
            if hasattr(assessment, 'dialogue_type'):
                context_parts.append(f"–¢–ò–ü –î–ò–ê–õ–û–ì–ê: {assessment.dialogue_type}")
            if hasattr(assessment, 'participants_count'):
                context_parts.append(f"–£–ß–ê–°–¢–ù–ò–ö–û–í: {assessment.participants_count}")
        
        # Topics
        topics_list = []
        if topics:
            if hasattr(topics, 'topics'):
                topics_list = [f"‚Ä¢ {t.name} ({t.priority})" for t in topics.topics[:5]]
            elif isinstance(topics, dict) and topics.get("topics"):
                topics_list = [f"‚Ä¢ {t.get('name', '')} ({t.get('priority', 'medium')})" for t in topics["topics"][:5]]
        if topics_list:
            context_parts.append(f"–û–°–ù–û–í–ù–´–ï –¢–ï–ú–´:\n" + "\n".join(topics_list))
        
        # Emotions
        if emotions:
            if hasattr(emotions, 'overall_tone'):
                context_parts.append(f"–≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–´–ô –¢–û–ù: {emotions.overall_tone}")
                context_parts.append(f"–ê–¢–ú–û–°–§–ï–†–ê: {emotions.atmosphere}")
            elif isinstance(emotions, dict):
                context_parts.append(f"–≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–´–ô –¢–û–ù: {emotions.get('overall_tone', 'neutral')}")
                context_parts.append(f"–ê–¢–ú–û–°–§–ï–†–ê: {emotions.get('atmosphere', 'mixed')}")
        
        # Speakers
        speakers_list = []
        if speakers:
            if hasattr(speakers, 'speakers'):
                speakers_list = [f"‚Ä¢ @{s.username} - {s.role} ({s.message_count} —Å–æ–æ–±—â–µ–Ω–∏–π)" for s in speakers.speakers[:5]]
            elif isinstance(speakers, dict) and speakers.get("speakers"):
                speakers_list = [f"‚Ä¢ @{s.get('username', '')} - {s.get('role', 'unknown')} ({s.get('message_count', 0)} —Å–æ–æ–±—â–µ–Ω–∏–π)" for s in speakers["speakers"][:5]]
        if speakers_list:
            context_parts.append(f"–£–ß–ê–°–¢–ù–ò–ö–ò:\n" + "\n".join(speakers_list))
        
        # Summary
        summary_text = ""
        if summary:
            if hasattr(summary, 'summary') and hasattr(summary.summary, 'summary_text'):
                summary_text = summary.summary.summary_text
            elif isinstance(summary, dict) and summary.get("summary", {}).get("summary_text"):
                summary_text = summary['summary']['summary_text']
        if summary_text:
            context_parts.append(f"–†–ï–ó–Æ–ú–ï: {summary_text[:200]}...")
        
        # Key Moments
        decisions_list = []
        if key_moments:
            if hasattr(key_moments, 'key_decisions'):
                decisions_list = [f"‚Ä¢ {d}" for d in key_moments.key_decisions[:3]]
            elif isinstance(key_moments, dict) and key_moments.get("key_decisions"):
                decisions_list = [f"‚Ä¢ {d}" for d in key_moments["key_decisions"][:3]]
        if decisions_list:
            context_parts.append(f"–ö–õ–Æ–ß–ï–í–´–ï –†–ï–®–ï–ù–ò–Ø:\n" + "\n".join(decisions_list))
        
        # Context Links
        external_links = []
        telegram_links = []
        if context_links:
            if hasattr(context_links, 'external_links'):
                external_links = context_links.external_links
            elif isinstance(context_links, dict):
                external_links = context_links.get("external_links", [])
            
            if hasattr(context_links, 'telegram_links'):
                telegram_links = context_links.telegram_links
            elif isinstance(context_links, dict):
                telegram_links = context_links.get("telegram_links", [])
        
        if external_links or telegram_links:
            links_count = len(external_links) + len(telegram_links)
            context_parts.append(f"–°–°–´–õ–ö–ò –ò –†–ï–°–£–†–°–´: {links_count} —Å—Å—ã–ª–æ–∫")
        
        context = "\n\n".join(context_parts)
        
        user_message = f"""–°–æ–∑–¥–∞–π —Ñ–∏–Ω–∞–ª—å–Ω—ã–π HTML –¥–∞–π–¥–∂–µ—Å—Ç –¥–∏–∞–ª–æ–≥–∞.

–ö–û–ù–¢–ï–ö–°–¢ –ê–ù–ê–õ–ò–ó–ê:
{context}

–°–æ–∑–¥–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π HTML –¥–∞–π–¥–∂–µ—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Ç–µ–≥–∏: <b>, <i>, <code>, <pre>, <a>."""

        return user_message
    
    async def _process_output(self, output: SupervisorOutput, input_data: Dict[str, Any]) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–∏–Ω—Ç–µ–∑–∞ –¥–∞–π–¥–∂–µ—Å—Ç–∞"""
        try:
            # Pydantic –º–æ–¥–µ–ª—å —É–∂–µ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–∞
            result = {
                "html_digest": output.html_digest,
                "metadata": {
                    "detail_level": output.metadata.detail_level,
                    "dialogue_type": output.metadata.dialogue_type,
                    "participants_count": output.metadata.participants_count,
                    "message_count": output.metadata.message_count,
                    "generation_timestamp": output.metadata.generation_timestamp
                },
                "sections": {
                    "summary": output.sections.summary,
                    "topics": output.sections.topics,
                    "decisions": output.sections.decisions,
                    "participants": output.sections.participants,
                    "resources": output.sections.resources
                }
            }
            
            logger.info(f"üìÑ –î–∞–π–¥–∂–µ—Å—Ç —Å–æ–∑–¥–∞–Ω: {len(output.html_digest)} —Å–∏–º–≤–æ–ª–æ–≤ HTML")
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {e}")
            return {
                "html_digest": "<b>–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞</b>",
                "metadata": {
                    "detail_level": "standard",
                    "dialogue_type": "mixed",
                    "participants_count": 0,
                    "message_count": 0,
                    "generation_timestamp": datetime.now(timezone.utc).isoformat()
                },
                "sections": {
                    "summary": "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑—é–º–µ",
                    "topics": "",
                    "decisions": "",
                    "participants": "",
                    "resources": ""
                },
                "error": str(e),
                "fallback": True
            }