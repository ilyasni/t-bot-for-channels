"""
Qdrant Client –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î
"""
import logging
from typing import List, Dict, Optional, Any
from qdrant_client import QdrantClient as QdrantClientBase
from qdrant_client.models import (
    Distance,
    VectorParams,
    PointStruct,
    Filter,
    FieldCondition,
    MatchValue,
    Range
)
from datetime import datetime
import config

logger = logging.getLogger(__name__)


class QdrantClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Qdrant –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Qdrant"""
        self.client = QdrantClientBase(
            url=config.QDRANT_URL,
            api_key=config.QDRANT_API_KEY,
            timeout=config.QDRANT_TIMEOUT
        )
        logger.info(f"‚úÖ Qdrant –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {config.QDRANT_URL}")
    
    def get_collection_name(self, user_id: int) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–º—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return f"telegram_posts_{user_id}"
    
    async def ensure_collection(self, user_id: int, vector_size: int = 768):
        """
        –°–æ–∑–¥–∞—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            vector_size: –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –≤–µ–∫—Ç–æ—Ä–æ–≤ (768 –¥–ª—è GigaChat/sentence-transformers)
        """
        collection_name = self.get_collection_name(user_id)
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
            collections = self.client.get_collections().collections
            exists = any(c.name == collection_name for c in collections)
            
            if not exists:
                # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é
                self.client.create_collection(
                    collection_name=collection_name,
                    vectors_config=VectorParams(
                        size=vector_size,
                        distance=Distance.COSINE
                    )
                )
                
                # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
                self.client.create_payload_index(
                    collection_name=collection_name,
                    field_name="channel_id",
                    field_schema="integer"
                )
                self.client.create_payload_index(
                    collection_name=collection_name,
                    field_name="posted_at",
                    field_schema="keyword"  # datetime —Ö—Ä–∞–Ω–∏—Ç—Å—è –∫–∞–∫ ISO string
                )
                self.client.create_payload_index(
                    collection_name=collection_name,
                    field_name="tags",
                    field_schema="keyword"
                )
                
                logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è: {collection_name} (vector_size={vector_size})")
            else:
                logger.debug(f"–ö–æ–ª–ª–µ–∫—Ü–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {collection_name}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ {collection_name}: {e}")
            raise
    
    async def upsert_point(
        self,
        user_id: int,
        point_id: str,
        vector: List[float],
        payload: Dict[str, Any]
    ) -> str:
        """
        –î–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ—á–∫—É –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            point_id: ID —Ç–æ—á–∫–∏ (–æ–±—ã—á–Ω–æ post_id)
            vector: –í–µ–∫—Ç–æ—Ä embeddings
            payload: –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ (text, channel_id, posted_at, tags, url, etc.)
            
        Returns:
            ID –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–π —Ç–æ—á–∫–∏
        """
        collection_name = self.get_collection_name(user_id)
        
        try:
            # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –∫–æ–ª–ª–µ–∫—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            await self.ensure_collection(user_id, vector_size=len(vector))
            
            # –°–æ–∑–¥–∞–µ–º —Ç–æ—á–∫—É (ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π)
            point = PointStruct(
                id=str(point_id),
                vector=vector,
                payload=payload
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ Qdrant
            self.client.upsert(
                collection_name=collection_name,
                points=[point]
            )
            
            logger.debug(f"‚úÖ –¢–æ—á–∫–∞ {point_id} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ {collection_name}")
            return point_id
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ—á–∫–∏ {point_id}: {e}")
            raise
    
    async def upsert_points_batch(
        self,
        user_id: int,
        points: List[Dict[str, Any]]
    ) -> int:
        """
        Batch –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ—á–µ–∫
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            points: –°–ø–∏—Å–æ–∫ —Ç–æ—á–µ–∫ [{id, vector, payload}, ...]
            
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–æ—á–µ–∫
        """
        collection_name = self.get_collection_name(user_id)
        
        try:
            if not points:
                return 0
            
            # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –∫–æ–ª–ª–µ–∫—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            vector_size = len(points[0]["vector"])
            await self.ensure_collection(user_id, vector_size=vector_size)
            
            # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ PointStruct (ID –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å—Ç—Ä–æ–∫–∞–º–∏)
            point_structs = [
                PointStruct(
                    id=str(p["id"]),
                    vector=p["vector"],
                    payload=p["payload"]
                )
                for p in points
            ]
            
            # Batch upsert
            self.client.upsert(
                collection_name=collection_name,
                points=point_structs
            )
            
            logger.info(f"‚úÖ Batch –¥–æ–±–∞–≤–ª–µ–Ω–æ {len(points)} —Ç–æ—á–µ–∫ –≤ {collection_name}")
            return len(points)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ batch –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {e}")
            raise
    
    async def search(
        self,
        user_id: int,
        query_vector: List[float],
        limit: int = 10,
        score_threshold: Optional[float] = None,
        channel_id: Optional[int] = None,
        tags: Optional[List[str]] = None,
        date_from: Optional[datetime] = None,
        date_to: Optional[datetime] = None
    ) -> List[Dict[str, Any]]:
        """
        –í–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            query_vector: –í–µ–∫—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–∞
            limit: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            score_threshold: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π score
            channel_id: –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞–Ω–∞–ª—É
            tags: –§–∏–ª—å—Ç—Ä –ø–æ —Ç–µ–≥–∞–º
            date_from: –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ (–æ—Ç)
            date_to: –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ (–¥–æ)
            
        Returns:
            –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç–æ—á–µ–∫ —Å payload –∏ score
        """
        collection_name = self.get_collection_name(user_id)
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
            collections = self.client.get_collections().collections
            if not any(c.name == collection_name for c in collections):
                logger.warning(f"–ö–æ–ª–ª–µ–∫—Ü–∏—è {collection_name} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return []
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
            filter_conditions = []
            
            if channel_id is not None:
                filter_conditions.append(
                    FieldCondition(
                        key="channel_id",
                        match=MatchValue(value=channel_id)
                    )
                )
            
            if tags:
                for tag in tags:
                    filter_conditions.append(
                        FieldCondition(
                            key="tags",
                            match=MatchValue(value=tag)
                        )
                    )
            
            # NOTE: date_from/date_to —Ñ–∏–ª—å—Ç—Ä –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –Ω–∞ —É—Ä–æ–≤–Ω–µ –ë–î –ø—Ä–∏ –æ–±–æ–≥–∞—â–µ–Ω–∏–∏,
            # —Ç.–∫. posted_at —Ö—Ä–∞–Ω–∏—Ç—Å—è –∫–∞–∫ keyword (ISO string), –∞ Range —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å —á–∏—Å–ª–∞–º–∏
            
            # –°–æ–±–∏—Ä–∞–µ–º Filter –æ–±—ä–µ–∫—Ç
            search_filter = Filter(must=filter_conditions) if filter_conditions else None
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
            results = self.client.search(
                collection_name=collection_name,
                query_vector=query_vector,
                limit=limit,
                score_threshold=score_threshold,
                query_filter=search_filter
            )
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            formatted_results = [
                {
                    "id": result.id,
                    "score": result.score,
                    "payload": result.payload
                }
                for result in results
            ]
            
            logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(formatted_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è user {user_id}")
            return formatted_results
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
            raise
    
    async def delete_point(self, user_id: int, point_id: str) -> bool:
        """–£–¥–∞–ª–∏—Ç—å —Ç–æ—á–∫—É –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏"""
        collection_name = self.get_collection_name(user_id)
        
        try:
            self.client.delete(
                collection_name=collection_name,
                points_selector=[str(point_id)]
            )
            logger.debug(f"üóëÔ∏è –¢–æ—á–∫–∞ {point_id} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ {collection_name}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ—á–∫–∏ {point_id}: {e}")
            return False
    
    async def delete_collection(self, user_id: int) -> bool:
        """–£–¥–∞–ª–∏—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        collection_name = self.get_collection_name(user_id)
        
        try:
            self.client.delete_collection(collection_name=collection_name)
            logger.info(f"üóëÔ∏è –ö–æ–ª–ª–µ–∫—Ü–∏—è {collection_name} —É–¥–∞–ª–µ–Ω–∞")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ {collection_name}: {e}")
            return False
    
    async def get_collection_info(self, user_id: int) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏"""
        collection_name = self.get_collection_name(user_id)
        
        try:
            info = self.client.get_collection(collection_name=collection_name)
            return {
                "name": collection_name,
                "vectors_count": info.vectors_count,
                "points_count": info.points_count,
                "status": info.status
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {e}")
            return None


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞
qdrant_client = QdrantClient()

