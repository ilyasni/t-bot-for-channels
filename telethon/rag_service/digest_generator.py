"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤ –ø–æ—Å—Ç–æ–≤
"""
import logging
import sys
import os
from typing import List, Dict, Any, Optional
from datetime import datetime, timedelta
from collections import defaultdict

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ path
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from database import SessionLocal
from models import Post, Channel, DigestSettings
from generator import rag_generator
import config

logger = logging.getLogger(__name__)


class DigestGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤"""
        self.rag_generator = rag_generator
        self.ai_digest_generator = None  # Lazy load
        logger.info("‚úÖ Digest Generator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def generate_digest(
        self,
        user_id: int,
        date_from: datetime,
        date_to: datetime,
        channels: Optional[List[int]] = None,
        tags: Optional[List[str]] = None,
        format: str = "markdown",
        max_posts: int = 20
    ) -> Dict[str, Any]:
        """
        –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç –ø–æ—Å—Ç–æ–≤
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            date_from: –ù–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞
            date_to: –ö–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞
            channels: –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞–Ω–∞–ª–∞–º
            tags: –§–∏–ª—å—Ç—Ä –ø–æ —Ç–µ–≥–∞–º
            format: –§–æ—Ä–º–∞—Ç (markdown/html/plain)
            max_posts: –ú–∞–∫—Å–∏–º—É–º –ø–æ—Å—Ç–æ–≤ –≤ –¥–∞–π–¥–∂–µ—Å—Ç–µ
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–π–¥–∂–µ—Å—Ç–æ–º
        """
        try:
            logger.info(f"üì∞ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞ –¥–ª—è user {user_id}: {date_from} - {date_to}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ AI-—Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è
            db = SessionLocal()
            settings = db.query(DigestSettings).filter(
                DigestSettings.user_id == user_id
            ).first()
            
            # –ï—Å–ª–∏ AI –≤–∫–ª—é—á–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º AI-–¥–∞–π–¥–∂–µ—Å—Ç
            if settings and settings.ai_summarize:
                db.close()
                logger.info(f"ü§ñ –ò—Å–ø–æ–ª—å–∑—É–µ–º AI-–¥–∞–π–¥–∂–µ—Å—Ç –¥–ª—è user {user_id}")
                
                # Lazy load AI generator
                if self.ai_digest_generator is None:
                    from ai_digest_generator import ai_digest_generator
                    self.ai_digest_generator = ai_digest_generator
                
                digest_text = await self.ai_digest_generator.generate_ai_digest(
                    user_id=user_id,
                    date_from=date_from,
                    date_to=date_to,
                    preferred_topics=settings.preferred_topics,
                    topics_limit=settings.topics_limit,
                    summary_style=settings.summary_style
                )
                
                # –ü–æ–¥—Å—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                db2 = SessionLocal()
                try:
                    posts_count = db2.query(Post).filter(
                        Post.user_id == user_id,
                        Post.posted_at >= date_from,
                        Post.posted_at <= date_to
                    ).count()
                finally:
                    db2.close()
                
                return {
                    "user_id": user_id,
                    "period": {"from": date_from, "to": date_to},
                    "posts_count": posts_count,
                    "digest": digest_text,
                    "format": "markdown",
                    "ai_generated": True,
                    "generated_at": datetime.now()
                }
            
            # –û–±—ã—á–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç (–±–µ–∑ AI)
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç—ã –∑–∞ –ø–µ—Ä–∏–æ–¥
            try:
                query = db.query(Post).filter(
                    Post.user_id == user_id,
                    Post.posted_at >= date_from,
                    Post.posted_at <= date_to
                )
                
                if channels:
                    query = query.filter(Post.channel_id.in_(channels))
                
                if tags:
                    # –§–∏–ª—å—Ç—Ä –ø–æ —Ç–µ–≥–∞–º (JSON —Å–æ–¥–µ—Ä–∂–∏—Ç —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏–∑ —Ç–µ–≥–æ–≤)
                    from sqlalchemy import func
                    for tag in tags:
                        query = query.filter(
                            func.json_contains(Post.tags, f'"{tag}"')
                        )
                
                posts = query.order_by(Post.posted_at.desc()).limit(max_posts).all()
                
                if not posts:
                    return {
                        "user_id": user_id,
                        "period": {"from": date_from, "to": date_to},
                        "posts_count": 0,
                        "digest": "–ó–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –ø–æ—Å—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
                        "format": format,
                        "generated_at": datetime.now()
                    }
                
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ—Å—Ç—ã –ø–æ –∫–∞–Ω–∞–ª–∞–º
                posts_by_channel = defaultdict(list)
                for post in posts:
                    posts_by_channel[post.channel.channel_username].append(post)
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–π–¥–∂–µ—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞
                if format == "markdown":
                    digest = self._generate_markdown_digest(posts_by_channel, date_from, date_to)
                elif format == "html":
                    digest = self._generate_html_digest(posts_by_channel, date_from, date_to)
                else:  # plain
                    digest = self._generate_plain_digest(posts_by_channel, date_from, date_to)
                
                logger.info(f"‚úÖ –î–∞–π–¥–∂–µ—Å—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è user {user_id} ({len(posts)} –ø–æ—Å—Ç–æ–≤)")
                
                return {
                    "user_id": user_id,
                    "period": {"from": date_from, "to": date_to},
                    "posts_count": len(posts),
                    "digest": digest,
                    "format": format,
                    "generated_at": datetime.now()
                }
                
            finally:
                db.close()
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {e}")
            raise
    
    def _generate_markdown_digest(
        self,
        posts_by_channel: Dict[str, List],
        date_from: datetime,
        date_to: datetime
    ) -> str:
        """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown"""
        lines = []
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        lines.append(f"# üì∞ –î–∞–π–¥–∂–µ—Å—Ç –ø–æ—Å—Ç–æ–≤")
        lines.append(f"**–ü–µ—Ä–∏–æ–¥:** {date_from.strftime('%d.%m.%Y')} - {date_to.strftime('%d.%m.%Y')}")
        lines.append("")
        
        # –ü–æ—Å—Ç—ã –ø–æ –∫–∞–Ω–∞–ª–∞–º
        for channel_username, posts in sorted(posts_by_channel.items()):
            lines.append(f"## üì¢ @{channel_username}")
            lines.append(f"*–ü–æ—Å—Ç–æ–≤: {len(posts)}*")
            lines.append("")
            
            for post in posts:
                # –î–∞—Ç–∞ –∏ —Ç–µ–≥–∏
                date_str = post.posted_at.strftime('%d.%m.%Y %H:%M')
                tags_str = ""
                if post.tags:
                    tags_str = " | " + ", ".join([f"`{tag}`" for tag in post.tags[:3]])
                
                lines.append(f"### {date_str}{tags_str}")
                
                # –¢–µ–∫—Å—Ç (–ø–µ—Ä–≤—ã–µ 300 —Å–∏–º–≤–æ–ª–æ–≤)
                text = post.text[:300] + "..." if len(post.text) > 300 else post.text
                lines.append(text)
                
                # –°—Å—ã–ª–∫–∞
                if post.url:
                    lines.append(f"[–ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é ‚Üí]({post.url})")
                
                lines.append("")
        
        return "\n".join(lines)
    
    def _generate_html_digest(
        self,
        posts_by_channel: Dict[str, List],
        date_from: datetime,
        date_to: datetime
    ) -> str:
        """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ HTML"""
        lines = []
        
        lines.append("<html><body>")
        lines.append(f"<h1>üì∞ –î–∞–π–¥–∂–µ—Å—Ç –ø–æ—Å—Ç–æ–≤</h1>")
        lines.append(f"<p><b>–ü–µ—Ä–∏–æ–¥:</b> {date_from.strftime('%d.%m.%Y')} - {date_to.strftime('%d.%m.%Y')}</p>")
        
        for channel_username, posts in sorted(posts_by_channel.items()):
            lines.append(f"<h2>üì¢ @{channel_username}</h2>")
            lines.append(f"<p><i>–ü–æ—Å—Ç–æ–≤: {len(posts)}</i></p>")
            
            for post in posts:
                date_str = post.posted_at.strftime('%d.%m.%Y %H:%M')
                
                lines.append("<div style='margin-bottom: 20px;'>")
                lines.append(f"<h3>{date_str}</h3>")
                
                text = post.text[:300] + "..." if len(post.text) > 300 else post.text
                lines.append(f"<p>{text}</p>")
                
                if post.url:
                    lines.append(f"<a href='{post.url}'>–ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é ‚Üí</a>")
                
                lines.append("</div>")
        
        lines.append("</body></html>")
        
        return "\n".join(lines)
    
    def _generate_plain_digest(
        self,
        posts_by_channel: Dict[str, List],
        date_from: datetime,
        date_to: datetime
    ) -> str:
        """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç –≤ plain text"""
        lines = []
        
        lines.append("=" * 60)
        lines.append("–î–ê–ô–î–ñ–ï–°–¢ –ü–û–°–¢–û–í")
        lines.append(f"–ü–µ—Ä–∏–æ–¥: {date_from.strftime('%d.%m.%Y')} - {date_to.strftime('%d.%m.%Y')}")
        lines.append("=" * 60)
        lines.append("")
        
        for channel_username, posts in sorted(posts_by_channel.items()):
            lines.append(f"@{channel_username} ({len(posts)} –ø–æ—Å—Ç–æ–≤)")
            lines.append("-" * 60)
            
            for post in posts:
                date_str = post.posted_at.strftime('%d.%m.%Y %H:%M')
                lines.append(f"{date_str}")
                
                text = post.text[:300] + "..." if len(post.text) > 300 else post.text
                lines.append(text)
                
                if post.url:
                    lines.append(f"–°—Å—ã–ª–∫–∞: {post.url}")
                
                lines.append("")
        
        return "\n".join(lines)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
digest_generator = DigestGenerator()

