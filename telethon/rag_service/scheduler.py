"""
–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤
–ë–∞–∑–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
"""
import logging
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

logger = logging.getLogger(__name__)


class DigestScheduler:
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        self.scheduler = AsyncIOScheduler()
        logger.info("‚úÖ Digest Scheduler –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def start(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        try:
            if not self.scheduler.running:
                self.scheduler.start()
                logger.info("üïê Digest Scheduler –∑–∞–ø—É—â–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        try:
            if self.scheduler.running:
                self.scheduler.shutdown()
                logger.info("üõë Digest Scheduler –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
    
    async def schedule_digest(
        self,
        user_id: int,
        time: str = "09:00",
        days_of_week: str = "mon-sun"
    ):
        """
        –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            time: –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (HH:MM)
            days_of_week: –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
        """
        try:
            hour, minute = time.split(":")
            
            trigger = CronTrigger(
                hour=int(hour),
                minute=int(minute),
                day_of_week=days_of_week
            )
            
            job_id = f"digest_user_{user_id}"
            
            # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
            if self.scheduler.get_job(job_id):
                self.scheduler.remove_job(job_id)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ
            self.scheduler.add_job(
                self._send_digest,
                trigger=trigger,
                id=job_id,
                args=[user_id],
                replace_existing=True
            )
            
            logger.info(f"üìÖ –î–∞–π–¥–∂–µ—Å—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –¥–ª—è user {user_id} ({time}, {days_of_week})")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞: {e}")
            raise
    
    async def _send_digest(self, user_id: int):
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        try:
            logger.info(f"üìß –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –¥–ª—è user {user_id}")
            # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –¥–∞–π–¥–∂–µ—Å—Ç–∞ —á–µ—Ä–µ–∑ Telegram
            # –≠—Ç–æ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Telegram Bot
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {e}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
digest_scheduler = DigestScheduler()

