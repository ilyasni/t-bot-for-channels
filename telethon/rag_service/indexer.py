"""
–°–µ—Ä–≤–∏—Å –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–æ–≤ –≤ Qdrant
"""
import logging
import sys
import os
from typing import List, Optional, Dict, Any, Tuple
from datetime import datetime, timezone

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ path –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ models
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from database import SessionLocal
from models import Post, User, IndexingStatus
from vector_db import qdrant_client
from embeddings import embeddings_service
import config

logger = logging.getLogger(__name__)


class IndexerService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤ –≤ Qdrant"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.qdrant = qdrant_client
        self.embeddings = embeddings_service
        logger.info("‚úÖ Indexer Service –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def index_post(
        self,
        post_id: int,
        db: Optional[Any] = None
    ) -> Tuple[bool, Optional[str]]:
        """
        –ò–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞—Ç—å –æ–¥–∏–Ω –ø–æ—Å—Ç
        
        Args:
            post_id: ID –ø–æ—Å—Ç–∞
            db: –°–µ—Å—Å–∏—è –ë–î (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            –ö–æ—Ä—Ç–µ–∂ (—É—Å–ø–µ—Ö, —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ)
        """
        close_db = False
        if db is None:
            db = SessionLocal()
            close_db = True
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç
            post = db.query(Post).filter(Post.id == post_id).first()
            if not post:
                error_msg = f"–ü–æ—Å—Ç {post_id} –Ω–µ –Ω–∞–π–¥–µ–Ω"
                logger.warning(f"‚ö†Ô∏è {error_msg}")
                return False, error_msg
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—Å—Ç–∞
            if not post.text or not post.text.strip():
                error_msg = "–ü–æ—Å—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞"
                logger.debug(f"‚è≠Ô∏è –ü–æ—Å—Ç {post_id}: {error_msg}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∫ skipped
                self._save_indexing_status(
                    db, post.user_id, post_id,
                    status="skipped",
                    error=error_msg
                )
                return False, error_msg
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Ä–∞–∑–±–∏–≤–∞—Ç—å –Ω–∞ chunks
            token_count = self.embeddings.count_tokens(post.text)
            max_tokens, overlap_tokens = self.embeddings.get_chunking_params("gigachat")
            
            if token_count <= max_tokens:
                # –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º –ø–æ—Å—Ç —Ü–µ–ª–∏–∫–æ–º
                success = await self._index_single_chunk(
                    db, post, post.text, chunk_index=0, total_chunks=1
                )
                return success, None if success else "–û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏"
            else:
                # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ chunks
                chunks = self.embeddings.chunk_text(
                    post.text,
                    max_tokens=max_tokens,
                    overlap_tokens=overlap_tokens
                )
                
                logger.info(f"üìÑ –ü–æ—Å—Ç {post_id}: —Ä–∞–∑–±–∏—Ç –Ω–∞ {len(chunks)} chunks")
                
                # –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π chunk
                success_count = 0
                for i, (chunk_text, start_pos, end_pos) in enumerate(chunks):
                    success = await self._index_single_chunk(
                        db, post, chunk_text,
                        chunk_index=i,
                        total_chunks=len(chunks),
                        start_pos=start_pos,
                        end_pos=end_pos
                    )
                    if success:
                        success_count += 1
                
                if success_count == len(chunks):
                    return True, None
                else:
                    error_msg = f"–ü—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–æ {success_count}/{len(chunks)} chunks"
                    return False, error_msg
                    
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ {post_id}: {e}"
            logger.error(f"‚ùå {error_msg}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—à–∏–±–∫–∏
            try:
                post = db.query(Post).filter(Post.id == post_id).first()
                if post:
                    self._save_indexing_status(
                        db, post.user_id, post_id,
                        status="failed",
                        error=str(e)[:500]
                    )
            except:
                pass
            
            return False, error_msg
            
        finally:
            if close_db:
                db.close()
    
    async def _index_single_chunk(
        self,
        db: Any,
        post: Post,
        chunk_text: str,
        chunk_index: int = 0,
        total_chunks: int = 1,
        start_pos: int = 0,
        end_pos: Optional[int] = None
    ) -> bool:
        """
        –ò–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞—Ç—å –æ–¥–∏–Ω chunk —Ç–µ–∫—Å—Ç–∞
        
        Args:
            db: –°–µ—Å—Å–∏—è –ë–î
            post: –û–±—ä–µ–∫—Ç Post
            chunk_text: –¢–µ–∫—Å—Ç chunk'–∞
            chunk_index: –ò–Ω–¥–µ–∫—Å chunk'–∞
            total_chunks: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ chunks
            start_pos: –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º —Ç–µ–∫—Å—Ç–µ
            end_pos: –ö–æ–Ω–µ—á–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º —Ç–µ–∫—Å—Ç–µ
            
        Returns:
            –£—Å–ø–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º embedding
            result = await self.embeddings.generate_embedding(chunk_text)
            if not result:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å embedding –¥–ª—è –ø–æ—Å—Ç–∞ {post.id}")
                return False
            
            embedding, provider = result
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º payload –¥–ª—è Qdrant
            payload = {
                "post_id": post.id,
                "text": chunk_text,
                "channel_id": post.channel_id,
                "channel_username": post.channel.channel_username,
                "posted_at": post.posted_at.isoformat(),
                "tags": post.tags or [],
                "url": post.url,
                "views": post.views,
                "chunk_index": chunk_index,
                "total_chunks": total_chunks,
                "start_pos": start_pos,
                "end_pos": end_pos or len(chunk_text),
                "embedding_provider": provider
            }
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è chunk'–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º UUID —Ñ–æ—Ä–º–∞—Ç)
            import uuid
            if total_chunks > 1:
                # –î–ª—è chunks –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏—é post_id + chunk_index
                point_id = str(uuid.uuid5(uuid.NAMESPACE_DNS, f"post_{post.id}_chunk_{chunk_index}"))
            else:
                # –î–ª—è –æ–¥–Ω–æ–≥–æ chunk –∏—Å–ø–æ–ª—å–∑—É–µ–º UUID –Ω–∞ –æ—Å–Ω–æ–≤–µ post_id
                point_id = str(uuid.uuid5(uuid.NAMESPACE_DNS, f"post_{post.id}"))
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Qdrant
            vector_id = await self.qdrant.upsert_point(
                user_id=post.user_id,
                point_id=point_id,
                vector=embedding,
                payload=payload
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ chunk'–∞ –∏–ª–∏ –µ—Å–ª–∏ –æ–¥–∏–Ω chunk)
            if chunk_index == 0:
                self._save_indexing_status(
                    db, post.user_id, post.id,
                    vector_id=vector_id,
                    status="success"
                )
            
            logger.debug(f"‚úÖ –ü–æ—Å—Ç {post.id} chunk {chunk_index+1}/{total_chunks} –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω ({provider})")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ chunk'–∞ {chunk_index} –ø–æ—Å—Ç–∞ {post.id}: {e}")
            return False
    
    def _save_indexing_status(
        self,
        db: Any,
        user_id: int,
        post_id: int,
        vector_id: Optional[str] = None,
        status: str = "success",
        error: Optional[str] = None
    ):
        """
        –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ –≤ –ë–î
        
        Args:
            db: –°–µ—Å—Å–∏—è –ë–î
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            post_id: ID –ø–æ—Å—Ç–∞
            vector_id: ID –≤–µ–∫—Ç–æ—Ä–∞ –≤ Qdrant
            status: –°—Ç–∞—Ç—É—Å (success/failed/skipped)
            error: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å—Ç–∞—Ç—É—Å
            existing = db.query(IndexingStatus).filter(
                IndexingStatus.user_id == user_id,
                IndexingStatus.post_id == post_id
            ).first()
            
            if existing:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
                existing.indexed_at = datetime.now(timezone.utc)
                existing.vector_id = vector_id
                existing.status = status
                existing.error = error
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
                indexing_status = IndexingStatus(
                    user_id=user_id,
                    post_id=post_id,
                    vector_id=vector_id,
                    status=status,
                    error=error
                )
                db.add(indexing_status)
            
            db.commit()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏: {e}")
            db.rollback()
    
    async def index_posts_batch(
        self,
        post_ids: List[int]
    ) -> Dict[str, Any]:
        """
        Batch –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤
        
        Args:
            post_ids: –°–ø–∏—Å–æ–∫ ID –ø–æ—Å—Ç–æ–≤
            
        Returns:
            –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
        """
        if not post_ids:
            return {
                "total": 0,
                "success": 0,
                "failed": 0,
                "skipped": 0,
                "errors": []
            }
        
        logger.info(f"üîÑ –ù–∞—á–∞–ª–æ batch –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ {len(post_ids)} –ø–æ—Å—Ç–æ–≤")
        
        db = SessionLocal()
        try:
            success_count = 0
            failed_count = 0
            skipped_count = 0
            errors = []
            
            for post_id in post_ids:
                success, error = await self.index_post(post_id, db)
                
                if success:
                    success_count += 1
                elif error and "–Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞" in error:
                    skipped_count += 1
                else:
                    failed_count += 1
                    if error:
                        errors.append({"post_id": post_id, "error": error})
            
            result = {
                "total": len(post_ids),
                "success": success_count,
                "failed": failed_count,
                "skipped": skipped_count,
                "errors": errors[:10]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫
            }
            
            logger.info(
                f"‚úÖ Batch –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: "
                f"—É—Å–ø–µ—à–Ω–æ={success_count}, –ø—Ä–æ–ø—É—â–µ–Ω–æ={skipped_count}, –æ—à–∏–±–æ–∫={failed_count}"
            )
            
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ batch –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏: {e}")
            raise
        finally:
            db.close()
    
    async def index_user_posts(
        self,
        user_id: int,
        limit: Optional[int] = None
    ) -> Dict[str, Any]:
        """
        –ò–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –ø–æ—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            limit: –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Å—Ç–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
        """
        db = SessionLocal()
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω—ã
            query = db.query(Post).filter(Post.user_id == user_id)
            
            # –ò—Å–∫–ª—é—á–∞–µ–º —É–∂–µ –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
            indexed_post_ids = db.query(IndexingStatus.post_id).filter(
                IndexingStatus.user_id == user_id,
                IndexingStatus.status == "success"
            ).subquery()
            
            query = query.filter(~Post.id.in_(indexed_post_ids))
            
            if limit:
                query = query.limit(limit)
            
            posts = query.all()
            post_ids = [post.id for post in posts]
            
            logger.info(f"üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: –Ω–∞–π–¥–µ–Ω–æ {len(post_ids)} –Ω–µ–ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤")
            
            if not post_ids:
                return {
                    "user_id": user_id,
                    "total": 0,
                    "success": 0,
                    "failed": 0,
                    "skipped": 0,
                    "message": "–í—Å–µ –ø–æ—Å—Ç—ã —É–∂–µ –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω—ã"
                }
            
            # –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º batch
            result = await self.index_posts_batch(post_ids)
            result["user_id"] = user_id
            
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            raise
        finally:
            db.close()
    
    async def reindex_user_posts(
        self,
        user_id: int
    ) -> Dict[str, Any]:
        """
        –ü–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –ø–æ—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤–∫–ª—é—á–∞—è —É–∂–µ –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ)
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
        """
        db = SessionLocal()
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            posts = db.query(Post).filter(Post.user_id == user_id).all()
            post_ids = [post.id for post in posts]
            
            logger.info(f"üîÑ –ü–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è {len(post_ids)} –ø–æ—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            if not post_ids:
                return {
                    "user_id": user_id,
                    "total": 0,
                    "success": 0,
                    "failed": 0,
                    "skipped": 0,
                    "message": "–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø–æ—Å—Ç–æ–≤"
                }
            
            # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏ –≤ indexing_status
            db.query(IndexingStatus).filter(
                IndexingStatus.user_id == user_id
            ).delete()
            db.commit()
            
            # –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º –∑–∞–Ω–æ–≤–æ
            result = await self.index_posts_batch(post_ids)
            result["user_id"] = user_id
            
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            raise
        finally:
            db.close()


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
indexer_service = IndexerService()

