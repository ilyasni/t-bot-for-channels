import asyncio
import schedule
import time
from datetime import datetime, timezone, timedelta
from database import SessionLocal
from models import Channel, Post, User
from auth import get_authenticated_users, get_user_client, cleanup_inactive_clients
from telethon.errors import FloodWaitError
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class ParserService:
    def __init__(self):
        self.is_running = False
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        try:
            logger.info("‚úÖ ParserService: –°–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –º–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ä–µ–∂–∏–º–∞")
            return True
        except Exception as e:
            logger.error(f"‚ùå ParserService: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {str(e)}")
            return False
    
    async def parse_all_channels(self):
        """–ü–∞—Ä—Å–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è –≤—Å–µ—Ö –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        db = SessionLocal()
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            authenticated_users = await get_authenticated_users(db)
            
            if not authenticated_users:
                logger.info("üì≠ ParserService: –ù–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞")
                return
            
            logger.info(f"üîÑ ParserService: –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –¥–ª—è {len(authenticated_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            
            total_posts = 0
            for user in authenticated_users:
                try:
                    user_posts = await self.parse_user_channels(user, db)
                    total_posts += user_posts
                    if user_posts > 0:
                        logger.info(f"‚úÖ ParserService: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.telegram_id} - –¥–æ–±–∞–≤–ª–µ–Ω–æ {user_posts} –ø–æ—Å—Ç–æ–≤")
                except Exception as e:
                    logger.error(f"‚ùå ParserService: –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}: {str(e)}")
            
            logger.info(f"‚úÖ ParserService: –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –í—Å–µ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ {total_posts} –ø–æ—Å—Ç–æ–≤")
            
        except Exception as e:
            logger.error(f"‚ùå ParserService: –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {str(e)}")
        finally:
            db.close()
    
    async def parse_user_channels(self, user: User, db: SessionLocal) -> int:
        """–ü–∞—Ä—Å–∏—Ç—å –∫–∞–Ω–∞–ª—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            client = await get_user_client(user)
            if not client:
                logger.warning(f"‚ö†Ô∏è ParserService: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}")
                return 0
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            channels = db.query(Channel).filter(
                Channel.user_id == user.id,
                Channel.is_active == True
            ).all()
            
            if not channels:
                logger.info(f"üì≠ ParserService: –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id} –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤")
                return 0
            
            logger.info(f"üîÑ ParserService: –ü–∞—Ä—Å–∏–Ω–≥ {len(channels)} –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}")
            
            total_posts = 0
            for channel in channels:
                try:
                    posts_added = await self.parse_channel_posts(channel, client, db)
                    total_posts += posts_added
                    if posts_added > 0:
                        logger.info(f"‚úÖ ParserService: @{channel.channel_username} - –¥–æ–±–∞–≤–ª–µ–Ω–æ {posts_added} –ø–æ—Å—Ç–æ–≤")
                except FloodWaitError as e:
                    logger.warning(f"‚è≥ ParserService: –û–∂–∏–¥–∞–Ω–∏–µ {e.seconds} —Å–µ–∫ –¥–ª—è @{channel.channel_username}")
                    await asyncio.sleep(e.seconds)
                except Exception as e:
                    logger.error(f"‚ùå ParserService: –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ @{channel.channel_username}: {str(e)}")
            
            return total_posts
            
        except Exception as e:
            logger.error(f"‚ùå ParserService: –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞–Ω–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}: {str(e)}")
            return 0
    
    async def parse_channel_posts(self, channel: Channel, client, db):
        """–ü–∞—Ä—Å–∏—Ç—å –ø–æ—Å—Ç—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–∞—Ä—Å–∏–Ω–≥
            last_parsed = channel.last_parsed_at or datetime.now(timezone.utc) - timedelta(hours=24)
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            posts_added = 0
            async for message in client.iter_messages(
                f"@{channel.channel_username}",
                limit=50,  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                offset_date=datetime.now(timezone.utc),
                reverse=False
            ):
                message_date = message.date.replace(tzinfo=timezone.utc)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–∞—Ä—Å–∏–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
                if message_date <= last_parsed:
                    break
                
                if message.text:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø–æ—Å—Ç
                    existing_post = db.query(Post).filter(
                        Post.user_id == channel.user_id,
                        Post.channel_id == channel.id,
                        Post.telegram_message_id == message.id
                    ).first()
                    
                    if not existing_post:
                        # –§–æ—Ä–º–∏—Ä—É–µ–º URL –ø–æ—Å—Ç–∞
                        post_url = f"https://t.me/{channel.channel_username}/{message.id}"
                        
                        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–æ—Å—Ç
                        new_post = Post(
                            user_id=channel.user_id,
                            channel_id=channel.id,
                            telegram_message_id=message.id,
                            text=message.text,
                            views=getattr(message, 'views', None),
                            url=post_url,
                            posted_at=message_date
                        )
                        db.add(new_post)
                        posts_added += 1
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
            channel.last_parsed_at = datetime.now(timezone.utc)
            db.commit()
            
            return posts_added
            
        except Exception as e:
            db.rollback()
            raise e
    
    async def parse_user_channels_by_id(self, user_id: int) -> dict:
        """–ü–∞—Ä—Å–∏—Ç—å –∫–∞–Ω–∞–ª—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID"""
        db = SessionLocal()
        try:
            user = db.query(User).filter(User.id == user_id).first()
            if not user:
                return {"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"}
            
            if not user.is_authenticated:
                return {"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω"}
            
            posts_added = await self.parse_user_channels(user, db)
            return {
                "user_id": user.id,
                "telegram_id": user.telegram_id,
                "posts_added": posts_added,
                "status": "success"
            }
            
        except Exception as e:
            logger.error(f"‚ùå ParserService: –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(e)}")
            return {"error": str(e)}
        finally:
            db.close()
    
    def schedule_parsing(self, interval_minutes=30):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        schedule.every(interval_minutes).minutes.do(self.run_parsing)
        logger.info(f"üìÖ ParserService: –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –∫–∞–∂–¥—ã–µ {interval_minutes} –º–∏–Ω—É—Ç")
    
    def run_parsing(self):
        """–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ (–¥–ª—è schedule)"""
        asyncio.run(self.parse_all_channels())
    
    async def start_scheduler(self, interval_minutes=30):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        if not await self.initialize():
            return False
        
        self.schedule_parsing(interval_minutes)
        self.is_running = True
        
        logger.info("üöÄ ParserService: –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")
        
        while self.is_running:
            schedule.run_pending()
            # –û—á–∏—â–∞–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
            if int(time.time()) % 600 == 0:
                await cleanup_inactive_clients()
            await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞"""
        self.is_running = False
        logger.info("üõë ParserService: –°–µ—Ä–≤–∏—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞
async def run_parser_service(interval_minutes=30):
    """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    service = ParserService()
    await service.start_scheduler(interval_minutes)


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
    asyncio.run(run_parser_service(30))  # –ü–∞—Ä—Å–∏–Ω–≥ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç 