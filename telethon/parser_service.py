import asyncio
import schedule
import time
import os
import re
from datetime import datetime, timezone, timedelta
from database import SessionLocal
from models import Channel, Post, User
from auth import get_authenticated_users, cleanup_inactive_clients
from shared_auth_manager import shared_auth_manager
from telethon.errors import FloodWaitError
import logging
from typing import List
from dotenv import load_dotenv

load_dotenv()

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class ParserService:
    def __init__(self):
        self.is_running = False
        self.new_post_ids = []  # –°–ø–∏—Å–æ–∫ ID –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        try:
            logger.info("‚úÖ ParserService: –°–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –º–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ä–µ–∂–∏–º–∞")
            return True
        except Exception as e:
            logger.error(f"‚ùå ParserService: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {str(e)}")
            return False
    
    async def parse_all_channels(self):
        """–ü–∞—Ä—Å–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è –≤—Å–µ—Ö –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        db = SessionLocal()
        self.new_post_ids = []  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            authenticated_users = await get_authenticated_users(db)
            
            if not authenticated_users:
                logger.info("üì≠ ParserService: –ù–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞")
                return
            
            logger.info(f"üîÑ ParserService: –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –¥–ª—è {len(authenticated_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            
            total_posts = 0
            for user in authenticated_users:
                try:
                    user_posts = await self.parse_user_channels(user, db)
                    total_posts += user_posts
                    if user_posts > 0:
                        logger.info(f"‚úÖ ParserService: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.telegram_id} - –¥–æ–±–∞–≤–ª–µ–Ω–æ {user_posts} –ø–æ—Å—Ç–æ–≤")
                except Exception as e:
                    logger.error(f"‚ùå ParserService: –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}: {str(e)}")
            
            logger.info(f"‚úÖ ParserService: –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –í—Å–µ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ {total_posts} –ø–æ—Å—Ç–æ–≤")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤–æ–µ —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤
            if self.new_post_ids:
                logger.info(f"üè∑Ô∏è ParserService: –ó–∞–ø—É—Å–∫ —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è {len(self.new_post_ids)} –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤")
                asyncio.create_task(self._tag_new_posts_background())
            
        except Exception as e:
            logger.error(f"‚ùå ParserService: –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {str(e)}")
        finally:
            db.close()
    
    async def parse_user_channels(self, user: User, db: SessionLocal) -> int:
        """–ü–∞—Ä—Å–∏—Ç—å –∫–∞–Ω–∞–ª—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        client = None
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ shared_auth_manager
            # –í–∞–∂–Ω–æ: –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–µ—Ç—Å—è —Å –º–∞—Å—Ç–µ—Ä credentials
            client = await shared_auth_manager.get_user_client(user.telegram_id)
            
            if not client:
                logger.warning(f"‚ö†Ô∏è ParserService: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}")
                return 0
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω
            if not client.is_connected():
                logger.warning(f"‚ö†Ô∏è ParserService: –ö–ª–∏–µ–Ω—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id} –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
                return 0
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            channels = user.get_active_channels(db)
            
            if not channels:
                logger.info(f"üì≠ ParserService: –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id} –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤")
                return 0
            
            logger.info(f"üîÑ ParserService: –ü–∞—Ä—Å–∏–Ω–≥ {len(channels)} –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}")
            
            total_posts = 0
            for channel in channels:
                try:
                    posts_added = await self.parse_channel_posts(channel, user, client, db)
                    total_posts += posts_added
                    if posts_added > 0:
                        logger.info(f"‚úÖ ParserService: @{channel.channel_username} - –¥–æ–±–∞–≤–ª–µ–Ω–æ {posts_added} –ø–æ—Å—Ç–æ–≤")
                except FloodWaitError as e:
                    logger.warning(f"‚è≥ ParserService: –û–∂–∏–¥–∞–Ω–∏–µ {e.seconds} —Å–µ–∫ –¥–ª—è @{channel.channel_username}")
                    await asyncio.sleep(e.seconds)
                except Exception as e:
                    error_msg = str(e)
                    logger.error(f"‚ùå ParserService: –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ @{channel.channel_username}: {error_msg}")
            
            return total_posts
            
        except Exception as e:
            logger.error(f"‚ùå ParserService: –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞–Ω–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}: {str(e)}")
            return 0
        # –ù–ï –£–î–ê–õ–Ø–ï–ú –∫–ª–∏–µ–Ω—Ç! –û–Ω –¥–æ–ª–∂–µ–Ω –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –≤ —Ç–æ–º –∂–µ event loop –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –ø–∞—Ä—Å–∏–Ω–≥–æ–≤
    
    async def parse_channel_posts(self, channel: Channel, user, client, db):
        """–ü–∞—Ä—Å–∏—Ç—å –ø–æ—Å—Ç—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            subscription = channel.get_user_subscription(db, user)
            if not subscription:
                logger.warning(f"‚ö†Ô∏è ParserService: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.telegram_id} –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª @{channel.channel_username}")
                return 0
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            last_parsed = subscription['last_parsed_at'] or datetime.now(timezone.utc) - timedelta(hours=24)
            
            # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ last_parsed –∏–º–µ–µ—Ç timezone
            if last_parsed.tzinfo is None:
                last_parsed = last_parsed.replace(tzinfo=timezone.utc)
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            posts_added = 0
            async for message in client.iter_messages(
                f"@{channel.channel_username}",
                limit=50,  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                offset_date=datetime.now(timezone.utc),
                reverse=False
            ):
                # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ message_date –∏–º–µ–µ—Ç timezone
                message_date = message.date
                if message_date.tzinfo is None:
                    message_date = message_date.replace(tzinfo=timezone.utc)
                else:
                    # –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å timezone, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ UTC
                    message_date = message_date.astimezone(timezone.utc)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–∞—Ä—Å–∏–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
                if message_date <= last_parsed:
                    break
                
                if message.text:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø–æ—Å—Ç (–æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
                    existing_post = db.query(Post).filter(
                        Post.user_id == user.id,
                        Post.channel_id == channel.id,
                        Post.telegram_message_id == message.id
                    ).first()
                    
                    if not existing_post:
                        # –§–æ—Ä–º–∏—Ä—É–µ–º URL –ø–æ—Å—Ç–∞
                        post_url = f"https://t.me/{channel.channel_username}/{message.id}"
                        
                        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–æ—Å—Ç
                        new_post = Post(
                            user_id=user.id,
                            channel_id=channel.id,
                            telegram_message_id=message.id,
                            text=message.text,
                            views=getattr(message, 'views', None),
                            url=post_url,
                            posted_at=message_date
                        )
                        db.add(new_post)
                        db.flush()  # –ü–æ–ª—É—á–∞–µ–º ID –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞
                        self.new_post_ids.append(new_post.id)  # –î–æ–±–∞–≤–ª—è–µ–º ID –¥–ª—è —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
                        posts_added += 1
                        
                        # –û–±–æ–≥–∞—â–∞–µ–º –ø–æ—Å—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º —Å—Å—ã–ª–æ–∫ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
                        await self._enrich_post_with_links(new_post, db)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            channel.update_user_subscription(db, user, last_parsed_at=datetime.now(timezone.utc))
            db.commit()
            
            return posts_added
            
        except Exception as e:
            db.rollback()
            raise e
    
    async def parse_user_channels_by_id(self, user_id: int) -> dict:
        """–ü–∞—Ä—Å–∏—Ç—å –∫–∞–Ω–∞–ª—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID"""
        db = SessionLocal()
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –ø–µ—Ä–µ–¥ –ø–∞—Ä—Å–∏–Ω–≥–æ–º
        new_post_ids_before = list(self.new_post_ids) if hasattr(self, 'new_post_ids') else []
        
        try:
            user = db.query(User).filter(User.id == user_id).first()
            if not user:
                return {"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"}
            
            if not user.is_authenticated:
                return {"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω"}
            
            posts_added = await self.parse_user_channels(user, db)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤–æ–µ —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ (–∫–∞–∫ –≤ parse_all_channels)
            if self.new_post_ids and len(self.new_post_ids) > len(new_post_ids_before):
                new_posts_count = len(self.new_post_ids) - len(new_post_ids_before)
                logger.info(f"üè∑Ô∏è ParserService: –ó–∞–ø—É—Å–∫ —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è {new_posts_count} –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤")
                asyncio.create_task(self._tag_new_posts_background())
            
            return {
                "user_id": user.id,
                "telegram_id": user.telegram_id,
                "posts_added": posts_added,
                "status": "success"
            }
            
        except Exception as e:
            logger.error(f"‚ùå ParserService: –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(e)}")
            return {"error": str(e)}
        finally:
            db.close()
    
    def schedule_parsing(self, interval_minutes=30):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        schedule.every(interval_minutes).minutes.do(self.run_parsing)
        logger.info(f"üìÖ ParserService: –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –∫–∞–∂–¥—ã–µ {interval_minutes} –º–∏–Ω—É—Ç")
    
    def schedule_cleanup(self, cleanup_time="03:00"):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –æ—á–∏—Å—Ç–∫–∏ –ø–æ—Å—Ç–æ–≤"""
        schedule.every().day.at(cleanup_time).do(self.run_cleanup)
        logger.info(f"üìÖ ParserService: –û—á–∏—Å—Ç–∫–∞ –ø–æ—Å—Ç–æ–≤ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ {cleanup_time}")
    
    def run_parsing(self):
        """–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ (–¥–ª—è schedule)"""
        try:
            # –ö–†–ò–¢–ò–ß–ù–û: –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ–º asyncio.run() - —ç—Ç–æ —Å–æ–∑–¥–∞–µ—Ç –ù–û–í–´–ô event loop!
            # Telethon –∫–ª–∏–µ–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –¢–û–ú –ñ–ï event loop –≥–¥–µ –±—ã–ª–∏ —Å–æ–∑–¥–∞–Ω—ã
            # –ü—Ä–æ—Å—Ç–æ —Å–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –≤ —Ç–µ–∫—É—â–µ–º running loop
            loop = asyncio.get_running_loop()
            asyncio.create_task(self.parse_all_channels())
            logger.debug("üìÖ ParserService: –ó–∞–¥–∞—á–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–∑–¥–∞–Ω–∞ –≤ —Ç–µ–∫—É—â–µ–º event loop")
        except RuntimeError:
            # –ï—Å–ª–∏ loop –Ω–µ –∑–∞–ø—É—â–µ–Ω - –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, schedule –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –≤–Ω—É—Ç—Ä–∏ loop!
            logger.error("‚ùå ParserService: –û–®–ò–ë–ö–ê! run_parsing() –≤—ã–∑–≤–∞–Ω –í–ù–ï event loop. –≠—Ç–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å!")
        except Exception as e:
            logger.error(f"‚ùå ParserService: –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {str(e)}")
    
    def run_cleanup(self):
        """–ó–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏ –ø–æ—Å—Ç–æ–≤ (–¥–ª—è schedule)"""
        try:
            from cleanup_service import cleanup_service
            
            # –ö–†–ò–¢–ò–ß–ù–û: –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ–º asyncio.run() - —Ä–∞–±–æ—Ç–∞–µ–º –≤ —Ç–µ–∫—É—â–µ–º running loop
            loop = asyncio.get_running_loop()
            asyncio.create_task(cleanup_service.cleanup_old_posts())
            logger.debug("üìÖ ParserService: –ó–∞–¥–∞—á–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–æ–∑–¥–∞–Ω–∞ –≤ —Ç–µ–∫—É—â–µ–º event loop")
        except RuntimeError:
            logger.error("‚ùå ParserService: –û–®–ò–ë–ö–ê! run_cleanup() –≤—ã–∑–≤–∞–Ω –í–ù–ï event loop. –≠—Ç–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å!")
        except Exception as e:
            logger.error(f"‚ùå ParserService: –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {str(e)}")
    
    async def start_scheduler(self, interval_minutes=30, cleanup_time=None):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        if not await self.initialize():
            return False
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞
        self.schedule_parsing(interval_minutes)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –æ—á–∏—Å—Ç–∫–∏ –ø–æ—Å—Ç–æ–≤
        if cleanup_time is None:
            cleanup_time = os.getenv("CLEANUP_SCHEDULE_TIME", "03:00")
        self.schedule_cleanup(cleanup_time)
        
        self.is_running = True
        
        logger.info("üöÄ ParserService: –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")
        
        while self.is_running:
            schedule.run_pending()
            # –û—á–∏—â–∞–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
            if int(time.time()) % 600 == 0:
                await cleanup_inactive_clients()
            await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞"""
        self.is_running = False
        logger.info("üõë ParserService: –°–µ—Ä–≤–∏—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def _tag_new_posts_background(self):
        """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤"""
        try:
            from tagging_service import tagging_service
            if self.new_post_ids:
                await tagging_service.process_posts_batch(self.new_post_ids)
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º RAG-—Å–µ—Ä–≤–∏—Å –æ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–∞—Ö –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
                await self._notify_rag_service(self.new_post_ids)
        except Exception as e:
            logger.error(f"‚ùå ParserService: –û—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–≥–æ —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")
    
    def _extract_urls(self, text: str) -> List[str]:
        """
        –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ URL –∏–∑ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞
        
        Args:
            text: –¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
            
        Returns:
            –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö URL
        """
        if not text:
            return []
        
        # Regex –¥–ª—è –ø–æ–∏—Å–∫–∞ URL
        url_pattern = r'https?://[^\s<>"{}|\\^`\[\]]+'
        urls = re.findall(url_pattern, text)
        return urls
    
    async def _enrich_post_with_links(self, post: Post, db: SessionLocal):
        """
        –û–±–æ–≥–∞—â–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º –∏–∑ —Å—Å—ã–ª–æ–∫ —á–µ—Ä–µ–∑ Crawl4AI
        
        Args:
            post: –û–±—ä–µ–∫—Ç Post
            db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        """
        crawl4ai_enabled = os.getenv("CRAWL4AI_ENABLED", "false").lower() == "true"
        
        if not crawl4ai_enabled:
            return
        
        urls = self._extract_urls(post.text)
        if not urls:
            return
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –æ–±–æ–≥–∞—â–µ–Ω–∏—è
        url = urls[0]
        crawl4ai_url = os.getenv("CRAWL4AI_URL", "http://crawl4ai:11235")
        word_threshold = int(os.getenv("CRAWL4AI_WORD_THRESHOLD", "100"))
        timeout = float(os.getenv("CRAWL4AI_TIMEOUT", "30"))
        
        try:
            import httpx
            
            async with httpx.AsyncClient(timeout=timeout) as client:
                # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç API: urls –∫–∞–∫ –º–∞—Å—Å–∏–≤
                response = await client.post(
                    f"{crawl4ai_url}/crawl",
                    json={
                        "urls": [url]  # –ú–∞—Å—Å–∏–≤ URL, –Ω–µ –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞!
                    }
                )
                
                if response.status_code == 200:
                    result = response.json()
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∏ –Ω–∞–ª–∏—á–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                    if result.get("success") and result.get("results"):
                        first_result = result["results"][0]
                        
                        # markdown - —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å —Å —Ä–∞–∑–Ω—ã–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏
                        markdown_data = first_result.get("markdown", {})
                        
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º raw_markdown –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
                        content = ""
                        if isinstance(markdown_data, dict):
                            content = markdown_data.get("raw_markdown", "")
                        elif isinstance(markdown_data, str):
                            content = markdown_data
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                        if content and len(content) >= word_threshold:
                            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±–æ–≥–∞—â–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –∫ –ø–æ—Å—Ç—É (–æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 3000 —Å–∏–º–≤–æ–ª–æ–≤)
                            post.enriched_content = f"{post.text}\n\n[–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Å—ã–ª–∫–∏: {url}]\n{content[:3000]}"
                            db.commit()
                            logger.info(f"‚úÖ ParserService: –ü–æ—Å—Ç {post.id} –æ–±–æ–≥–∞—â–µ–Ω –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º —Å—Å—ã–ª–∫–∏ {url} ({len(content)} —Å–∏–º–≤–æ–ª–æ–≤)")
                        else:
                            logger.debug(f"ParserService: –°—Å—ã–ª–∫–∞ {url} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ ({len(content)} —Å–∏–º–≤–æ–ª–æ–≤ < {word_threshold})")
                    else:
                        logger.warning(f"‚ö†Ô∏è ParserService: Crawl4AI –Ω–µ –≤–µ—Ä–Ω—É–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è {url}")
                else:
                    logger.warning(f"‚ö†Ô∏è ParserService: Crawl4AI –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status_code} –¥–ª—è {url}")
                    
        except httpx.TimeoutException:
            logger.warning(f"‚è≥ ParserService: Timeout –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–∑ {url}")
        except httpx.ConnectError:
            logger.warning(f"üîå ParserService: Crawl4AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå ParserService: –û—à–∏–±–∫–∞ –æ–±–æ–≥–∞—â–µ–Ω–∏—è –ø–æ—Å—Ç–∞ {post.id}: {e}")
    
    async def _notify_rag_service(self, post_ids: List[int]):
        """
        –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ RAG-—Å–µ—Ä–≤–∏—Å–∞ –æ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–∞—Ö –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
        
        Args:
            post_ids: –°–ø–∏—Å–æ–∫ ID –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤
        """
        try:
            import httpx
            rag_service_url = os.getenv("RAG_SERVICE_URL", "http://rag-service:8020")
            rag_enabled = os.getenv("RAG_SERVICE_ENABLED", "true").lower() == "true"
            
            if not rag_enabled or not post_ids:
                return
            
            # –ü—Ä–æ–±—É–µ–º —É–≤–µ–¥–æ–º–∏—Ç—å RAG-—Å–µ—Ä–≤–∏—Å —Å retry
            max_retries = 3
            retry_delay = 2.0  # —Å–µ–∫—É–Ω–¥—ã
            
            for attempt in range(max_retries):
                try:
                    async with httpx.AsyncClient(timeout=10.0) as client:
                        response = await client.post(
                            f"{rag_service_url}/rag/index/batch",
                            json={"post_ids": post_ids}
                        )
                        
                        if response.status_code == 200:
                            logger.info(f"‚úÖ ParserService: RAG-—Å–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω –æ {len(post_ids)} –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–∞—Ö")
                            return  # –£—Å–ø–µ—Ö
                        elif response.status_code >= 500:
                            # Server error - –º–æ–∂–Ω–æ retry
                            if attempt < max_retries - 1:
                                logger.warning(f"‚ö†Ô∏è ParserService: RAG-—Å–µ—Ä–≤–∏—Å –≤–µ—Ä–Ω—É–ª {response.status_code}, retry {attempt+1}/{max_retries}")
                                await asyncio.sleep(retry_delay * (attempt + 1))
                                continue
                            else:
                                logger.error(f"‚ùå ParserService: RAG-—Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫")
                        else:
                            # Client error - –Ω–µ retry
                            logger.warning(f"‚ö†Ô∏è ParserService: RAG-—Å–µ—Ä–≤–∏—Å –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status_code}: {response.text[:200]}")
                            return
                            
                except httpx.TimeoutException:
                    if attempt < max_retries - 1:
                        logger.warning(f"‚è≥ ParserService: Timeout RAG-—Å–µ—Ä–≤–∏—Å–∞, retry {attempt+1}/{max_retries}")
                        await asyncio.sleep(retry_delay * (attempt + 1))
                        continue
                    else:
                        logger.error(f"‚ùå ParserService: RAG-—Å–µ—Ä–≤–∏—Å timeout –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫")
                except httpx.ConnectError:
                    if attempt < max_retries - 1:
                        logger.warning(f"üîå ParserService: RAG-—Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, retry {attempt+1}/{max_retries}")
                        await asyncio.sleep(retry_delay * (attempt + 1))
                        continue
                    else:
                        logger.error(f"‚ùå ParserService: –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ RAG-—Å–µ—Ä–≤–∏—Å—É –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫")
            
            # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ—É–¥–∞—á–Ω—ã, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
            db = SessionLocal()
            try:
                # –ü–æ–º–µ—á–∞–µ–º –ø–æ—Å—Ç—ã –∫–∞–∫ pending –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
                from models import IndexingStatus
                for post_id in post_ids:
                    post = db.query(Post).filter(Post.id == post_id).first()
                    if post:
                        existing = db.query(IndexingStatus).filter(
                            IndexingStatus.user_id == post.user_id,
                            IndexingStatus.post_id == post_id
                        ).first()
                        
                        if not existing:
                            status = IndexingStatus(
                                user_id=post.user_id,
                                post_id=post_id,
                                status="pending",
                                error="RAG service unavailable during parsing"
                            )
                            db.add(status)
                
                db.commit()
                logger.info(f"üíæ ParserService: {len(post_ids)} –ø–æ—Å—Ç–æ–≤ –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ pending –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏")
            except Exception as db_err:
                logger.error(f"‚ùå ParserService: –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è pending —Å—Ç–∞—Ç—É—Å–∞: {db_err}")
                db.rollback()
            finally:
                db.close()
                    
        except Exception as e:
            logger.error(f"‚ùå ParserService: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è RAG-—Å–µ—Ä–≤–∏—Å–∞: {e}")
            # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ä–∞–±–æ—Ç—É –ø–∞—Ä—Å–µ—Ä–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ RAG-—Å–µ—Ä–≤–∏—Å–∞


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞
async def run_parser_service(interval_minutes=30):
    """
    –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
    
    –í–ê–ñ–ù–û: –°–æ–≥–ª–∞—Å–Ω–æ Context7 Telethon best practices:
    - asyncio.run() –¥–æ–ª–∂–µ–Ω –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –¢–û–õ–¨–ö–û –û–î–ò–ù –†–ê–ó –¥–ª—è –≤—Å–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    - Telethon –∫–ª–∏–µ–Ω—Ç—ã –ù–ï –ú–û–ì–£–¢ —Ä–∞–±–æ—Ç–∞—Ç—å –µ—Å–ª–∏ event loop –∏–∑–º–µ–Ω–∏–ª—Å—è –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    - –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –≤–Ω—É—Ç—Ä–∏ –æ–¥–Ω–æ–≥–æ event loop
    """
    service = ParserService()
    await service.start_scheduler(interval_minutes)


if __name__ == "__main__":
    # –ö–†–ò–¢–ò–ß–ù–û: asyncio.run() –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –û–î–ò–ù –†–ê–ó –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ event loop
    # –í—Å–µ Telethon –∫–ª–∏–µ–Ω—Ç—ã –±—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã –∏ —Ä–∞–±–æ—Ç–∞—Ç—å –≤–Ω—É—Ç—Ä–∏ —ç—Ç–æ–≥–æ loop
    # –°–æ–≥–ª–∞—Å–Ω–æ Context7: "Only one call to asyncio.run() is needed for the entire application"
    asyncio.run(run_parser_service(30))  # –ü–∞—Ä—Å–∏–Ω–≥ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç 