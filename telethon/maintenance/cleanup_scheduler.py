"""
Cleanup Scheduler
APScheduler job –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö

Best practices:
- –ó–∞–ø—É—Å–∫ –≤ off-peak hours (3:00 AM)
- Logging + alerts –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
- Graceful shutdown
"""
import logging
import os
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

from maintenance.unified_retention_service import unified_retention_service

logger = logging.getLogger(__name__)


class CleanupScheduler:
    """
    Scheduler –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    
    Usage:
        ```python
        scheduler = CleanupScheduler()
        scheduler.start()
        
        # –í shutdown event
        scheduler.stop()
        ```
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è scheduler"""
        self.scheduler = AsyncIOScheduler()
        self.enabled = os.getenv("CLEANUP_ENABLED", "false").lower() == "true"
        
        # Cron schedule (default: 3:00 AM daily)
        self.schedule = os.getenv("CLEANUP_SCHEDULE", "0 3 * * *")
        
        logger.info(f"üìÖ CleanupScheduler initialized (enabled: {self.enabled})")
        logger.info(f"   Schedule: {self.schedule}")
    
    def start(self):
        """
        –ó–∞–ø—É—Å—Ç–∏—Ç—å scheduler
        
        –î–æ–±–∞–≤–ª—è–µ—Ç job –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç scheduler
        """
        if not self.enabled:
            logger.info("‚ö†Ô∏è Cleanup scheduler disabled (CLEANUP_ENABLED=false)")
            return
        
        try:
            # –î–æ–±–∞–≤–∏—Ç—å job
            self.scheduler.add_job(
                self._scheduled_cleanup,
                trigger=CronTrigger.from_crontab(self.schedule),
                id='data_retention_cleanup',
                name='Data Retention Cleanup',
                replace_existing=True,
                max_instances=1,  # –¢–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∏–Ω—Å—Ç–∞–Ω—Ü–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
                coalesce=True  # –ï—Å–ª–∏ –ø—Ä–æ–ø—É—â–µ–Ω –∑–∞–ø—É—Å–∫, –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
            )
            
            # –ó–∞–ø—É—Å—Ç–∏—Ç—å scheduler
            self.scheduler.start()
            
            logger.info(f"‚úÖ Cleanup scheduler started (schedule: {self.schedule})")
            
        except Exception as e:
            logger.error(f"‚ùå Failed to start cleanup scheduler: {e}", exc_info=True)
    
    def stop(self):
        """
        –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å scheduler
        
        –í—ã–∑—ã–≤–∞—Ç—å –ø—Ä–∏ shutdown –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        """
        if self.scheduler.running:
            try:
                self.scheduler.shutdown(wait=True)
                logger.info("‚úÖ Cleanup scheduler stopped")
            except Exception as e:
                logger.error(f"‚ùå Cleanup scheduler stop error: {e}")
    
    async def _scheduled_cleanup(self):
        """
        –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π cleanup
        
        –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é (default: 3:00 AM daily)
        """
        logger.info("üïí Starting scheduled unified cleanup (3:00 AM)")
        
        try:
            # –í—ã–ø–æ–ª–Ω–∏—Ç—å unified cleanup (—Ä–µ–∞–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ)
            result = await unified_retention_service.cleanup_all_users(dry_run=False)
            
            # Log results
            total_deleted = result.get('total_posts_deleted', 0)
            users_processed = result.get('users_processed', 0)
            errors = result.get('errors', [])
            
            logger.info(f"üßπ Unified cleanup result:")
            logger.info(f"   Users processed: {users_processed}")
            logger.info(f"   Total posts deleted: {total_deleted}")
            
            # Alert if errors
            if errors:
                logger.error(f"‚ö†Ô∏è Cleanup errors: {errors}")
                # TODO: Send alert (email, Slack, etc.)
            else:
                logger.info("‚úÖ Unified cleanup completed successfully")
                
        except Exception as e:
            logger.error(f"‚ùå Scheduled unified cleanup failed: {e}", exc_info=True)
            # TODO: Send critical alert


# Singleton instance
cleanup_scheduler = CleanupScheduler()

