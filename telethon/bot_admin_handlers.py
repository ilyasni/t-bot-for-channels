"""
–ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏, –∏–Ω–≤–∞–π—Ç–∞–º–∏ –∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
"""

import logging
from datetime import datetime, timedelta, timezone
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CallbackQueryHandler

from database import SessionLocal
from models import User, InviteCode, SubscriptionHistory
from subscription_config import get_subscription_info, SUBSCRIPTION_TIERS

logger = logging.getLogger(__name__)


def is_admin(telegram_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    db = SessionLocal()
    try:
        user = db.query(User).filter(User.telegram_id == telegram_id).first()
        return user and user.is_admin()
    finally:
        db.close()


async def admin_invite_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –°–æ–∑–¥–∞—Ç—å –∏–Ω–≤–∞–π—Ç –∫–æ–¥ (–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é)
    –ö–æ–º–∞–Ω–¥–∞: /admin_invite
    """
    user = update.effective_user
    
    if not is_admin(user.id):
        await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    keyboard = [
        [InlineKeyboardButton("üéÅ Trial (7 –¥–Ω–µ–π)", callback_data="invite_trial")],
        [InlineKeyboardButton("üíº Basic", callback_data="invite_basic")],
        [InlineKeyboardButton("üíé Premium", callback_data="invite_premium")],
        [InlineKeyboardButton("üè¢ Enterprise", callback_data="invite_enterprise")],
        [InlineKeyboardButton("üÜì Free", callback_data="invite_free")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üìù **–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–∞–π—Ç –∫–æ–¥–∞**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏:",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )


async def admin_invite_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –∏–Ω–≤–∞–π—Ç–∞"""
    query = update.callback_query
    await query.answer()
    
    user = query.from_user
    if not is_admin(user.id):
        await query.edit_message_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    
    data = query.data
    
    if data.startswith("invite_"):
        subscription_type = data.replace("invite_", "")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è
        keyboard = [
            [InlineKeyboardButton("1 –¥–µ–Ω—å", callback_data=f"expire_{subscription_type}_1")],
            [InlineKeyboardButton("7 –¥–Ω–µ–π", callback_data=f"expire_{subscription_type}_7")],
            [InlineKeyboardButton("30 –¥–Ω–µ–π", callback_data=f"expire_{subscription_type}_30")],
            [InlineKeyboardButton("–ë–µ–∑ —Å—Ä–æ–∫–∞ (365 –¥–Ω–µ–π)", callback_data=f"expire_{subscription_type}_365")],
            [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="invite_back")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        tier = get_subscription_info(subscription_type)
        await query.edit_message_text(
            f"üéØ **–ü–æ–¥–ø–∏—Å–∫–∞:** {tier['name']}\n\n"
            f"‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∏–Ω–≤–∞–π—Ç –∫–æ–¥–∞:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    elif data.startswith("expire_"):
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–∞–π—Ç –∫–æ–¥
        parts = data.split("_")
        subscription_type = parts[1]
        expire_days = int(parts[2])
        
        await create_invite_code(query, user.id, subscription_type, expire_days)
    
    elif data == "invite_back":
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –ø–æ–¥–ø–∏—Å–∫–∏
        await admin_invite_command(update, context)


async def create_invite_code(query, admin_telegram_id: int, subscription_type: str, expire_days: int):
    """–°–æ–∑–¥–∞—Ç—å –∏–Ω–≤–∞–π—Ç –∫–æ–¥"""
    db = SessionLocal()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–¥–º–∏–Ω–∞
        admin = db.query(User).filter(User.telegram_id == admin_telegram_id).first()
        if not admin:
            await query.edit_message_text("‚ùå –ê–¥–º–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥
        code = InviteCode.generate_code()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º trial period
        trial_days = 0
        if subscription_type == "trial":
            trial_days = 7
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–∞–π—Ç
        invite = InviteCode(
            code=code,
            created_by=admin.id,
            created_at=datetime.now(timezone.utc),
            expires_at=datetime.now(timezone.utc) + timedelta(days=expire_days),
            max_uses=1,
            uses_count=0,
            default_subscription=subscription_type,
            default_trial_days=trial_days
        )
        
        db.add(invite)
        db.commit()
        
        tier = get_subscription_info(subscription_type)
        expires_at = invite.expires_at.strftime('%d.%m.%Y %H:%M')
        
        text = f"‚úÖ **–ò–Ω–≤–∞–π—Ç –∫–æ–¥ —Å–æ–∑–¥–∞–Ω!**\n\n"
        text += f"üé´ –ö–æ–¥: `{code}`\n\n"
        text += f"üìä **–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:**\n"
        text += f"‚Ä¢ –ü–æ–¥–ø–∏—Å–∫–∞: {tier['name']}\n"
        text += f"‚Ä¢ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expires_at}\n"
        text += f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: 0/1\n\n"
        text += f"üí° –û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:\n"
        text += f"`/login {code}`"
        
        await query.edit_message_text(text, parse_mode='Markdown')
        logger.info(f"‚úÖ –ê–¥–º–∏–Ω {admin_telegram_id} —Å–æ–∑–¥–∞–ª –∏–Ω–≤–∞–π—Ç –∫–æ–¥ {code} ({subscription_type})")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–∞–π—Ç –∫–æ–¥–∞: {e}")
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        db.close()


async def admin_users_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
    –ö–æ–º–∞–Ω–¥–∞: /admin_users [filter]
    –§–∏–ª—å—Ç—Ä—ã: all, active, expired, free, premium
    """
    user = update.effective_user
    
    if not is_admin(user.id):
        await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return
    
    args = context.args
    filter_type = args[0] if args else "all"
    
    db = SessionLocal()
    
    try:
        query = db.query(User)
        
        if filter_type == "active":
            query = query.filter(User.is_authenticated == True)
        elif filter_type == "expired":
            # –î–ª—è PostgreSQL –∏—Å–ø–æ–ª—å–∑—É–µ–º timezone-aware —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
            now = datetime.now(timezone.utc)
            query = query.filter(
                User.subscription_expires != None,
                User.subscription_expires < now
            )
        elif filter_type in SUBSCRIPTION_TIERS:
            query = query.filter(User.subscription_type == filter_type)
        
        users = query.order_by(User.created_at.desc()).limit(50).all()
        
        if not users:
            await update.message.reply_text("üì≠ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        text = f"üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏** ({filter_type})\n\n"
        
        for u in users[:20]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 20
            name = u.first_name or u.username or "Unknown"
            status = "‚úÖ" if u.is_authenticated else "‚ùå"
            role = "üëë" if u.role == "admin" else "üë§"
            
            text += f"{role} {status} {name} (@{u.username or 'none'})\n"
            text += f"   ID: `{u.telegram_id}`\n"
            text += f"   –ü–æ–¥–ø–∏—Å–∫–∞: {u.subscription_type}\n"
            
            if u.subscription_expires:
                if u.check_subscription_active():
                    # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –¥–∞—Ç—ã timezone-aware
                    expires = u.subscription_expires
                    if expires.tzinfo is None:
                        expires = expires.replace(tzinfo=timezone.utc)
                    
                    days = (expires - datetime.now(timezone.utc)).days
                    text += f"   –î–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è: {days} –¥–Ω.\n"
                else:
                    text += f"   –ò—Å—Ç–µ–∫–ª–∞ ‚ùå\n"
            
            text += "\n"
        
        if len(users) > 20:
            text += f"... –∏ –µ—â–µ {len(users) - 20} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        
        text += f"\nüí° –î–ª—è –¥–µ—Ç–∞–ª–µ–π: /admin_user <telegram_id>"
        
        await update.message.reply_text(text, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_users: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    finally:
        db.close()


async def admin_user_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    –ö–æ–º–∞–Ω–¥–∞: /admin_user <telegram_id>
    """
    user = update.effective_user
    
    if not is_admin(user.id):
        await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return
    
    args = context.args
    if not args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /admin_user <telegram_id>")
        return
    
    target_telegram_id = int(args[0])
    db = SessionLocal()
    
    try:
        target_user = db.query(User).filter(User.telegram_id == target_telegram_id).first()
        
        if not target_user:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        name = target_user.first_name or "Unknown"
        tier = get_subscription_info(target_user.subscription_type)
        
        text = f"üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {name}\n"
        text += f"üÜî Telegram ID: `{target_telegram_id}`\n"
        text += f"üë§ Username: @{target_user.username or 'none'}\n"
        text += f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {target_user.created_at.strftime('%d.%m.%Y')}\n\n"
        
        text += f"üìä **–ü–æ–¥–ø–∏—Å–∫–∞:** {tier['name']}\n"
        text += f"üìç –°—Ç–∞—Ç—É—Å: {'‚úÖ –ê–∫—Ç–∏–≤–Ω–∞' if target_user.check_subscription_active() else '‚ùå –ò—Å—Ç–µ–∫–ª–∞'}\n"
        
        if target_user.subscription_expires:
            text += f"‚è∞ –î–æ: {target_user.subscription_expires.strftime('%d.%m.%Y')}\n"
        
        text += f"\nüìà **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:**\n"
        text += f"‚Ä¢ –ö–∞–Ω–∞–ª–æ–≤: {len(target_user.channels)}/{target_user.max_channels}\n"
        text += f"‚Ä¢ –ü–æ—Å—Ç–æ–≤: {len(target_user.posts)}\n"
        
        text += f"\nüîê **–°—Ç–∞—Ç—É—Å:**\n"
        text += f"‚Ä¢ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: {'‚úÖ' if target_user.is_authenticated else '‚ùå'}\n"
        text += f"‚Ä¢ –†–æ–ª—å: {target_user.role}\n"
        
        if target_user.invited_by:
            inviter = db.query(User).filter(User.id == target_user.invited_by).first()
            if inviter:
                text += f"‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–µ–Ω: {inviter.first_name} ({inviter.telegram_id})\n"
        
        # –ò—Å—Ç–æ—Ä–∏—è –ø–æ–¥–ø–∏—Å–æ–∫
        history = db.query(SubscriptionHistory).filter(
            SubscriptionHistory.user_id == target_user.id
        ).order_by(SubscriptionHistory.changed_at.desc()).limit(5).all()
        
        if history:
            text += f"\nüìú **–ò—Å—Ç–æ—Ä–∏—è –ø–æ–¥–ø–∏—Å–æ–∫:**\n"
            for h in history:
                text += f"‚Ä¢ {h.action}: {h.old_type} ‚Üí {h.new_type} ({h.changed_at.strftime('%d.%m.%Y')})\n"
        
        await update.message.reply_text(text, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_user: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    finally:
        db.close()


async def admin_grant_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –í—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    –ö–æ–º–∞–Ω–¥–∞: /admin_grant <telegram_id> <subscription> [days]
    """
    user = update.effective_user
    
    if not is_admin(user.id):
        await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return
    
    args = context.args
    if len(args) < 2:
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /admin_grant <telegram_id> <subscription> [days]\n\n"
            "–ü—Ä–∏–º–µ—Ä: /admin_grant 123456789 premium 30"
        )
        return
    
    target_telegram_id = int(args[0])
    subscription_type = args[1]
    days = int(args[2]) if len(args) > 2 else 30
    
    if subscription_type not in SUBSCRIPTION_TIERS:
        await update.message.reply_text(
            f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏. –î–æ—Å—Ç—É–ø–Ω—ã–µ: {', '.join(SUBSCRIPTION_TIERS.keys())}"
        )
        return
    
    db = SessionLocal()
    
    try:
        target_user = db.query(User).filter(User.telegram_id == target_telegram_id).first()
        admin_user = db.query(User).filter(User.telegram_id == user.id).first()
        
        if not target_user:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        old_type = target_user.subscription_type
        target_user.subscription_type = subscription_type
        target_user.subscription_started_at = datetime.now(timezone.utc)
        target_user.subscription_expires = datetime.now(timezone.utc) + timedelta(days=days)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ª–∏–º–∏—Ç—ã
        tier = get_subscription_info(subscription_type)
        target_user.max_channels = tier['max_channels']
        
        db.commit()
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        history = SubscriptionHistory(
            user_id=target_user.id,
            action="upgraded",
            old_type=old_type,
            new_type=subscription_type,
            changed_by=admin_user.id,
            notes=f"Granted by admin for {days} days"
        )
        db.add(history)
        db.commit()
        
        await update.message.reply_text(
            f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ **{tier['name']}** –≤—ã–¥–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user.first_name}\n"
            f"–°—Ä–æ–∫: {days} –¥–Ω–µ–π",
            parse_mode='Markdown'
        )
        
        logger.info(f"‚úÖ –ê–¥–º–∏–Ω {user.id} –≤—ã–¥–∞–ª –ø–æ–¥–ø–∏—Å–∫—É {subscription_type} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_telegram_id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_grant: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    finally:
        db.close()


async def admin_stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±–æ—Ç—É
    –ö–æ–º–∞–Ω–¥–∞: /admin_stats
    """
    user = update.effective_user
    
    if not is_admin(user.id):
        await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return
    
    db = SessionLocal()
    
    try:
        total_users = db.query(User).count()
        authenticated_users = db.query(User).filter(User.is_authenticated == True).count()
        
        # –ü–æ–¥–ø–∏—Å–∫–∏
        subscription_counts = {}
        for tier_name in SUBSCRIPTION_TIERS.keys():
            count = db.query(User).filter(User.subscription_type == tier_name).count()
            subscription_counts[tier_name] = count
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
        now = datetime.now(timezone.utc)
        active_subscriptions = db.query(User).filter(
            User.subscription_expires != None,
            User.subscription_expires > now
        ).count()
        
        # –ò–Ω–≤–∞–π—Ç –∫–æ–¥—ã
        total_invites = db.query(InviteCode).count()
        used_invites = db.query(InviteCode).filter(InviteCode.uses_count > 0).count()
        
        text = f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞**\n\n"
        text += f"üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**\n"
        text += f"‚Ä¢ –í—Å–µ–≥–æ: {total_users}\n"
        text += f"‚Ä¢ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ: {authenticated_users}\n\n"
        
        text += f"üíé **–ü–æ–¥–ø–∏—Å–∫–∏:**\n"
        for tier_name, count in subscription_counts.items():
            if count > 0:
                tier = get_subscription_info(tier_name)
                text += f"‚Ä¢ {tier['name']}: {count}\n"
        
        text += f"\n‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {active_subscriptions}\n"
        
        text += f"\nüé´ **–ò–Ω–≤–∞–π—Ç –∫–æ–¥—ã:**\n"
        text += f"‚Ä¢ –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ: {total_invites}\n"
        text += f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {used_invites}\n"
        
        await update.message.reply_text(text, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_stats: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    finally:
        db.close()


def get_admin_callback_handler():
    """–ü–æ–ª—É—á–∏—Ç—å CallbackQueryHandler –¥–ª—è –∞–¥–º–∏–Ω –º–µ–Ω—é"""
    return CallbackQueryHandler(admin_invite_callback, pattern="^(invite_|expire_)")


# ============================================================
# Admin Panel Mini App
# ============================================================

async def admin_panel_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û—Ç–∫—Ä—ã—Ç—å Admin Panel —á–µ—Ä–µ–∑ Telegram Mini App
    –ö–æ–º–∞–Ω–¥–∞: /admin
    """
    from telegram import WebAppInfo
    from admin_panel_manager import admin_panel_manager
    import os
    
    user = update.effective_user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not is_admin(user.id):
        await update.message.reply_text(
            "‚ùå **–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω**\n\n"
            "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º",
            parse_mode='Markdown'
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º admin session –≤ Redis
    session_token = admin_panel_manager.create_admin_session(user.id)
    
    if not session_token:
        await update.message.reply_text(
            "‚ùå **–û—à–∏–±–∫–∞**\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞–¥–º–∏–Ω —Å–µ—Å—Å–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode='Markdown'
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è Mini App
    base_url = os.getenv("AUTH_BASE_URL", "https://telegram-auth.produman.studio")
    admin_panel_url = f"{base_url}/admin-panel?admin_id={user.id}&token={session_token}"
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è Mini App
    keyboard = InlineKeyboardMarkup([[
        InlineKeyboardButton(
            "üëë –û—Ç–∫—Ä—ã—Ç—å –ê–¥–º–∏–Ω –ü–∞–Ω–µ–ª—å",
            web_app=WebAppInfo(url=admin_panel_url)
        )
    ]])
    
    await update.message.reply_text(
        "üëë **–ê–¥–º–∏–Ω –ü–∞–Ω–µ–ª—å**\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å:\n\n"
        "**–§—É–Ω–∫—Ü–∏–∏:**\n"
        "‚Ä¢ üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏\n"
        "‚Ä¢ üé´ –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–∞–π—Ç –∫–æ–¥–æ–≤\n"
        "‚Ä¢ üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "‚Ä¢ üìà –ì—Ä–∞—Ñ–∏–∫–∏ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞\n\n"
        "‚è∞ Session –¥–µ–π—Å—Ç–≤—É–µ—Ç 1 —á–∞—Å",
        reply_markup=keyboard,
        parse_mode='Markdown'
    )
    
    logger.info(f"üëë –ê–¥–º–∏–Ω {user.id} ({user.first_name}) –æ—Ç–∫—Ä—ã–ª –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")

