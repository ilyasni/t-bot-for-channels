import asyncio
import httpx
import json
import os
import logging
import re
from typing import List, Optional, Dict
from datetime import datetime, timezone
from database import SessionLocal
from models import Post
from dotenv import load_dotenv

load_dotenv()

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class TaggingService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º OpenRouter –∏–ª–∏ GigaChat API"""
    
    def __init__(self):
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ (gigachat - –æ—Å–Ω–æ–≤–Ω–æ–π, openrouter - fallback)
        self.provider = os.getenv("TAGGING_PROVIDER", "gigachat").lower()
        self.fallback_to_openrouter = os.getenv("TAGGING_FALLBACK_OPENROUTER", "true").lower() == "true"
        
        # OpenRouter –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.openrouter_api_key = os.getenv("OPENROUTER_API_KEY")
        self.openrouter_model = os.getenv("OPENROUTER_MODEL", "google/gemini-2.0-flash-exp:free")
        self.openrouter_url = "https://openrouter.ai/api/v1/chat/completions"
        
        # GigaChat –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (—á–µ—Ä–µ–∑ gpt2giga-proxy)
        self.gigachat_proxy_url = os.getenv("GIGACHAT_PROXY_URL", "http://gpt2giga-proxy:8090")
        self.gigachat_url = f"{self.gigachat_proxy_url}/v1/chat/completions"
        # GigaChat Lite –æ–ø—Ç–∏–º–∞–ª–µ–Ω –¥–ª—è —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: –±—ã—Å—Ç—Ä–µ–µ, –¥–µ—à–µ–≤–ª–µ, –≤—ã—à–µ –ª–∏–º–∏—Ç—ã
        self.gigachat_model = os.getenv("GIGACHAT_MODEL", "GigaChat-Lite")
        
        # –í—ã–±–∏—Ä–∞–µ–º API –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        if self.provider == "gigachat":
            self.api_key = "dummy"  # GigaChat proxy –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –∫–ª—é—á–∞
            self.api_url = self.gigachat_url
            self.model = self.gigachat_model
        else:
            self.api_key = self.openrouter_api_key
            self.api_url = self.openrouter_url
            self.model = self.openrouter_model
        
        self.batch_size = int(os.getenv("TAGGING_BATCH_SIZE", "10"))
        
        # HTTP Transport —Å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º retry –¥–ª—è —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫
        self.transport = httpx.AsyncHTTPTransport(retries=3)
        
        # Fallback –º–æ–¥–µ–ª–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è OpenRouter)
        self.fallback_models = [
            "google/gemini-2.0-flash-exp:free",
            "meta-llama/llama-3.2-3b-instruct:free",
            "qwen/qwen-2-7b-instruct:free",
            "google/gemma-2-9b-it:free"
        ]
        
        # Retry –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.max_retries = int(os.getenv("TAGGING_MAX_RETRIES", "3"))
        self.retry_delay = float(os.getenv("TAGGING_RETRY_DELAY", "2.0"))  # —Å–µ–∫—É–Ω–¥—ã
        self.max_retry_attempts = int(os.getenv("TAGGING_MAX_ATTEMPTS", "5"))  # –æ–±—â–µ–µ –∫–æ–ª-–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –ø–æ—Å—Ç–∞
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
        if self.provider == "gigachat":
            # GigaChat - –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä (–Ω–µ —Ç—Ä–µ–±—É–µ—Ç API –∫–ª—é—á–∞, —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ proxy)
            self.enabled = True
            logger.info(f"‚úÖ TaggingService: –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä - GigaChat (—á–µ—Ä–µ–∑ {self.gigachat_proxy_url})")
            logger.info(f"üí° TaggingService: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–æ–¥–µ–ª—å {self.model}")
            if self.model == "GigaChat-Lite":
                logger.info("‚ö° GigaChat-Lite: –±—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å —Å –≤—ã—Å–æ–∫–∏–º–∏ –ª–∏–º–∏—Ç–∞–º–∏ - –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å fallback –Ω–∞ OpenRouter
            if self.fallback_to_openrouter and self.openrouter_api_key and self.openrouter_api_key != "your_openrouter_api_key_here":
                logger.info(f"üîÑ Fallback: OpenRouter ({self.openrouter_model}) - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö GigaChat")
            elif self.fallback_to_openrouter:
                logger.warning("‚ö†Ô∏è Fallback –Ω–∞ OpenRouter –≤–∫–ª—é—á–µ–Ω, –Ω–æ OPENROUTER_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                
        elif self.provider == "openrouter":
            # OpenRouter - –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
            if not self.api_key or self.api_key == "your_openrouter_api_key_here":
                logger.warning("‚ö†Ô∏è TaggingService: OPENROUTER_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –¢–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ.")
                logger.warning("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ TAGGING_PROVIDER=gigachat (–æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä)")
                self.enabled = False
            else:
                self.enabled = True
                logger.info(f"‚úÖ TaggingService: –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä - OpenRouter")
                logger.info(f"   –ú–æ–¥–µ–ª—å: {self.model}")
                logger.info(f"   Fallback –º–æ–¥–µ–ª–∏: {', '.join(self.fallback_models[:2])}")
                
                # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –ª–∏–º–∏—Ç–∞—Ö –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
                if ":free" in self.model:
                    logger.warning("‚ö†Ô∏è TaggingService: –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –º–æ–¥–µ–ª–∏ –∏–º–µ—é—Ç –ª–∏–º–∏—Ç 50 –∑–∞–ø—Ä–æ—Å–æ–≤/–¥–µ–Ω—å")
                    logger.warning("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: TAGGING_PROVIDER=gigachat (–ª–∏–º–∏—Ç ~10,000/–¥–µ–Ω—å)")
                
                # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª—è—Ö
                if self.model.startswith("deepseek"):
                    logger.warning(f"‚ö†Ô∏è TaggingService: –ú–æ–¥–µ–ª—å {self.model} –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ–π")
                    logger.warning(f"üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: OPENROUTER_MODEL=google/gemini-2.0-flash-exp:free")
                elif self.model.startswith("openai/gpt-oss"):
                    logger.warning(f"‚ö†Ô∏è TaggingService: –ú–æ–¥–µ–ª—å {self.model} —É—Å—Ç–∞—Ä–µ–ª–∞ –∏ –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å")
                    logger.warning(f"üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: OPENROUTER_MODEL=google/gemini-2.0-flash-exp:free")
        else:
            logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {self.provider}")
            logger.error("üí° –î–æ—Å—Ç—É–ø–Ω—ã–µ: gigachat (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è), openrouter")
            self.enabled = False
    
    async def generate_tags_for_text(self, text: str, retry_count: int = 0, use_fallback: bool = False) -> Optional[List[str]]:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–≥–æ–≤ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º LLM —Å retry –∏ fallback –º–µ—Ö–∞–Ω–∏–∑–º–æ–º
        
        Args:
            text: –¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            retry_count: –ù–æ–º–µ—Ä –ø–æ–ø—ã—Ç–∫–∏ (–¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
            use_fallback: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å fallback –ø—Ä–æ–≤–∞–π–¥–µ—Ä (OpenRouter –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π GigaChat)
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤ –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        if not self.enabled:
            logger.debug("TaggingService: –°–µ—Ä–≤–∏—Å —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω")
            return None
        
        if not text or len(text.strip()) < 10:
            logger.debug("TaggingService: –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –¥–ª—è —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è")
            return []
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∏ –º–æ–¥–µ–ª—å –¥–ª—è —Ç–µ–∫—É—â–µ–π –ø–æ–ø—ã—Ç–∫–∏
        current_provider = self.provider
        current_api_url = self.api_url
        current_api_key = self.api_key
        current_model = self.model
        
        # –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –Ω–∞ OpenRouter (–ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö GigaChat)
        if use_fallback and self.provider == "gigachat" and self.fallback_to_openrouter:
            if self.openrouter_api_key and self.openrouter_api_key != "your_openrouter_api_key_here":
                current_provider = "openrouter"
                current_api_url = self.openrouter_url
                current_api_key = self.openrouter_api_key
                current_model = self.openrouter_model
                logger.info(f"üîÑ TaggingService: –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback - OpenRouter ({current_model})")
            else:
                logger.warning("‚ö†Ô∏è Fallback –Ω–∞ OpenRouter –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–Ω–µ—Ç API –∫–ª—é—á–∞)")
                return None
        
        # Fallback –º–æ–¥–µ–ª–∏ –¥–ª—è OpenRouter (–µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä OpenRouter)
        elif self.provider == "openrouter" and retry_count > 0 and retry_count <= len(self.fallback_models):
            current_model = self.fallback_models[retry_count - 1]
            logger.info(f"üîÑ TaggingService: –ü–æ–ø—ã—Ç–∫–∞ {retry_count + 1}, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –º–æ–¥–µ–ª—å: {current_model}")
        
        try:
            prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç –∏ –æ–ø—Ä–µ–¥–µ–ª–∏ 3-7 —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ç–µ–≥–æ–≤ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏.

–¢–µ–∫—Å—Ç:
{text[:2000]}

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ç–µ–≥–∞–º:
- –¢–µ–≥–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
- –¢–µ–≥–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–º–∏ (1-2 —Å–ª–æ–≤–∞)
- –¢–µ–≥–∏ –¥–æ–ª–∂–Ω—ã –æ—Ç—Ä–∞–∂–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é —Ç–µ–º–∞—Ç–∏–∫—É —Ç–µ–∫—Å—Ç–∞
- –ò–∑–±–µ–≥–∞–π —Å–ª–∏—à–∫–æ–º –æ–±—â–∏—Ö —Ç–µ–≥–æ–≤

–í–ê–ñ–ù–û: –í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON –º–∞—Å—Å–∏–≤ —Ç–µ–≥–æ–≤, –±–µ–∑ markdown, –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.
–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: ["—Ç–µ–≥1", "—Ç–µ–≥2", "—Ç–µ–≥3"]

–ü—Ä–∏–º–µ—Ä:
["—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç", "–Ω–æ–≤–æ—Å—Ç–∏"]"""

            async with httpx.AsyncClient(transport=self.transport, timeout=30.0) as client:
                response = await client.post(
                    current_api_url,
                    headers={
                        "Authorization": f"Bearer {current_api_key}",
                        "Content-Type": "application/json"
                    },
                    json={
                        "model": current_model,
                        "messages": [
                            {
                                "role": "user",
                                "content": prompt
                            }
                        ],
                        "temperature": 0.3,
                        "max_tokens": 150
                    }
                )
                
                if response.status_code != 200:
                    error_msg = f"API Error {response.status_code}: {response.text[:200]}"
                    logger.error(f"‚ùå TaggingService: –û—à–∏–±–∫–∞ API: {response.status_code} - {response.text[:500]}")
                    
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ 429 Rate Limit
                    if response.status_code == 429:
                        try:
                            error_data = response.json()
                            reset_timestamp = error_data.get("error", {}).get("metadata", {}).get("headers", {}).get("X-RateLimit-Reset")
                            
                            if reset_timestamp:
                                reset_time = datetime.fromtimestamp(int(reset_timestamp) / 1000, timezone.utc)
                                now = datetime.now(timezone.utc)
                                wait_seconds = (reset_time - now).total_seconds()
                                
                                if wait_seconds > 0:
                                    logger.warning(f"‚è∞ TaggingService: Rate limit –¥–æ—Å—Ç–∏–≥–Ω—É—Ç. –õ–∏–º–∏—Ç —Å–±—Ä–æ—Å–∏—Ç—Å—è {reset_time.strftime('%Y-%m-%d %H:%M:%S')} UTC")
                                    logger.warning(f"üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ—Å—å –Ω–∞ GigaChat –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ $10 credits –≤ OpenRouter")
                                    
                                    # –ï—Å–ª–∏ –æ–∂–∏–¥–∞–Ω–∏–µ –º–µ–Ω—å—à–µ 5 –º–∏–Ω—É—Ç - –∂–¥–µ–º
                                    if wait_seconds <= 300:
                                        logger.info(f"‚è≥ –û–∂–∏–¥–∞–µ–º {wait_seconds:.0f}—Å –¥–æ —Å–±—Ä–æ—Å–∞ –ª–∏–º–∏—Ç–∞...")
                                        await asyncio.sleep(wait_seconds + 5)  # +5 —Å–µ–∫—É–Ω–¥ –∑–∞–ø–∞—Å
                                        return await self.generate_tags_for_text(text, retry_count + 1)
                            
                            # –ï—Å–ª–∏ –æ–∂–∏–¥–∞–Ω–∏–µ –¥–æ–ª–≥–æ–µ –∏–ª–∏ –Ω–µ—Ç timestamp - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                            logger.warning("‚è∏Ô∏è TaggingService: Rate limit –ø—Ä–µ–≤—ã—à–µ–Ω. –ü–æ—Å—Ç –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–µ.")
                        except Exception as e:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ 429: {e}")
                        
                        return None
                    
                    # Retry –¥–ª—è 5xx –æ—à–∏–±–æ–∫
                    if response.status_code >= 500 and retry_count < self.max_retries:
                        delay = self.retry_delay * (2 ** retry_count)  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                        logger.info(f"‚è≥ TaggingService: Retry —á–µ—Ä–µ–∑ {delay:.1f}—Å...")
                        await asyncio.sleep(delay)
                        return await self.generate_tags_for_text(text, retry_count + 1, use_fallback)
                    
                    # Fallback –Ω–∞ OpenRouter –µ—Å–ª–∏ GigaChat –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å–µ—Ä—å–µ–∑–Ω—ã—Ö –æ—à–∏–±–∫–∞—Ö)
                    if not use_fallback and self.provider == "gigachat" and self.fallback_to_openrouter:
                        if response.status_code in [502, 503, 504]:
                            logger.warning(f"‚ö†Ô∏è GigaChat –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ({response.status_code}), –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ OpenRouter")
                            return await self.generate_tags_for_text(text, retry_count=0, use_fallback=True)
                    
                    return None
                
                result = response.json()
                content = result.get("choices", [{}])[0].get("message", {}).get("content", "")
                
                # DEBUG: –õ–æ–≥–∏—Ä—É–µ–º raw bytes –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
                if content:
                    logger.debug(f"Raw content bytes (–ø–µ—Ä–≤—ã–µ 100): {content.encode('utf-8')[:100]}")
                    logger.debug(f"Content type: {type(content)}, len={len(content)}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ content –Ω–µ –ø—É—Å—Ç–æ–π
                if not content or content.strip() == "":
                    error_detail = result.get("error", {})
                    logger.error("‚ùå TaggingService: API –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")
                    logger.error(f"–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç API: {json.dumps(result, ensure_ascii=False)[:500]}")
                    
                    # Retry –µ—Å–ª–∏ —ç—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞
                    if retry_count < self.max_retries and error_detail.get("code") in [502, 503, 504]:
                        delay = self.retry_delay * (2 ** retry_count)
                        logger.info(f"‚è≥ TaggingService: Retry —á–µ—Ä–µ–∑ {delay:.1f}—Å...")
                        await asyncio.sleep(delay)
                        return await self.generate_tags_for_text(text, retry_count + 1, use_fallback)
                    
                    # Fallback –Ω–∞ OpenRouter –µ—Å–ª–∏ GigaChat –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç
                    if not use_fallback and self.provider == "gigachat" and self.fallback_to_openrouter:
                        logger.warning("‚ö†Ô∏è GigaChat –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ OpenRouter")
                        return await self.generate_tags_for_text(text, retry_count=0, use_fallback=True)
                    
                    return None
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
                original_content = content
                logger.debug(f"Step 0 - Original: {repr(content[:100])}")
                
                # –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç
                # –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ markdown –±–ª–æ–∫–∏
                content = content.strip()
                logger.debug(f"Step 1 - After strip: {repr(content[:100])}")
                
                if content.startswith("```"):
                    lines = content.split("\n")
                    content = "\n".join(lines[1:-1]) if len(lines) > 2 else content
                    content = content.strip()
                    logger.debug(f"Step 2 - After markdown removal: {repr(content[:100])}")
                
                # –£–¥–∞–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å—ã —Ç–∏–ø–∞ "json" –ø–æ—Å–ª–µ ```
                if content.startswith("json"):
                    content = content[4:].strip()
                    logger.debug(f"Step 3 - After 'json' prefix removal: {repr(content[:100])}")
                
                # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ JSON –º–∞—Å—Å–∏–≤ –≤ —Ç–µ–∫—Å—Ç–µ
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ù–ï-–∂–∞–¥–Ω—ã–π –∫–≤–∞–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–µ—Ä–≤–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
                json_match = re.search(r'\[.*?\]', content, re.DOTALL)
                if json_match:
                    content = json_match.group(0)
                    logger.debug(f"Step 4 - After regex extract: {repr(content[:100])}")
                    logger.debug(f"         Content bytes: {content.encode('utf-8')[:100]}")
                else:
                    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –º–∞—Å—Å–∏–≤, –ª–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç
                    logger.error(f"‚ùå TaggingService: –ù–µ –Ω–∞–π–¥–µ–Ω JSON –º–∞—Å—Å–∏–≤ –≤ –æ—Ç–≤–µ—Ç–µ")
                    logger.error(f"–ü–æ–ª–Ω—ã–π –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {original_content[:500]}")
                    return None
                
                # –û—á–∏—â–∞–µ–º –æ—Ç –≤–æ–∑–º–æ–∂–Ω—ã—Ö trailing –∑–∞–ø—è—Ç—ã—Ö –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–π —Å–∫–æ–±–∫–æ–π
                before_sub = content
                content = re.sub(r',\s*\]', ']', content)
                if before_sub != content:
                    logger.debug(f"Step 5 - After trailing comma removal: {repr(content[:100])}")
                
                # –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ó–∞–º–µ–Ω—è–µ–º —Ç–∏–ø–æ–≥—Ä–∞—Ñ—Å–∫–∏–µ –∫–∞–≤—ã—á–∫–∏ –Ω–∞ –æ–±—ã—á–Ω—ã–µ
                # API –º–æ–∂–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å U+201C (") –∏ U+201D (") –≤–º–µ—Å—Ç–æ ASCII " (34)
                content = content.replace('\u201c', '"').replace('\u201d', '"')  # –î–≤–æ–π–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏
                content = content.replace('\u2018', "'").replace('\u2019', "'")  # –û–¥–∏–Ω–∞—Ä–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
                logger.debug(f"Step 5b - After quote normalization: {repr(content[:100])}")
                logger.debug(f"         Quote check: {[ord(c) for c in content if ord(c) in [34, 8220, 8221]]}")
                
                # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
                try:
                    logger.debug(f"Step 6 - Trying json.loads()...")
                    tags = json.loads(content)
                    logger.debug(f"Step 7 - Success! Got {len(tags)} tags")
                except json.JSONDecodeError as json_err:
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                    logger.error(f"‚ùå JSON decode error: {json_err}")
                    logger.error(f"–ü—ã—Ç–∞–ª–∏—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å: {repr(content[:200])}")
                    logger.error(f"Content length: {len(content)}, bytes length: {len(content.encode('utf-8'))}")
                    logger.error(f"First 50 chars: {[ord(c) for c in content[:50]]}")
                    logger.error(f"–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç API: {repr(original_content[:500])}")
                    raise
                
                if isinstance(tags, list) and all(isinstance(tag, str) for tag in tags):
                    # –û—á–∏—Å—Ç–∫–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–≥–æ–≤
                    cleaned_tags = []
                    seen_tags = set()  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
                    
                    for tag in tags:
                        tag_cleaned = tag.strip().lower()
                        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Ç–µ–≥–∏ –∏ –¥—É–±–ª–∏–∫–∞—Ç—ã
                        if tag_cleaned and tag_cleaned not in seen_tags:
                            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è: –¥–ª–∏–Ω–∞ —Ç–µ–≥–∞
                            if 2 <= len(tag_cleaned) <= 50:  # –ú–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞, –º–∞–∫—Å 50
                                cleaned_tags.append(tag_cleaned)
                                seen_tags.add(tag_cleaned)
                    
                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–≥–æ–≤
                    cleaned_tags = cleaned_tags[:7]  # –ú–∞–∫—Å–∏–º—É–º 7 —Ç–µ–≥–æ–≤
                    
                    if cleaned_tags:
                        logger.info(f"‚úÖ TaggingService: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(cleaned_tags)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–µ–≥–æ–≤")
                        return cleaned_tags
                    else:
                        logger.warning(f"‚ö†Ô∏è TaggingService: –ü–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –≤–∞–ª–∏–¥–Ω—ã—Ö —Ç–µ–≥–æ–≤")
                        return []
                else:
                    logger.error(f"‚ùå TaggingService: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: {content}")
                    return None
                    
        except json.JSONDecodeError as e:
            logger.error(f"‚ùå TaggingService: –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {str(e)}")
            try:
                logger.error(f"–ü—Ä–æ–±–ª–µ–º–Ω—ã–π –æ—Ç–≤–µ—Ç API: {original_content[:300] if 'original_content' in locals() else content[:300]}")
            except:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–≤–µ—Å—Ç–∏ –æ—Ç–≤–µ—Ç API")
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ —Å–º–µ–Ω–µ –º–æ–¥–µ–ª–∏
            if self.model.startswith("deepseek"):
                logger.warning(f"‚ö†Ô∏è –ú–æ–¥–µ–ª—å {self.model} –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ: google/gemini-2.0-flash-exp:free")
            
            return None
        except httpx.TimeoutException:
            logger.error("‚ùå TaggingService: –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è API")
            
            # Fallback –Ω–∞ OpenRouter –ø—Ä–∏ timeout GigaChat
            if not use_fallback and self.provider == "gigachat" and self.fallback_to_openrouter:
                logger.warning("‚ö†Ô∏è GigaChat timeout, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ OpenRouter")
                return await self.generate_tags_for_text(text, retry_count=0, use_fallback=True)
            
            return None
        except Exception as e:
            logger.error(f"‚ùå TaggingService: –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–≥–æ–≤: {str(e)}")
            
            # Fallback –Ω–∞ OpenRouter –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö GigaChat
            if not use_fallback and self.provider == "gigachat" and self.fallback_to_openrouter:
                logger.warning("‚ö†Ô∏è GigaChat –æ—à–∏–±–∫–∞, –ø—Ä–æ–±—É–µ–º OpenRouter")
                return await self.generate_tags_for_text(text, retry_count=0, use_fallback=True)
            
            return None
    
    async def update_post_tags(self, post_id: int, db: SessionLocal = None, force_retry: bool = False) -> bool:
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–≥–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º —Å—Ç–∞—Ç—É—Å–∞
        
        Args:
            post_id: ID –ø–æ—Å—Ç–∞
            db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            force_retry: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π retry (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç max_retry_attempts)
            
        Returns:
            True –µ—Å–ª–∏ —Ç–µ–≥–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
        """
        if not self.enabled:
            return False
        
        close_db = False
        if db is None:
            db = SessionLocal()
            close_db = True
        
        try:
            post = db.query(Post).filter(Post.id == post_id).first()
            if not post:
                logger.warning(f"‚ö†Ô∏è TaggingService: –ü–æ—Å—Ç {post_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ (–µ—Å–ª–∏ –Ω–µ force_retry)
            if not force_retry and post.tagging_attempts >= self.max_retry_attempts:
                logger.warning(f"‚ö†Ô∏è TaggingService: –ü–æ—Å—Ç {post_id} –ø—Ä–µ–≤—ã—Å–∏–ª –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫ ({self.max_retry_attempts})")
                post.tagging_status = "failed"
                db.commit()
                return False
            
            if not post.text:
                logger.debug(f"TaggingService: –ü–æ—Å—Ç {post_id} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞")
                post.tagging_status = "skipped"
                db.commit()
                return False
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –∏ –≤—Ä–µ–º—è
            post.tagging_attempts += 1
            post.last_tagging_attempt = datetime.now(timezone.utc)
            post.tagging_status = "retrying" if post.tagging_attempts > 1 else "pending"
            db.commit()
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–≥–∏
            tags = await self.generate_tags_for_text(post.text)
            
            if tags is not None:
                post.tags = tags
                post.tagging_status = "success"
                post.tagging_error = None
                db.commit()
                logger.info(f"‚úÖ TaggingService: –ü–æ—Å—Ç {post_id} –æ–±–Ω–æ–≤–ª–µ–Ω —Å —Ç–µ–≥–∞–º–∏: {tags}")
                return True
            else:
                post.tagging_status = "failed" if post.tagging_attempts >= self.max_retry_attempts else "retrying"
                post.tagging_error = "Failed to generate tags"
                db.commit()
                logger.warning(f"‚ö†Ô∏è TaggingService: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–≥–∏ –¥–ª—è –ø–æ—Å—Ç–∞ {post_id} (–ø–æ–ø—ã—Ç–∫–∞ {post.tagging_attempts})")
                return False
                
        except Exception as e:
            db.rollback()
            logger.error(f"‚ùå TaggingService: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–≥–æ–≤ –¥–ª—è –ø–æ—Å—Ç–∞ {post_id}: {str(e)}")
            try:
                post = db.query(Post).filter(Post.id == post_id).first()
                if post:
                    post.tagging_status = "failed" if post.tagging_attempts >= self.max_retry_attempts else "retrying"
                    post.tagging_error = str(e)[:500]
                    db.commit()
            except:
                pass
            return False
        finally:
            if close_db:
                db.close()
    
    async def process_posts_batch(self, post_ids: List[int], delay_between_requests: float = 1.0):
        """
        –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–≥–æ–≤
        
        Args:
            post_ids: –°–ø–∏—Å–æ–∫ ID –ø–æ—Å—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            delay_between_requests: –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–¥–ª—è rate limiting)
        """
        if not self.enabled:
            logger.info("TaggingService: –¢–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ")
            return
        
        if not post_ids:
            logger.debug("TaggingService: –ù–µ—Ç –ø–æ—Å—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            return
        
        logger.info(f"üè∑Ô∏è TaggingService: –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É {len(post_ids)} –ø–æ—Å—Ç–æ–≤")
        
        db = SessionLocal()
        try:
            success_count = 0
            failed_count = 0
            
            for i, post_id in enumerate(post_ids):
                try:
                    logger.debug(f"TaggingService: –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å—Ç–∞ {i+1}/{len(post_ids)} (ID: {post_id})")
                    
                    success = await self.update_post_tags(post_id, db)
                    
                    if success:
                        success_count += 1
                    else:
                        failed_count += 1
                    
                    # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è rate limits
                    if i < len(post_ids) - 1:
                        await asyncio.sleep(delay_between_requests)
                        
                except Exception as e:
                    logger.error(f"‚ùå TaggingService: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Å—Ç–∞ {post_id}: {str(e)}")
                    failed_count += 1
            
            logger.info(
                f"‚úÖ TaggingService: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. "
                f"–£—Å–ø–µ—à–Ω–æ: {success_count}, –û—à–∏–±–æ–∫: {failed_count}"
            )
            
        except Exception as e:
            logger.error(f"‚ùå TaggingService: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")
        finally:
            db.close()
    
    async def retry_failed_posts(self, user_id: Optional[int] = None, limit: int = 50, force: bool = False):
        """
        –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–≥–æ–≤ –¥–ª—è –ø–æ—Å—Ç–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –µ–≥–æ –ø–æ—Å—Ç—ã)
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            force: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π retry –¥–∞–∂–µ –¥–ª—è –ø–æ—Å—Ç–æ–≤ —Å –ø—Ä–µ–≤—ã—à–µ–Ω–Ω—ã–º –ª–∏–º–∏—Ç–æ–º –ø–æ–ø—ã—Ç–æ–∫
        """
        if not self.enabled:
            logger.info("TaggingService: –¢–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ")
            return
        
        db = SessionLocal()
        try:
            # –ò—â–µ–º –ø–æ—Å—Ç—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º failed –∏–ª–∏ retrying
            query = db.query(Post).filter(
                Post.tagging_status.in_(["failed", "retrying"]),
                Post.text != None
            )
            
            if user_id:
                query = query.filter(Post.user_id == user_id)
            
            if not force:
                # –¢–æ–ª—å–∫–æ –ø–æ—Å—Ç—ã, –Ω–µ –ø—Ä–µ–≤—ã—Å–∏–≤—à–∏–µ –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫
                query = query.filter(Post.tagging_attempts < self.max_retry_attempts)
            
            posts = query.limit(limit).all()
            post_ids = [post.id for post in posts]
            
            if post_ids:
                logger.info(f"üîÑ TaggingService: –ù–∞–π–¥–µ–Ω–æ {len(post_ids)} –ø–æ—Å—Ç–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏ —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è")
                logger.info(f"   –†–µ–∂–∏–º: {'–ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π' if force else '–æ–±—ã—á–Ω—ã–π'}")
                
                success_count = 0
                failed_count = 0
                
                for post_id in post_ids:
                    success = await self.update_post_tags(post_id, db, force_retry=force)
                    if success:
                        success_count += 1
                    else:
                        failed_count += 1
                    
                    # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                    await asyncio.sleep(1.0)
                
                logger.info(
                    f"‚úÖ TaggingService: Retry –∑–∞–≤–µ—Ä—à–µ–Ω. "
                    f"–£—Å–ø–µ—à–Ω–æ: {success_count}, –û—à–∏–±–æ–∫: {failed_count}"
                )
            else:
                logger.info("TaggingService: –ù–µ—Ç –ø–æ—Å—Ç–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                
        except Exception as e:
            logger.error(f"‚ùå TaggingService: –û—à–∏–±–∫–∞ retry failed posts: {str(e)}")
        finally:
            db.close()
    
    async def tag_posts_without_tags(self, user_id: Optional[int] = None, limit: int = 100):
        """
        –¢–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ –±–µ–∑ —Ç–µ–≥–æ–≤
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –µ–≥–æ –ø–æ—Å—Ç—ã)
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        if not self.enabled:
            return
        
        db = SessionLocal()
        try:
            query = db.query(Post).filter(Post.tags == None, Post.text != None)
            
            if user_id:
                query = query.filter(Post.user_id == user_id)
            
            posts = query.limit(limit).all()
            post_ids = [post.id for post in posts]
            
            if post_ids:
                logger.info(f"üè∑Ô∏è TaggingService: –ù–∞–π–¥–µ–Ω–æ {len(post_ids)} –ø–æ—Å—Ç–æ–≤ –±–µ–∑ —Ç–µ–≥–æ–≤")
                await self.process_posts_batch(post_ids)
            else:
                logger.info("TaggingService: –í—Å–µ –ø–æ—Å—Ç—ã —É–∂–µ –∏–º–µ—é—Ç —Ç–µ–≥–∏")
                
        except Exception as e:
            logger.error(f"‚ùå TaggingService: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤ –±–µ–∑ —Ç–µ–≥–æ–≤: {str(e)}")
        finally:
            db.close()


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
tagging_service = TaggingService()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
async def tag_new_posts_background(post_ids: List[int]):
    """
    –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤
    
    Args:
        post_ids: –°–ø–∏—Å–æ–∫ ID –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤
    """
    if post_ids:
        logger.info(f"üè∑Ô∏è –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è {len(post_ids)} –ø–æ—Å—Ç–æ–≤")
        await tagging_service.process_posts_batch(post_ids)


if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞
    async def test():
        service = TaggingService()
        test_text = """
        –ù–æ–≤—ã–π –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –æ—Ç OpenAI –º–æ–∂–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è 
        –ø–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –æ–ø–∏—Å–∞–Ω–∏—é. –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–∏—Ñ—Ñ—É–∑–∏–æ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ –∏ 
        –æ–±—É—á–µ–Ω–∞ –Ω–∞ –º–∏–ª–ª–∏–æ–Ω–∞—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.
        """
        tags = await service.generate_tags_for_text(test_text)
        print(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ–≥–∏: {tags}")
    
    asyncio.run(test())

