import asyncio
import httpx
import json
import os
import logging
import re
from typing import List, Optional, Dict
from datetime import datetime, timezone
from database import SessionLocal
from models import Post
from dotenv import load_dotenv

load_dotenv()

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class TaggingService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º OpenRouter API"""
    
    def __init__(self):
        self.api_key = os.getenv("OPENROUTER_API_KEY")
        self.model = os.getenv("OPENROUTER_MODEL", "deepseek/deepseek-chat-v3.1:free")
        self.batch_size = int(os.getenv("TAGGING_BATCH_SIZE", "10"))
        self.api_url = "https://openrouter.ai/api/v1/chat/completions"
        
        # HTTP Transport —Å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º retry –¥–ª—è —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫
        self.transport = httpx.AsyncHTTPTransport(retries=3)
        
        # Fallback –º–æ–¥–µ–ª–∏ (–ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É)
        self.fallback_models = [
            "deepseek/deepseek-chat-v3.1:free",
            "google/gemini-2.0-flash-exp:free",
            "meta-llama/llama-3.2-3b-instruct:free",
            "qwen/qwen-2-7b-instruct:free",
            "google/gemma-2-9b-it:free"
        ]
        
        # Retry –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.max_retries = int(os.getenv("TAGGING_MAX_RETRIES", "3"))
        self.retry_delay = float(os.getenv("TAGGING_RETRY_DELAY", "2.0"))  # —Å–µ–∫—É–Ω–¥—ã
        self.max_retry_attempts = int(os.getenv("TAGGING_MAX_ATTEMPTS", "5"))  # –æ–±—â–µ–µ –∫–æ–ª-–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –ø–æ—Å—Ç–∞
        
        if not self.api_key or self.api_key == "your_openrouter_api_key_here":
            logger.warning("‚ö†Ô∏è TaggingService: OPENROUTER_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –¢–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ.")
            self.enabled = False
        else:
            self.enabled = True
            logger.info(f"‚úÖ TaggingService: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –º–æ–¥–µ–ª—å—é {self.model}")
            logger.info(f"üîÑ TaggingService: Fallback –º–æ–¥–µ–ª–∏: {', '.join(self.fallback_models[:2])}")
            
            # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª—è—Ö
            if self.model.startswith("deepseek"):
                logger.warning(f"‚ö†Ô∏è TaggingService: –ú–æ–¥–µ–ª—å {self.model} –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ–π")
                logger.warning(f"üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: OPENROUTER_MODEL=google/gemini-2.0-flash-exp:free")
            elif self.model.startswith("openai/gpt-oss"):
                logger.warning(f"‚ö†Ô∏è TaggingService: –ú–æ–¥–µ–ª—å {self.model} —É—Å—Ç–∞—Ä–µ–ª–∞ –∏ –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å")
                logger.warning(f"üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: OPENROUTER_MODEL=google/gemini-2.0-flash-exp:free")
    
    async def generate_tags_for_text(self, text: str, retry_count: int = 0) -> Optional[List[str]]:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–≥–æ–≤ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º LLM —Å retry –∏ fallback –º–µ—Ö–∞–Ω–∏–∑–º–æ–º
        
        Args:
            text: –¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            retry_count: –ù–æ–º–µ—Ä –ø–æ–ø—ã—Ç–∫–∏ (–¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤ –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        if not self.enabled:
            logger.debug("TaggingService: –°–µ—Ä–≤–∏—Å —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω")
            return None
        
        if not text or len(text.strip()) < 10:
            logger.debug("TaggingService: –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –¥–ª—è —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è")
            return []
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–¥–µ–ª—å –¥–ª—è —Ç–µ–∫—É—â–µ–π –ø–æ–ø—ã—Ç–∫–∏
        current_model = self.model
        if retry_count > 0 and retry_count <= len(self.fallback_models):
            current_model = self.fallback_models[retry_count - 1]
            logger.info(f"üîÑ TaggingService: –ü–æ–ø—ã—Ç–∫–∞ {retry_count + 1}, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –º–æ–¥–µ–ª—å: {current_model}")
        
        try:
            prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç –∏ –æ–ø—Ä–µ–¥–µ–ª–∏ 3-7 —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ç–µ–≥–æ–≤ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏.

–¢–µ–∫—Å—Ç:
{text[:2000]}

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ç–µ–≥–∞–º:
- –¢–µ–≥–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
- –¢–µ–≥–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–º–∏ (1-2 —Å–ª–æ–≤–∞)
- –¢–µ–≥–∏ –¥–æ–ª–∂–Ω—ã –æ—Ç—Ä–∞–∂–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é —Ç–µ–º–∞—Ç–∏–∫—É —Ç–µ–∫—Å—Ç–∞
- –ò–∑–±–µ–≥–∞–π —Å–ª–∏—à–∫–æ–º –æ–±—â–∏—Ö —Ç–µ–≥–æ–≤

–í–ê–ñ–ù–û: –í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON –º–∞—Å—Å–∏–≤ —Ç–µ–≥–æ–≤, –±–µ–∑ markdown, –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.
–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: ["—Ç–µ–≥1", "—Ç–µ–≥2", "—Ç–µ–≥3"]

–ü—Ä–∏–º–µ—Ä:
["—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç", "–Ω–æ–≤–æ—Å—Ç–∏"]"""

            async with httpx.AsyncClient(transport=self.transport, timeout=30.0) as client:
                response = await client.post(
                    self.api_url,
                    headers={
                        "Authorization": f"Bearer {self.api_key}",
                        "Content-Type": "application/json"
                    },
                    json={
                        "model": current_model,
                        "messages": [
                            {
                                "role": "user",
                                "content": prompt
                            }
                        ],
                        "temperature": 0.3,
                        "max_tokens": 150
                    }
                )
                
                if response.status_code != 200:
                    error_msg = f"API Error {response.status_code}: {response.text[:200]}"
                    logger.error(f"‚ùå TaggingService: –û—à–∏–±–∫–∞ API: {response.status_code} - {response.text[:500]}")
                    
                    # Retry –¥–ª—è 5xx –æ—à–∏–±–æ–∫
                    if response.status_code >= 500 and retry_count < self.max_retries:
                        delay = self.retry_delay * (2 ** retry_count)  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                        logger.info(f"‚è≥ TaggingService: Retry —á–µ—Ä–µ–∑ {delay:.1f}—Å...")
                        await asyncio.sleep(delay)
                        return await self.generate_tags_for_text(text, retry_count + 1)
                    
                    return None
                
                result = response.json()
                content = result.get("choices", [{}])[0].get("message", {}).get("content", "")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ content –Ω–µ –ø—É—Å—Ç–æ–π
                if not content or content.strip() == "":
                    error_detail = result.get("error", {})
                    logger.error("‚ùå TaggingService: API –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")
                    logger.error(f"–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç API: {json.dumps(result, ensure_ascii=False)[:500]}")
                    
                    # Retry –µ—Å–ª–∏ —ç—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞
                    if retry_count < self.max_retries and error_detail.get("code") in [502, 503, 504]:
                        delay = self.retry_delay * (2 ** retry_count)
                        logger.info(f"‚è≥ TaggingService: Retry —á–µ—Ä–µ–∑ {delay:.1f}—Å...")
                        await asyncio.sleep(delay)
                        return await self.generate_tags_for_text(text, retry_count + 1)
                    
                    return None
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
                original_content = content
                
                # –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç
                # –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ markdown –±–ª–æ–∫–∏
                content = content.strip()
                if content.startswith("```"):
                    lines = content.split("\n")
                    content = "\n".join(lines[1:-1]) if len(lines) > 2 else content
                    content = content.strip()
                
                # –£–¥–∞–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å—ã —Ç–∏–ø–∞ "json" –ø–æ—Å–ª–µ ```
                if content.startswith("json"):
                    content = content[4:].strip()
                
                # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ JSON –º–∞—Å—Å–∏–≤ –≤ —Ç–µ–∫—Å—Ç–µ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∂–∞–¥–Ω—ã–π –ø–æ–∏—Å–∫ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞)
                # –ò—â–µ–º –º–∞—Å—Å–∏–≤ –æ—Ç –ø–µ—Ä–≤–æ–π [ –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π ]
                json_match = re.search(r'\[.*\]', content, re.DOTALL)
                if json_match:
                    content = json_match.group(0)
                else:
                    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –º–∞—Å—Å–∏–≤, –ª–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç
                    logger.error(f"‚ùå TaggingService: –ù–µ –Ω–∞–π–¥–µ–Ω JSON –º–∞—Å—Å–∏–≤ –≤ –æ—Ç–≤–µ—Ç–µ")
                    logger.error(f"–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {original_content[:300]}")
                    return None
                
                # –û—á–∏—â–∞–µ–º –æ—Ç –≤–æ–∑–º–æ–∂–Ω—ã—Ö trailing –∑–∞–ø—è—Ç—ã—Ö –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–π —Å–∫–æ–±–∫–æ–π
                content = re.sub(r',\s*\]', ']', content)
                
                # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
                tags = json.loads(content)
                
                if isinstance(tags, list) and all(isinstance(tag, str) for tag in tags):
                    # –û—á–∏—Å—Ç–∫–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–≥–æ–≤
                    tags = [tag.strip().lower() for tag in tags if tag.strip()]
                    tags = tags[:7]  # –ú–∞–∫—Å–∏–º—É–º 7 —Ç–µ–≥–æ–≤
                    logger.info(f"‚úÖ TaggingService: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(tags)} —Ç–µ–≥–æ–≤")
                    return tags
                else:
                    logger.error(f"‚ùå TaggingService: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: {content}")
                    return None
                    
        except json.JSONDecodeError as e:
            logger.error(f"‚ùå TaggingService: –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {str(e)}")
            try:
                logger.error(f"–ü—Ä–æ–±–ª–µ–º–Ω—ã–π –æ—Ç–≤–µ—Ç API: {original_content[:300] if 'original_content' in locals() else content[:300]}")
            except:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–≤–µ—Å—Ç–∏ –æ—Ç–≤–µ—Ç API")
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ —Å–º–µ–Ω–µ –º–æ–¥–µ–ª–∏
            if self.model.startswith("deepseek"):
                logger.warning(f"‚ö†Ô∏è –ú–æ–¥–µ–ª—å {self.model} –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ: google/gemini-2.0-flash-exp:free")
            
            return None
        except httpx.TimeoutException:
            logger.error("‚ùå TaggingService: –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è API")
            return None
        except Exception as e:
            logger.error(f"‚ùå TaggingService: –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–≥–æ–≤: {str(e)}")
            return None
    
    async def update_post_tags(self, post_id: int, db: SessionLocal = None, force_retry: bool = False) -> bool:
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–≥–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º —Å—Ç–∞—Ç—É—Å–∞
        
        Args:
            post_id: ID –ø–æ—Å—Ç–∞
            db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            force_retry: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π retry (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç max_retry_attempts)
            
        Returns:
            True –µ—Å–ª–∏ —Ç–µ–≥–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
        """
        if not self.enabled:
            return False
        
        close_db = False
        if db is None:
            db = SessionLocal()
            close_db = True
        
        try:
            post = db.query(Post).filter(Post.id == post_id).first()
            if not post:
                logger.warning(f"‚ö†Ô∏è TaggingService: –ü–æ—Å—Ç {post_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ (–µ—Å–ª–∏ –Ω–µ force_retry)
            if not force_retry and post.tagging_attempts >= self.max_retry_attempts:
                logger.warning(f"‚ö†Ô∏è TaggingService: –ü–æ—Å—Ç {post_id} –ø—Ä–µ–≤—ã—Å–∏–ª –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫ ({self.max_retry_attempts})")
                post.tagging_status = "failed"
                db.commit()
                return False
            
            if not post.text:
                logger.debug(f"TaggingService: –ü–æ—Å—Ç {post_id} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞")
                post.tagging_status = "skipped"
                db.commit()
                return False
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –∏ –≤—Ä–µ–º—è
            post.tagging_attempts += 1
            post.last_tagging_attempt = datetime.now(timezone.utc)
            post.tagging_status = "retrying" if post.tagging_attempts > 1 else "pending"
            db.commit()
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–≥–∏
            tags = await self.generate_tags_for_text(post.text)
            
            if tags is not None:
                post.tags = tags
                post.tagging_status = "success"
                post.tagging_error = None
                db.commit()
                logger.info(f"‚úÖ TaggingService: –ü–æ—Å—Ç {post_id} –æ–±–Ω–æ–≤–ª–µ–Ω —Å —Ç–µ–≥–∞–º–∏: {tags}")
                return True
            else:
                post.tagging_status = "failed" if post.tagging_attempts >= self.max_retry_attempts else "retrying"
                post.tagging_error = "Failed to generate tags"
                db.commit()
                logger.warning(f"‚ö†Ô∏è TaggingService: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–≥–∏ –¥–ª—è –ø–æ—Å—Ç–∞ {post_id} (–ø–æ–ø—ã—Ç–∫–∞ {post.tagging_attempts})")
                return False
                
        except Exception as e:
            db.rollback()
            logger.error(f"‚ùå TaggingService: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–≥–æ–≤ –¥–ª—è –ø–æ—Å—Ç–∞ {post_id}: {str(e)}")
            try:
                post = db.query(Post).filter(Post.id == post_id).first()
                if post:
                    post.tagging_status = "failed" if post.tagging_attempts >= self.max_retry_attempts else "retrying"
                    post.tagging_error = str(e)[:500]
                    db.commit()
            except:
                pass
            return False
        finally:
            if close_db:
                db.close()
    
    async def process_posts_batch(self, post_ids: List[int], delay_between_requests: float = 1.0):
        """
        –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–≥–æ–≤
        
        Args:
            post_ids: –°–ø–∏—Å–æ–∫ ID –ø–æ—Å—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            delay_between_requests: –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–¥–ª—è rate limiting)
        """
        if not self.enabled:
            logger.info("TaggingService: –¢–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ")
            return
        
        if not post_ids:
            logger.debug("TaggingService: –ù–µ—Ç –ø–æ—Å—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            return
        
        logger.info(f"üè∑Ô∏è TaggingService: –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É {len(post_ids)} –ø–æ—Å—Ç–æ–≤")
        
        db = SessionLocal()
        try:
            success_count = 0
            failed_count = 0
            
            for i, post_id in enumerate(post_ids):
                try:
                    logger.debug(f"TaggingService: –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å—Ç–∞ {i+1}/{len(post_ids)} (ID: {post_id})")
                    
                    success = await self.update_post_tags(post_id, db)
                    
                    if success:
                        success_count += 1
                    else:
                        failed_count += 1
                    
                    # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è rate limits
                    if i < len(post_ids) - 1:
                        await asyncio.sleep(delay_between_requests)
                        
                except Exception as e:
                    logger.error(f"‚ùå TaggingService: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Å—Ç–∞ {post_id}: {str(e)}")
                    failed_count += 1
            
            logger.info(
                f"‚úÖ TaggingService: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. "
                f"–£—Å–ø–µ—à–Ω–æ: {success_count}, –û—à–∏–±–æ–∫: {failed_count}"
            )
            
        except Exception as e:
            logger.error(f"‚ùå TaggingService: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")
        finally:
            db.close()
    
    async def retry_failed_posts(self, user_id: Optional[int] = None, limit: int = 50, force: bool = False):
        """
        –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–≥–æ–≤ –¥–ª—è –ø–æ—Å—Ç–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –µ–≥–æ –ø–æ—Å—Ç—ã)
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            force: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π retry –¥–∞–∂–µ –¥–ª—è –ø–æ—Å—Ç–æ–≤ —Å –ø—Ä–µ–≤—ã—à–µ–Ω–Ω—ã–º –ª–∏–º–∏—Ç–æ–º –ø–æ–ø—ã—Ç–æ–∫
        """
        if not self.enabled:
            logger.info("TaggingService: –¢–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ")
            return
        
        db = SessionLocal()
        try:
            # –ò—â–µ–º –ø–æ—Å—Ç—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º failed –∏–ª–∏ retrying
            query = db.query(Post).filter(
                Post.tagging_status.in_(["failed", "retrying"]),
                Post.text != None
            )
            
            if user_id:
                query = query.filter(Post.user_id == user_id)
            
            if not force:
                # –¢–æ–ª—å–∫–æ –ø–æ—Å—Ç—ã, –Ω–µ –ø—Ä–µ–≤—ã—Å–∏–≤—à–∏–µ –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫
                query = query.filter(Post.tagging_attempts < self.max_retry_attempts)
            
            posts = query.limit(limit).all()
            post_ids = [post.id for post in posts]
            
            if post_ids:
                logger.info(f"üîÑ TaggingService: –ù–∞–π–¥–µ–Ω–æ {len(post_ids)} –ø–æ—Å—Ç–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏ —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è")
                logger.info(f"   –†–µ–∂–∏–º: {'–ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π' if force else '–æ–±—ã—á–Ω—ã–π'}")
                
                success_count = 0
                failed_count = 0
                
                for post_id in post_ids:
                    success = await self.update_post_tags(post_id, db, force_retry=force)
                    if success:
                        success_count += 1
                    else:
                        failed_count += 1
                    
                    # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                    await asyncio.sleep(1.0)
                
                logger.info(
                    f"‚úÖ TaggingService: Retry –∑–∞–≤–µ—Ä—à–µ–Ω. "
                    f"–£—Å–ø–µ—à–Ω–æ: {success_count}, –û—à–∏–±–æ–∫: {failed_count}"
                )
            else:
                logger.info("TaggingService: –ù–µ—Ç –ø–æ—Å—Ç–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                
        except Exception as e:
            logger.error(f"‚ùå TaggingService: –û—à–∏–±–∫–∞ retry failed posts: {str(e)}")
        finally:
            db.close()
    
    async def tag_posts_without_tags(self, user_id: Optional[int] = None, limit: int = 100):
        """
        –¢–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ –±–µ–∑ —Ç–µ–≥–æ–≤
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –µ–≥–æ –ø–æ—Å—Ç—ã)
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        if not self.enabled:
            return
        
        db = SessionLocal()
        try:
            query = db.query(Post).filter(Post.tags == None, Post.text != None)
            
            if user_id:
                query = query.filter(Post.user_id == user_id)
            
            posts = query.limit(limit).all()
            post_ids = [post.id for post in posts]
            
            if post_ids:
                logger.info(f"üè∑Ô∏è TaggingService: –ù–∞–π–¥–µ–Ω–æ {len(post_ids)} –ø–æ—Å—Ç–æ–≤ –±–µ–∑ —Ç–µ–≥–æ–≤")
                await self.process_posts_batch(post_ids)
            else:
                logger.info("TaggingService: –í—Å–µ –ø–æ—Å—Ç—ã —É–∂–µ –∏–º–µ—é—Ç —Ç–µ–≥–∏")
                
        except Exception as e:
            logger.error(f"‚ùå TaggingService: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤ –±–µ–∑ —Ç–µ–≥–æ–≤: {str(e)}")
        finally:
            db.close()


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
tagging_service = TaggingService()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
async def tag_new_posts_background(post_ids: List[int]):
    """
    –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤
    
    Args:
        post_ids: –°–ø–∏—Å–æ–∫ ID –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤
    """
    if post_ids:
        logger.info(f"üè∑Ô∏è –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è {len(post_ids)} –ø–æ—Å—Ç–æ–≤")
        await tagging_service.process_posts_batch(post_ids)


if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞
    async def test():
        service = TaggingService()
        test_text = """
        –ù–æ–≤—ã–π –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –æ—Ç OpenAI –º–æ–∂–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è 
        –ø–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –æ–ø–∏—Å–∞–Ω–∏—é. –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–∏—Ñ—Ñ—É–∑–∏–æ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ –∏ 
        –æ–±—É—á–µ–Ω–∞ –Ω–∞ –º–∏–ª–ª–∏–æ–Ω–∞—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.
        """
        tags = await service.generate_tags_for_text(test_text)
        print(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ–≥–∏: {tags}")
    
    asyncio.run(test())

