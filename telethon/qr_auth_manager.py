"""
QR Authentication Manager –¥–ª—è Telegram Mini App

–£–ø—Ä–∞–≤–ª—è–µ—Ç QR-–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π —á–µ—Ä–µ–∑ client.qr_login()
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∫–∞–Ω–∏—Ä—É–µ—Ç QR –∫–æ–¥ –≤ —Å–≤–æ–µ–º Telegram –±–µ–∑ SMS –∫–æ–¥–æ–≤

–í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Redis –¥–ª—è shared state –º–µ–∂–¥—É telethon-bot –∏ telethon –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º–∏
"""

import asyncio
import logging
import os
import uuid
import base64
import json
import qrcode
from io import BytesIO
from datetime import datetime, timedelta, timezone
from typing import Dict, Any, Optional

import redis

from telethon import TelegramClient
from telethon.errors import RPCError
from sqlalchemy.orm import Session

from models import User, InviteCode
from database import SessionLocal
from shared_auth_manager import shared_auth_manager
from subscription_config import get_subscription_info

logger = logging.getLogger(__name__)


class QRAuthManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä QR-–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram Mini App
    
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Redis –¥–ª—è shared state –º–µ–∂–¥—É telethon-bot –∏ telethon –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º–∏
    """
    
    def __init__(self):
        # In-memory —Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö Telethon –∫–ª–∏–µ–Ω—Ç–æ–≤ (–Ω–µ shared)
        self.active_clients: Dict[int, TelegramClient] = {}
        
        # Redis –¥–ª—è shared state –º–µ–∂–¥—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º–∏
        redis_host = os.getenv("REDIS_HOST", "redis")
        redis_port = int(os.getenv("REDIS_PORT", 6379))
        redis_password = os.getenv("REDIS_PASSWORD")  # –ú–æ–∂–µ—Ç –±—ã—Ç—å None
        
        try:
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Redis/Valkey
            redis_kwargs = {
                "host": redis_host,
                "port": redis_port,
                "decode_responses": True  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è bytes –≤ str
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
            if redis_password:
                redis_kwargs["password"] = redis_password
            
            self.redis_client = redis.Redis(**redis_kwargs)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            self.redis_client.ping()
            logger.info(f"‚úÖ QRAuthManager –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ Redis ({redis_host}:{redis_port})")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis: {e}")
            # Fallback –Ω–∞ in-memory (–¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
            self.redis_client = None
            logger.warning("‚ö†Ô∏è Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è in-memory storage (–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –º–µ–∂–¥—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º–∏!)")
        
        logger.info("‚úÖ QRAuthManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def create_qr_session(self, telegram_id: int, invite_code: str) -> Dict[str, Any]:
        """
        –°–æ–∑–¥–∞—Ç—å QR —Å–µ—Å—Å–∏—é –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        
        Args:
            telegram_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            invite_code: –ò–Ω–≤–∞–π—Ç –∫–æ–¥ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
            
        Returns:
            Dict —Å session_id, token, deep_link, expires
        """
        try:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç —á–µ—Ä–µ–∑ shared_auth_manager
            client = await shared_auth_manager._create_client(telegram_id)
            await client.connect()
            
            if not client.is_connected():
                raise ConnectionError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR login
            logger.info(f"üîê –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR login –¥–ª—è {telegram_id}")
            qr_login = await client.qr_login()
            
            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Å–µ—Å—Å–∏—é
            session_id = str(uuid.uuid4())
            
            # –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—ã–π URL –æ—Ç Telethon (—É–∂–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º base64 –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–º)
            # qr_login.url —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç 'tg://login?token=...' —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º
            deep_link = qr_login.url
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –Ω–æ —É–∂–µ –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª—è deep link)
            token_b64 = base64.urlsafe_b64encode(qr_login.token).decode('utf-8').rstrip('=')
            
            # –í–ê–ñ–ù–û: –î–µ–ª–∞–µ–º expires timezone-aware (UTC)
            expires = qr_login.expires
            if expires.tzinfo is None:
                expires = expires.replace(tzinfo=timezone.utc)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∏–µ–Ω—Ç in-memory (—Ç–æ–ª—å–∫–æ –≤ —Ç–µ–∫—É—â–µ–º –ø—Ä–æ—Ü–µ—Å—Å–µ)
            self.active_clients[telegram_id] = client
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º session metadata –≤ Redis (shared –º–µ–∂–¥—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º–∏)
            session_data = {
                "token": token_b64,
                "deep_link": deep_link,
                "expires": expires.isoformat(),
                "telegram_id": telegram_id,
                "invite_code": invite_code,
                "authorized": False,
                "created_at": datetime.now(timezone.utc).isoformat()
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Redis —Å TTL 10 –º–∏–Ω—É—Ç
            if self.redis_client:
                redis_key = f"qr_session:{session_id}"
                self.redis_client.setex(
                    redis_key,
                    600,  # 10 –º–∏–Ω—É—Ç TTL
                    json.dumps(session_data)
                )
                logger.info(f"üíæ QR —Å–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ Redis: {redis_key}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º polling –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ —Ñ–æ–Ω–µ
            asyncio.create_task(self._poll_authorization(session_id, qr_login))
            
            logger.info(f"‚úÖ QR —Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞: {session_id[:8]}... (expires: {expires})")
            
            return {
                "session_id": session_id,
                "token": token_b64,
                "deep_link": deep_link,
                "expires": expires.isoformat()
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è QR —Å–µ—Å—Å–∏–∏ –¥–ª—è {telegram_id}: {e}")
            raise
    
    def _get_session_from_redis(self, session_id: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å session –¥–∞–Ω–Ω—ã–µ –∏–∑ Redis"""
        if not self.redis_client:
            return None
        
        try:
            redis_key = f"qr_session:{session_id}"
            data = self.redis_client.get(redis_key)
            if data:
                return json.loads(data)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–∑ Redis: {e}")
        
        return None
    
    def _update_session_status(self, session_id: str, status: str, error: Optional[str]):
        """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏ –≤ Redis"""
        if not self.redis_client:
            return
        
        try:
            redis_key = f"qr_session:{session_id}"
            data = self.redis_client.get(redis_key)
            if data:
                session = json.loads(data)
                session["authorized"] = (status == "authorized")
                if error:
                    session["error"] = error
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º TTL
                ttl = self.redis_client.ttl(redis_key)
                if ttl > 0:
                    self.redis_client.setex(redis_key, ttl, json.dumps(session))
                logger.info(f"üíæ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω –≤ Redis: {session_id[:8]}... ‚Üí {status}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Redis: {e}")
    
    async def _poll_authorization(self, session_id: str, qr_login):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –≤ —Ñ–æ–Ω–µ
        
        Args:
            session_id: ID —Å–µ—Å—Å–∏–∏  
            qr_login: QR login –æ–±—ä–µ–∫—Ç –æ—Ç Telethon
        """
        # –ü–æ–ª—É—á–∞–µ–º session data –∏–∑ Redis
        session_data = self._get_session_from_redis(session_id)
        if not session_data:
            logger.warning(f"‚ö†Ô∏è –°–µ—Å—Å–∏—è {session_id[:8]}... –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ Redis")
            return
        
        telegram_id = session_data["telegram_id"]
        client = self.active_clients.get(telegram_id)
        
        if not client:
            logger.error(f"‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è {telegram_id} (—Å–æ–∑–¥–∞–Ω –≤ –¥—Ä—É–≥–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ)")
            return
        
        try:
            logger.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id[:8]}...")
            
            # –ñ–¥–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (timeout 5 –º–∏–Ω—É—Ç)
            await qr_login.wait(timeout=300)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å
            if await client.is_user_authorized():
                logger.info(f"‚úÖ QR –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ –¥–ª—è {session_id[:8]}...")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ Redis
                self._update_session_status(session_id, "authorized", None)
                
                # –§–∏–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
                await self._finalize_authorization(session_id)
            else:
                logger.warning(f"‚ö†Ô∏è –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è {session_id[:8]}...")
                self._update_session_status(session_id, "waiting", "not_authorized")
                
        except asyncio.TimeoutError:
            logger.warning(f"‚è∞ Timeout –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è {session_id[:8]}...")
            self._update_session_status(session_id, "waiting", "timeout")
            
        except RPCError as e:
            logger.error(f"‚ùå RPCError –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ {session_id[:8]}...: {e}")
            self._update_session_status(session_id, "waiting", f"rpc_error: {str(e)}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ {session_id[:8]}...: {e}")
            self._update_session_status(session_id, "waiting", str(e))
    
    async def _finalize_authorization(self, session_id: str):
        """
        –ó–∞–≤–µ—Ä—à–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ—Å–ª–µ —É—Å–ø–µ—Ö–∞
        
        Args:
            session_id: ID —Å–µ—Å—Å–∏–∏
        """
        # –ü–æ–ª—É—á–∞–µ–º session data –∏–∑ Redis
        session_data = self._get_session_from_redis(session_id)
        if not session_data:
            logger.error(f"‚ùå –°–µ—Å—Å–∏—è {session_id[:8]}... –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø—Ä–∏ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏")
            return
        
        telegram_id = session_data["telegram_id"]
        invite_code = session_data["invite_code"]
        client = self.active_clients.get(telegram_id)
        
        if not client:
            logger.error(f"‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è {telegram_id}")
            return
        
        try:
            # –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞ session
            me = await client.get_me()
            if me.id != telegram_id:
                logger.error(f"üö® SECURITY: Session mismatch! Expected {telegram_id}, got {me.id}")
                await client.disconnect()
                self._update_session_status(session_id, "waiting", "security_mismatch")
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∏–µ–Ω—Ç –≤ shared_auth_manager
            shared_auth_manager.active_clients[telegram_id] = client
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î (—Ç–æ–ª—å–∫–æ PostgreSQL)
            db = SessionLocal()
            
            try:
                user = db.query(User).filter(User.telegram_id == telegram_id).first()
                if not user:
                    logger.error(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
                    self._update_session_status(session_id, "waiting", "user_not_found")
                    return
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (timezone-aware)
                user.is_authenticated = True
                user.failed_auth_attempts = 0
                user.auth_error = None
                user.last_auth_check = datetime.now(timezone.utc)
                
                # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É –∏–∑ invite code
                invite = db.query(InviteCode).filter(InviteCode.code == invite_code).first()
                if invite and invite.is_valid():
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ use() –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
                    invite.use(user.id)
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ subscription tier
                    subscription_info = get_subscription_info(invite.default_subscription)
                    
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –∏ –ª–∏–º–∏—Ç—ã
                    user.subscription_type = invite.default_subscription
                    user.subscription_started_at = datetime.now(timezone.utc)
                    user.max_channels = subscription_info['max_channels']
                    
                    # –ï—Å–ª–∏ –µ—Å—Ç—å trial –ø–µ—Ä–∏–æ–¥
                    if invite.default_trial_days and invite.default_trial_days > 0:
                        user.subscription_expires = datetime.now(timezone.utc) + timedelta(days=invite.default_trial_days)
                    
                    logger.info(f"üíé –ü–æ–¥–ø–∏—Å–∫–∞ {invite.default_subscription} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è {telegram_id} (–ª–∏–º–∏—Ç –∫–∞–Ω–∞–ª–æ–≤: {user.max_channels})")
                
                db.commit()
                logger.info(f"‚úÖ QR –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è {telegram_id}")
                
            except Exception as e:
                db.rollback()
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î –¥–ª—è {telegram_id}: {e}")
                self._update_session_status(session_id, "waiting", f"db_error: {str(e)}")
            finally:
                db.close()
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è {session_id[:8]}...: {e}")
            self._update_session_status(session_id, "waiting", str(e))
    
    def get_session_status(self, session_id: str) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏ –∏–∑ Redis
        
        Args:
            session_id: ID —Å–µ—Å—Å–∏–∏
            
        Returns:
            Dict —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º —Å–µ—Å—Å–∏–∏
        """
        # –ß–∏—Ç–∞–µ–º –∏–∑ Redis
        session_data = self._get_session_from_redis(session_id)
        if not session_data:
            return {"status": "not_found"}
        
        # –í–ê–ñ–ù–û: –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º authorized (—É—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç expires)
        if session_data.get("authorized"):
            return {
                "status": "authorized",
                "telegram_id": session_data["telegram_id"],
                "expires": session_data["expires"]
            }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∏—Å—Ç–µ–∫–ª–∞ –ª–∏ —Å–µ—Å—Å–∏—è (timezone-aware)
        expires_str = session_data["expires"]
        expires = datetime.fromisoformat(expires_str)
        if expires.tzinfo is None:
            expires = expires.replace(tzinfo=timezone.utc)
        
        now = datetime.now(timezone.utc)
        
        if now > expires:
            return {
                "status": "expired",
                "error": "QR –∫–æ–¥ –∏—Å—Ç–µ–∫"
            }
        
        # –û–∂–∏–¥–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        return {
            "status": "waiting",
            "error": session_data.get("error"),
            "expires": expires_str,
            "telegram_id": session_data["telegram_id"]
        }
    
    def cleanup_old_sessions(self, max_age_hours: int = 1):
        """
        –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–µ—Å—Å–∏–π –≤ Redis
        
        Args:
            max_age_hours: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç —Å–µ—Å—Å–∏–∏ –≤ —á–∞—Å–∞—Ö
        """
        if not self.redis_client:
            return
        
        try:
            # –ò—â–µ–º –≤—Å–µ QR —Å–µ—Å—Å–∏–∏ –≤ Redis
            pattern = "qr_session:*"
            keys = self.redis_client.keys(pattern)
            
            now = datetime.now(timezone.utc)
            removed = 0
            
            for key in keys:
                try:
                    data = self.redis_client.get(key)
                    if data:
                        session = json.loads(data)
                        created_at = datetime.fromisoformat(session["created_at"])
                        
                        if (now - created_at).total_seconds() > max_age_hours * 3600:
                            self.redis_client.delete(key)
                            removed += 1
                except Exception:
                    pass
            
            if removed > 0:
                logger.info(f"üóëÔ∏è –û—á–∏—â–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö QR —Å–µ—Å—Å–∏–π: {removed}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Å—Å–∏–π: {e}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
qr_auth_manager = QRAuthManager()

