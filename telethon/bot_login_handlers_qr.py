"""
QR Login handlers –¥–ª—è Telegram –±–æ—Ç–∞
–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram Mini App —Å QR –∫–æ–¥–æ–º (–±–µ–∑ SMS)
"""

import logging
import os
from datetime import datetime, timezone
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import (
    ContextTypes, ConversationHandler, CommandHandler, 
    MessageHandler, filters
)

from database import SessionLocal
from models import User, InviteCode, SubscriptionHistory
from qr_auth_manager import qr_auth_manager
from subscription_config import get_subscription_info, format_subscription_info

logger = logging.getLogger(__name__)

# States –¥–ª—è ConversationHandler
WAITING_QR_SCAN = 0


async def login_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ù–∞—á–∞–ª–æ QR –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Mini App
    
    –ö–æ–º–∞–Ω–¥–∞: /login INVITE_CODE
    """
    user = update.effective_user
    args = context.args
    
    if not args:
        await update.message.reply_text(
            "üí° **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** `/login INVITE_CODE`\n\n"
            "–ò–Ω–≤–∞–π—Ç –∫–æ–¥ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n\n"
            "–ü—Ä–∏–º–µ—Ä: `/login TRIAL7ABC123`",
            parse_mode='HTML'
        )
        return ConversationHandler.END
    
    invite_code = args[0].strip().upper()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è invite code
    db = SessionLocal()
    
    try:
        invite = db.query(InviteCode).filter(InviteCode.code == invite_code).first()
        
        if not invite:
            await update.message.reply_text("‚ùå –ò–Ω–≤–∞–π—Ç –∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return ConversationHandler.END
        
        if not invite.is_valid():
            await update.message.reply_text(
                "‚ùå –ò–Ω–≤–∞–π—Ç –∫–æ–¥ –∏—Å—Ç–µ–∫ –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω\n\n"
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∑–∞ –Ω–æ–≤—ã–º –∫–æ–¥–æ–º"
            )
            return ConversationHandler.END
        
        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db_user = db.query(User).filter(User.telegram_id == user.id).first()
        
        if not db_user:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –° –ø–æ–¥–ø–∏—Å–∫–æ–π –∏–∑ invite code
            logger.info(f"üë§ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –ª–∏–º–∏—Ç—ã –∏–∑ subscription tier
            subscription_info = get_subscription_info(invite.default_subscription)
            
            db_user = User(
                telegram_id=user.id,
                first_name=user.first_name or "User",
                last_name=user.last_name,
                username=user.username,
                role="user",
                # –í–ê–ñ–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É —Å—Ä–∞–∑—É –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
                subscription_type=invite.default_subscription,
                max_channels=subscription_info['max_channels'],
                invited_by=invite.created_by
            )
            db.add(db_user)
            db.commit()
            db.refresh(db_user)
            
            # –í–ê–ñ–ù–û: –û—Ç–º–µ—á–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏–Ω–≤–∞–π—Ç –∫–æ–¥–∞
            # –ù–ï –≤—ã–∑—ã–≤–∞–µ–º invite.use() –∑–¥–µ—Å—å - —ç—Ç–æ —Å–¥–µ–ª–∞–µ—Ç _finalize_authorization
            # –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π QR –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            
            logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: {db_user.id} —Å –ø–æ–¥–ø–∏—Å–∫–æ–π {invite.default_subscription}")
            
            # subscription_info —É–∂–µ –ø–æ–ª—É—á–µ–Ω –≤—ã—à–µ
        else:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–∏–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
            subscription_info = get_subscription_info(invite.default_subscription)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è conversation
        context.user_data['invite_code'] = invite_code
        context.user_data['telegram_id'] = user.id
        context.user_data['subscription_type'] = invite.default_subscription
        
        logger.info(f"üé´ –ò–Ω–≤–∞–π—Ç –∫–æ–¥ {invite_code} –≤–∞–ª–∏–¥–µ–Ω –¥–ª—è {user.id}")
        
    finally:
        db.close()
    
    # –°–æ–∑–¥–∞–µ–º QR —Å–µ—Å—Å–∏—é
    try:
        await update.message.reply_text("‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR –∫–æ–¥–∞...")
        
        session_data = await qr_auth_manager.create_qr_session(user.id, invite_code)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è Mini App
        auth_base_url = os.getenv("AUTH_BASE_URL", "https://telegram-auth.produman.studio")
        mini_app_url = f"{auth_base_url}/qr-auth?session_id={session_data['session_id']}"
        
        logger.info(f"üîó Mini App URL: {mini_app_url}")
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å Mini App
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton(
                "üîê –û—Ç–∫—Ä—ã—Ç—å QR –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é",
                web_app=WebAppInfo(url=mini_app_url)
            )]
        ])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
        await update.message.reply_text(
            f"‚úÖ **–ò–Ω–≤–∞–π—Ç –∫–æ–¥ –ø—Ä–∏–Ω—è—Ç!**\n\n"
            f"üéÅ **–ü–æ–¥–ø–∏—Å–∫–∞:** {subscription_info['name']}\n"
            f"üìä **–õ–∏–º–∏—Ç—ã:**\n"
            f"  ‚Ä¢ –ö–∞–Ω–∞–ª–æ–≤: {subscription_info['max_channels']}\n"
            f"  ‚Ä¢ –ü–æ—Å—Ç–æ–≤/–¥–µ–Ω—å: {subscription_info['max_posts_per_day']}\n"
            f"  ‚Ä¢ RAG –∑–∞–ø—Ä–æ—Å–æ–≤/–¥–µ–Ω—å: {subscription_info['rag_queries_per_day']}\n\n"
            f"üëá **–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:**\n\n"
            f"**–í Mini App –¥–æ—Å—Ç—É–ø–Ω—ã 3 —Å–ø–æ—Å–æ–±–∞:**\n"
            f"  1Ô∏è‚É£ –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR –∫–æ–¥ –∫–∞–º–µ—Ä–æ–π\n"
            f"  2Ô∏è‚É£ –û—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É –≤ Telegram\n"
            f"  3Ô∏è‚É£ –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É\n\n"
            f"‚ö†Ô∏è **–í–∞–∂–Ω–æ:** –ü–æ—Å–ª–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è/–æ—Ç–∫—Ä—ã—Ç–∏—è —Å—Å—ã–ª–∫–∏\n"
            f"**–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é** –≤ –¥–∏–∞–ª–æ–≥–µ Telegram!\n\n"
            f"‚è∞ QR –∫–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 5 –º–∏–Ω—É—Ç",
            reply_markup=keyboard,
            parse_mode='HTML'
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º session_id
        context.user_data['qr_session_id'] = session_data['session_id']
        
        logger.info(f"‚úÖ Mini App –∫–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–ª—è {user.id}")
        
        return WAITING_QR_SCAN
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è QR —Å–µ—Å—Å–∏–∏: {e}")
        await update.message.reply_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR –∫–æ–¥–∞\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/auth`"
        )
        return ConversationHandler.END


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    await update.message.reply_text(
        "‚ùå –ü—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω.\n\n"
        "–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/login INVITE_CODE`",
        parse_mode='HTML'
    )
    return ConversationHandler.END


async def subscription_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ"""
    user = update.effective_user
    db = SessionLocal()
    
    try:
        db_user = db.query(User).filter(User.telegram_id == user.id).first()
        if not db_user:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ (timezone-aware)
        is_active = db_user.check_subscription_active()
        subscription_info = get_subscription_info(db_user.subscription_type)
        
        text = f"üíé **–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞**\n\n"
        text += f"üìä **–¢–∞—Ä–∏—Ñ:** {subscription_info['name']}\n"
        text += f"üîê **–°—Ç–∞—Ç—É—Å:** {'‚úÖ –ê–∫—Ç–∏–≤–Ω–∞' if is_active else '‚ùå –ò—Å—Ç–µ–∫–ª–∞'}\n\n"
        
        text += f"**–õ–∏–º–∏—Ç—ã:**\n"
        text += f"  ‚Ä¢ –ö–∞–Ω–∞–ª–æ–≤: {db_user.max_channels}\n"
        text += f"  ‚Ä¢ –ü–æ—Å—Ç–æ–≤/–¥–µ–Ω—å: {subscription_info['max_posts_per_day']}\n"
        text += f"  ‚Ä¢ RAG –∑–∞–ø—Ä–æ—Å–æ–≤/–¥–µ–Ω—å: {subscription_info['rag_queries_per_day']}\n"
        text += f"  ‚Ä¢ AI –¥–∞–π–¥–∂–µ—Å—Ç—ã: {'‚úÖ' if subscription_info['ai_digest'] else '‚ùå'}\n\n"
        
        if db_user.subscription_started_at:
            started = db_user.subscription_started_at
            if started.tzinfo is None:
                started = started.replace(tzinfo=timezone.utc)
            text += f"üìÖ **–ù–∞—á–∞–ª–æ:** {started.strftime('%d.%m.%Y')}\n"
        
        if db_user.subscription_expires:
            expires = db_user.subscription_expires
            if expires.tzinfo is None:
                expires = expires.replace(tzinfo=timezone.utc)
            
            now = datetime.now(timezone.utc)
            days_left = (expires - now).days
            
            text += f"üìÖ **–ò—Å—Ç–µ–∫–∞–µ—Ç:** {expires.strftime('%d.%m.%Y')} ({days_left} –¥–Ω–µ–π)\n"
        else:
            text += f"‚è≥ **–°—Ä–æ–∫:** –ë–µ–∑–ª–∏–º–∏—Ç–Ω–∞—è\n"
        
        # –¢–µ–∫—É—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
        channel_count = len(db_user.channels)
        text += f"\n**–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:**\n"
        text += f"  ‚Ä¢ –ö–∞–Ω–∞–ª–æ–≤: {channel_count}/{db_user.max_channels}\n"
        
        if not is_active:
            text += f"\n‚ö†Ô∏è **–ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞!** –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è."
        
        await update.message.reply_text(text, parse_mode='HTML')
        
    except Exception as e:
        logger.error(f"Subscription command error: {e}")
        from telegram_formatter import markdownify
        await update.message.reply_text(
            markdownify(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"),
            parse_mode='HTML'
        )
    finally:
        db.close()


# –°–æ–∑–¥–∞–µ–º ConversationHandler
def get_login_conversation_handler():
    """–ü–æ–ª—É—á–∏—Ç—å ConversationHandler –¥–ª—è QR –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    return ConversationHandler(
        entry_points=[CommandHandler('login', login_start)],
        states={
            WAITING_QR_SCAN: [
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç —Å Mini App, –Ω–µ —Å –±–æ—Ç–æ–º
                # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —á–µ—Ä–µ–∑ polling
            ]
        },
        fallbacks=[CommandHandler('cancel', cancel)],
        per_user=True,
        per_chat=False,
        name='login_conversation',
        persistent=True,
        allow_reentry=True
    )

