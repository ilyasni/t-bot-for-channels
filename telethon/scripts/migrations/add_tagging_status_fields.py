#!/usr/bin/env python3
"""
–ú–∏–≥—Ä–∞—Ü–∏—è: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è

–î–∞—Ç–∞: 2025-10-11
–û–ø–∏—Å–∞–Ω–∏–µ: –î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—è tagging_status, tagging_attempts, last_tagging_attempt, 
          tagging_error –≤ —Ç–∞–±–ª–∏—Ü—É posts –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.

–ü–æ–ª—è:
- tagging_status: —Å—Ç–∞—Ç—É—Å —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (pending, success, failed, retrying, skipped)
- tagging_attempts: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
- last_tagging_attempt: –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–ø—ã—Ç–∫–∏ —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
- tagging_error: –ø–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞ —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è

–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: SQLite –∏ PostgreSQL
"""

import os
import sys
import logging
from datetime import datetime, timezone
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PYTHONPATH
sys.path.insert(0, str(Path(__file__).parent.parent.parent))

from sqlalchemy import text, inspect
from database import engine, SessionLocal
from models import Base, Post

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


def check_column_exists(table_name: str, column_name: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–ª–æ–Ω–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ"""
    inspector = inspect(engine)
    columns = [col['name'] for col in inspector.get_columns(table_name)]
    return column_name in columns


def migrate_sqlite():
    """–ú–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è SQLite"""
    logger.info("üîÑ –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è SQLite...")
    
    with engine.connect() as conn:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ –ø–æ–ª—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        existing_columns = []
        for col in ['tagging_status', 'tagging_attempts', 'last_tagging_attempt', 'tagging_error']:
            if check_column_exists('posts', col):
                existing_columns.append(col)
                logger.info(f"‚úÖ –ü–æ–ª–µ '{col}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è
        if 'tagging_status' not in existing_columns:
            conn.execute(text(
                "ALTER TABLE posts ADD COLUMN tagging_status VARCHAR DEFAULT 'pending'"
            ))
            conn.commit()
            logger.info("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ: tagging_status")
        
        if 'tagging_attempts' not in existing_columns:
            conn.execute(text(
                "ALTER TABLE posts ADD COLUMN tagging_attempts INTEGER DEFAULT 0"
            ))
            conn.commit()
            logger.info("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ: tagging_attempts")
        
        if 'last_tagging_attempt' not in existing_columns:
            conn.execute(text(
                "ALTER TABLE posts ADD COLUMN last_tagging_attempt DATETIME"
            ))
            conn.commit()
            logger.info("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ: last_tagging_attempt")
        
        if 'tagging_error' not in existing_columns:
            conn.execute(text(
                "ALTER TABLE posts ADD COLUMN tagging_error TEXT"
            ))
            conn.commit()
            logger.info("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ: tagging_error")
    
    logger.info("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è SQLite –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


def migrate_postgresql():
    """–ú–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è PostgreSQL"""
    logger.info("üîÑ –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è PostgreSQL...")
    
    with engine.connect() as conn:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ –ø–æ–ª—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        existing_columns = []
        for col in ['tagging_status', 'tagging_attempts', 'last_tagging_attempt', 'tagging_error']:
            if check_column_exists('posts', col):
                existing_columns.append(col)
                logger.info(f"‚úÖ –ü–æ–ª–µ '{col}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è
        if 'tagging_status' not in existing_columns:
            conn.execute(text(
                "ALTER TABLE posts ADD COLUMN tagging_status VARCHAR DEFAULT 'pending'"
            ))
            conn.commit()
            logger.info("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ: tagging_status")
        
        if 'tagging_attempts' not in existing_columns:
            conn.execute(text(
                "ALTER TABLE posts ADD COLUMN tagging_attempts INTEGER DEFAULT 0"
            ))
            conn.commit()
            logger.info("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ: tagging_attempts")
        
        if 'last_tagging_attempt' not in existing_columns:
            conn.execute(text(
                "ALTER TABLE posts ADD COLUMN last_tagging_attempt TIMESTAMP WITH TIME ZONE"
            ))
            conn.commit()
            logger.info("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ: last_tagging_attempt")
        
        if 'tagging_error' not in existing_columns:
            conn.execute(text(
                "ALTER TABLE posts ADD COLUMN tagging_error TEXT"
            ))
            conn.commit()
            logger.info("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ: tagging_error")
    
    logger.info("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è PostgreSQL –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


def update_existing_posts():
    """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ—Å—Ç–æ–≤"""
    logger.info("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ—Å—Ç–æ–≤...")
    
    db = SessionLocal()
    try:
        # –ü–æ—Å—Ç—ã —Å —Ç–µ–≥–∞–º–∏ - —Å—Ç–∞—Ç—É—Å success
        result = db.execute(text(
            "UPDATE posts SET tagging_status = 'success' WHERE tags IS NOT NULL AND tagging_status IS NULL"
        ))
        db.commit()
        logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ {result.rowcount} –ø–æ—Å—Ç–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'success'")
        
        # –ü–æ—Å—Ç—ã –±–µ–∑ —Ç–µ–≥–æ–≤ –Ω–æ —Å —Ç–µ–∫—Å—Ç–æ–º - —Å—Ç–∞—Ç—É—Å pending
        result = db.execute(text(
            "UPDATE posts SET tagging_status = 'pending' WHERE tags IS NULL AND text IS NOT NULL AND tagging_status IS NULL"
        ))
        db.commit()
        logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ {result.rowcount} –ø–æ—Å—Ç–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'pending'")
        
        # –ü–æ—Å—Ç—ã –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ - —Å—Ç–∞—Ç—É—Å skipped
        result = db.execute(text(
            "UPDATE posts SET tagging_status = 'skipped' WHERE text IS NULL AND tagging_status IS NULL"
        ))
        db.commit()
        logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ {result.rowcount} –ø–æ—Å—Ç–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'skipped'")
        
    except Exception as e:
        db.rollback()
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤: {str(e)}")
        raise
    finally:
        db.close()


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏"""
    try:
        logger.info("=" * 60)
        logger.info("üöÄ –ú–∏–≥—Ä–∞—Ü–∏—è: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π —Å—Ç–∞—Ç—É—Å–∞ —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è")
        logger.info("=" * 60)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ë–î
        db_url = str(engine.url)
        logger.info(f"üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {db_url.split('://')[0]}")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
        if 'sqlite' in db_url:
            migrate_sqlite()
        elif 'postgresql' in db_url:
            migrate_postgresql()
        else:
            raise Exception(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –ë–î: {db_url}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ—Å—Ç—ã
        update_existing_posts()
        
        logger.info("=" * 60)
        logger.info("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        logger.info("=" * 60)
        logger.info("\nüìù –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:")
        logger.info("  - –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–æ–≤")
        logger.info("  - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π retry –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö")
        logger.info("  - Fallback –Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–æ–¥–µ–ª–∏ OpenRouter")
        logger.info("  - API endpoints –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–≥–æ–≤:")
        logger.info("    GET  /users/{user_id}/posts/tagging_stats")
        logger.info("    POST /users/{user_id}/posts/retry_tagging")
        logger.info("    POST /posts/{post_id}/regenerate_tags")
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {str(e)}")
        sys.exit(1)


if __name__ == "__main__":
    main()

