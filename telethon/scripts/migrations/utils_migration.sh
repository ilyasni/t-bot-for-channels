#!/bin/bash

# –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ Many-to-Many
# –ê–Ω–∞–ª–æ–≥ utils.sh –∏–∑ scripts/

# Logging function that frames a message with a border and adds a timestamp
log_message() {
    local message="$1"
    local combined_message="${message}"
    local length=${#combined_message}
    local border_length=$((length + 4))
    
    # Create the top border
    local border=""
    for ((i=0; i<border_length; i++)); do
        border="${border}‚îÄ"
    done
    
    # Display the framed message with timestamp
    echo "‚ï≠${border}‚ïÆ"
    echo "‚îÇ ${combined_message}   ‚îÇ"
    echo "‚ï∞${border}‚ïØ"
}

log_success() {
    local message="$1"
    local timestamp=$(date +%H:%M:%S)
    local combined_message="‚úÖ [SUCCESS] ${timestamp}: ${message}"
    log_message "${combined_message}"
}

log_error() {
    local message="$1"
    local timestamp=$(date +%H:%M:%S)
    local combined_message="‚ùå [ERROR] ${timestamp}: ${message}"
    log_message "${combined_message}"
}

log_warning() {
    local message="$1"
    local timestamp=$(date +%H:%M:%S)
    local combined_message="‚ö†Ô∏è  [WARNING] ${timestamp}: ${message}"
    log_message "${combined_message}"
}

log_info() {
    local message="$1"
    local timestamp=$(date +%H:%M:%S)
    local combined_message="‚ÑπÔ∏è  [INFO] ${timestamp}: ${message}"
    log_message "${combined_message}"
}

log_step() {
    local message="$1"
    local timestamp=$(date +%H:%M:%S)
    local combined_message="üîÑ [STEP] ${timestamp}: ${message}"
    log_message "${combined_message}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
check_process_running() {
    local process_name="$1"
    if pgrep -f "$process_name" > /dev/null 2>&1; then
        return 0  # Running
    else
        return 1  # Not running
    fi
}

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞
stop_process() {
    local process_name="$1"
    local timeout=${2:-10}  # Default 10 seconds
    
    if check_process_running "$process_name"; then
        log_info "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞: $process_name"
        pkill -f "$process_name" 2>/dev/null
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        local count=0
        while check_process_running "$process_name" && [ $count -lt $timeout ]; do
            sleep 1
            ((count++))
        done
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω–µ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è
        if check_process_running "$process_name"; then
            log_warning "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ: $process_name"
            pkill -9 -f "$process_name" 2>/dev/null
        fi
        
        return 0
    else
        log_info "–ü—Ä–æ—Ü–µ—Å—Å –Ω–µ –∑–∞–ø—É—â–µ–Ω: $process_name"
        return 1
    fi
}

# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
create_backup() {
    local file="$1"
    local backup_dir="${2:-.}"
    local timestamp=$(date +%Y%m%d_%H%M%S)
    local backup_name="${backup_dir}/$(basename ${file}).backup_${timestamp}"
    
    if [ -f "$file" ]; then
        cp "$file" "$backup_name"
        if [ $? -eq 0 ]; then
            log_success "–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: $backup_name"
            echo "$backup_name"
            return 0
        else
            log_error "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é"
            return 1
        fi
    else
        log_warning "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: $file"
        return 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Python –ø–∞–∫–µ—Ç–æ–≤
check_python_requirements() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    if ! command -v python3 &> /dev/null; then
        log_error "Python 3 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        return 1
    fi
    
    if [ -f "requirements.txt" ]; then
        python3 -c "
import sys
import pkg_resources

try:
    with open('requirements.txt') as f:
        requirements = f.read().splitlines()
    
    for requirement in requirements:
        if requirement.strip() and not requirement.startswith('#'):
            try:
                pkg_resources.require(requirement)
            except:
                print(f'Missing: {requirement}')
                sys.exit(1)
    sys.exit(0)
except Exception as e:
    print(f'Error: {e}')
    sys.exit(1)
"
        if [ $? -eq 0 ]; then
            log_success "–í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
            return 0
        else
            log_warning "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
            log_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: pip3 install -r requirements.txt"
            return 1
        fi
    else
        log_warning "requirements.txt –Ω–µ –Ω–∞–π–¥–µ–Ω"
        return 1
    fi
}

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
confirm_action() {
    local message="$1"
    local default="${2:-n}"  # Default to 'n' (no)
    
    if [ "$default" = "y" ]; then
        prompt="[Y/n]"
    else
        prompt="[y/N]"
    fi
    
    read -p "‚ùì $message $prompt: " -n 1 -r
    echo
    
    if [ -z "$REPLY" ]; then
        REPLY="$default"
    fi
    
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        return 0
    else
        return 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ë–î
check_database() {
    local db_file="$1"
    
    if [ ! -f "$db_file" ]; then
        log_warning "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: $db_file"
        return 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ SQLite –ë–î
    if command -v sqlite3 &> /dev/null; then
        local integrity=$(sqlite3 "$db_file" "PRAGMA integrity_check;" 2>&1)
        if [ "$integrity" = "ok" ]; then
            log_success "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—à–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫—É —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏"
            return 0
        else
            log_error "–ü—Ä–æ–±–ª–µ–º—ã —Å —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å—é –ë–î: $integrity"
            return 1
        fi
    else
        log_warning "sqlite3 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏"
        return 0
    fi
}

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ë–î
get_db_stats() {
    local db_file="$1"
    
    if [ ! -f "$db_file" ] || ! command -v sqlite3 &> /dev/null; then
        return 1
    fi
    
    log_info "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:"
    echo "  üìä –†–∞–∑–º–µ—Ä –ë–î: $(du -h "$db_file" | cut -f1)"
    
    local channels_count=$(sqlite3 "$db_file" "SELECT COUNT(*) FROM channels;" 2>/dev/null || echo "N/A")
    echo "  üì¢ –ö–∞–Ω–∞–ª–æ–≤: $channels_count"
    
    local users_count=$(sqlite3 "$db_file" "SELECT COUNT(*) FROM users;" 2>/dev/null || echo "N/A")
    echo "  üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: $users_count"
    
    local posts_count=$(sqlite3 "$db_file" "SELECT COUNT(*) FROM posts;" 2>/dev/null || echo "N/A")
    echo "  üìù –ü–æ—Å—Ç–æ–≤: $posts_count"
}

