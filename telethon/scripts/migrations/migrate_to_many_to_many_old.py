#!/usr/bin/env python3
"""
–ú–∏–≥—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: –ø–µ—Ä–µ—Ö–æ–¥ –æ—Ç —Å–≤—è–∑–∏ Channel -> User –∫ —Å–≤—è–∑–∏ –º–Ω–æ–≥–∏–µ-–∫–æ-–º–Ω–æ–≥–∏–º

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç:
1. –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É user_channel –¥–ª—è —Å–≤—è–∑–∏ –º–Ω–æ–≥–∏–µ-–∫–æ-–º–Ω–æ–≥–∏–º
2. –ü–µ—Ä–µ–Ω–æ—Å–∏—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–∞—Ä–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤ –Ω–æ–≤—É—é
3. –£–¥–∞–ª—è–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã –∫–∞–Ω–∞–ª–æ–≤, –æ–±—ä–µ–¥–∏–Ω—è—è –ø–æ–¥–ø–∏—Å–∫–∏ —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
4. –£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—É—é –∫–æ–ª–æ–Ω–∫—É user_id –∏–∑ —Ç–∞–±–ª–∏—Ü—ã channels
"""

import sys
import os
from datetime import datetime, timezone
from sqlalchemy import create_engine, inspect, text, MetaData, Table, Column, Integer, String, DateTime, Boolean, BigInteger, ForeignKey
from sqlalchemy.orm import sessionmaker
import logging

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from database import engine, SessionLocal
from sqlalchemy import text, inspect
from dotenv import load_dotenv

load_dotenv()

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ë–î
DATABASE_TYPE = 'sqlite'  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
if hasattr(engine.url, 'drivername'):
    if 'postgresql' in engine.url.drivername:
        DATABASE_TYPE = 'postgresql'
    elif 'sqlite' in engine.url.drivername:
        DATABASE_TYPE = 'sqlite'

logger.info(f"üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ç–∏–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {DATABASE_TYPE.upper()}")


def migrate_database():
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    
    logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    engine = create_engine(SQLALCHEMY_DATABASE_URL)
    Session = sessionmaker(bind=engine)
    session = Session()
    
    try:
        inspector = inspect(engine)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–±–ª–∏—Ü–∞ user_channel
        if 'user_channel' in inspector.get_table_names():
            logger.warning("‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ user_channel —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ user_id –≤ channels
            columns = [col['name'] for col in inspector.get_columns('channels')]
            if 'user_id' not in columns:
                logger.info("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —Ä–∞–Ω–µ–µ. –í—ã—Ö–æ–¥.")
                return True
        
        # ===== –®–ê–ì 1: –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É user_channel =====
        logger.info("üìã –®–∞–≥ 1: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã user_channel...")
        
        session.execute(text("""
            CREATE TABLE IF NOT EXISTS user_channel (
                user_id INTEGER NOT NULL,
                channel_id INTEGER NOT NULL,
                is_active BOOLEAN DEFAULT TRUE,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                last_parsed_at TIMESTAMP,
                PRIMARY KEY (user_id, channel_id),
                FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
                FOREIGN KEY (channel_id) REFERENCES channels(id) ON DELETE CASCADE
            )
        """))
        session.commit()
        logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ user_channel —Å–æ–∑–¥–∞–Ω–∞")
        
        # ===== –®–ê–ì 2: –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ =====
        logger.info("üìã –®–∞–≥ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã channels...")
        
        result = session.execute(text("""
            SELECT id, user_id, channel_username, channel_id, channel_title, 
                   is_active, created_at, last_parsed_at
            FROM channels
            ORDER BY channel_username, id
        """))
        
        old_channels = result.fetchall()
        logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(old_channels)} –∑–∞–ø–∏—Å–µ–π –≤ —Å—Ç–∞—Ä–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ")
        
        if not old_channels:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏")
        
        # ===== –®–ê–ì 3: –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–∞–Ω–∞–ª—ã –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É =====
        logger.info("üìã –®–∞–≥ 3: –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∫–∞–Ω–∞–ª–æ–≤...")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–∞–Ω–∞–ª—ã –ø–æ channel_username
        channels_map = {}  # channel_username -> {channel_data, users: [(user_id, subscription_data)]}
        
        for row in old_channels:
            old_id, user_id, username, channel_id, title, is_active, created_at, last_parsed = row
            
            if username not in channels_map:
                channels_map[username] = {
                    'channel_id': channel_id,
                    'channel_title': title,
                    'created_at': created_at,
                    'old_ids': [],  # –°—Ç–∞—Ä—ã–µ ID –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è posts
                    'users': []
                }
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–π ID –∫–∞–Ω–∞–ª–∞
            channels_map[username]['old_ids'].append(old_id)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —ç—Ç–æ–º—É –∫–∞–Ω–∞–ª—É
            channels_map[username]['users'].append({
                'user_id': user_id,
                'is_active': is_active,
                'created_at': created_at,
                'last_parsed_at': last_parsed
            })
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞ –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏ None
            if not channels_map[username]['channel_id'] and channel_id:
                channels_map[username]['channel_id'] = channel_id
            if not channels_map[username]['channel_title'] and title:
                channels_map[username]['channel_title'] = title
        
        logger.info(f"üìä –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(channels_map)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤")
        
        # ===== –®–ê–ì 4: –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –Ω–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ =====
        logger.info("üìã –®–∞–≥ 4: –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã channels_new...")
        
        session.execute(text("""
            CREATE TABLE channels_new (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                channel_username VARCHAR NOT NULL UNIQUE,
                channel_id BIGINT UNIQUE,
                channel_title VARCHAR,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """))
        session.commit()
        
        # ===== –®–ê–ì 5: –ó–∞–ø–æ–ª–Ω—è–µ–º –Ω–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã =====
        logger.info("üìã –®–∞–≥ 5: –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü –¥–∞–Ω–Ω—ã–º–∏...")
        
        channels_id_mapping = {}  # old_id -> new_id
        
        for username, data in channels_map.items():
            # –í—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–Ω–∞–ª –≤ channels_new
            result = session.execute(text("""
                INSERT INTO channels_new (channel_username, channel_id, channel_title, created_at)
                VALUES (:username, :channel_id, :title, :created_at)
                RETURNING id
            """), {
                'username': username,
                'channel_id': data['channel_id'],
                'title': data['channel_title'],
                'created_at': data['created_at']
            })
            
            new_channel_id = result.fetchone()[0]
            session.commit()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ä—ã—Ö ID -> –Ω–æ–≤—ã–π ID
            for old_id in data['old_ids']:
                channels_id_mapping[old_id] = new_channel_id
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∫–∞–Ω–∞–ª–æ–º
            for user_data in data['users']:
                session.execute(text("""
                    INSERT INTO user_channel (user_id, channel_id, is_active, created_at, last_parsed_at)
                    VALUES (:user_id, :channel_id, :is_active, :created_at, :last_parsed_at)
                    ON CONFLICT (user_id, channel_id) DO UPDATE SET
                        is_active = :is_active,
                        last_parsed_at = COALESCE(user_channel.last_parsed_at, :last_parsed_at)
                """), {
                    'user_id': user_data['user_id'],
                    'channel_id': new_channel_id,
                    'is_active': user_data['is_active'],
                    'created_at': user_data['created_at'],
                    'last_parsed_at': user_data['last_parsed_at']
                })
            
            session.commit()
            logger.info(f"‚úÖ –ö–∞–Ω–∞–ª @{username}: {len(data['users'])} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤")
        
        # ===== –®–ê–ì 6: –û–±–Ω–æ–≤–ª—è–µ–º posts =====
        logger.info("üìã –®–∞–≥ 6: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ posts...")
        
        for old_id, new_id in channels_id_mapping.items():
            session.execute(text("""
                UPDATE posts
                SET channel_id = :new_id
                WHERE channel_id = :old_id
            """), {'old_id': old_id, 'new_id': new_id})
        
        session.commit()
        logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ—Å—Ç–æ–≤: {len(channels_id_mapping)} –∫–∞–Ω–∞–ª–æ–≤")
        
        # ===== –®–ê–ì 7: –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ç–∞–±–ª–∏—Ü—É –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –Ω–æ–≤—É—é =====
        logger.info("üìã –®–∞–≥ 7: –ó–∞–º–µ–Ω–∞ —Å—Ç–∞—Ä–æ–π —Ç–∞–±–ª–∏—Ü—ã channels –Ω–∞ –Ω–æ–≤—É—é...")
        
        session.execute(text("DROP TABLE channels"))
        session.execute(text("ALTER TABLE channels_new RENAME TO channels"))
        session.commit()
        
        logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ channels –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
        
        # ===== –®–ê–ì 8: –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã =====
        logger.info("üìã –®–∞–≥ 8: –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤...")
        
        session.execute(text("""
            CREATE INDEX IF NOT EXISTS idx_channels_username 
            ON channels(channel_username)
        """))
        
        session.execute(text("""
            CREATE INDEX IF NOT EXISTS idx_channels_channel_id 
            ON channels(channel_id)
        """))
        
        session.commit()
        
        logger.info("‚úÖ –ò–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã")
        
        # ===== –ó–ê–í–ï–†–®–ï–ù–ò–ï =====
        logger.info("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        logger.info(f"üìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        channels_count = session.execute(text("SELECT COUNT(*) FROM channels")).fetchone()[0]
        user_channel_count = session.execute(text("SELECT COUNT(*) FROM user_channel")).fetchone()[0]
        
        logger.info(f"  - –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: {channels_count}")
        logger.info(f"  - –ü–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_channel_count}")
        logger.info(f"  - –£—Å—Ç—Ä–∞–Ω–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {len(old_channels) - channels_count}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {str(e)}")
        session.rollback()
        return False
        
    finally:
        session.close()


if __name__ == "__main__":
    logger.info("=" * 60)
    logger.info("–ú–ò–ì–†–ê–¶–ò–Ø –ë–ê–ó–´ –î–ê–ù–ù–´–•: –ü–ï–†–ï–•–û–î –ö –°–¢–†–£–ö–¢–£–†–ï –ú–ù–û–ì–ò–ï-–ö–û-–ú–ù–û–ì–ò–ú")
    logger.info("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è SQLite)
    if SQLALCHEMY_DATABASE_URL.startswith('sqlite'):
        import shutil
        db_path = SQLALCHEMY_DATABASE_URL.replace('sqlite:///', '')
        backup_path = f"{db_path}.backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        
        logger.info(f"üíæ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {backup_path}")
        try:
            shutil.copy2(db_path, backup_path)
            logger.info(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é: {e}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
    success = migrate_database()
    
    if success:
        logger.info("=" * 60)
        logger.info("‚úÖ –ú–ò–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û")
        logger.info("=" * 60)
        sys.exit(0)
    else:
        logger.error("=" * 60)
        logger.error("‚ùå –ú–ò–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ò–õ–ê–°–¨ –° –û–®–ò–ë–ö–ê–ú–ò")
        logger.error("=" * 60)
        sys.exit(1)

