#!/usr/bin/env python3
"""
–û–¥–Ω–æ–∫—Ä–∞—Ç–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ —Å—Ç–∞—Ä—ã—Ö –ø–æ—Å—Ç–æ–≤ –≤ Neo4j

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    docker exec rag-service python /app/scripts/backfill_neo4j.py

–ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ—Ç –ø–æ—Å—Ç—ã —Å —Ç–µ–≥–∞–º–∏ –≤ Neo4j Knowledge Graph
"""
import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from database import SessionLocal
from models import Post, User
from graph.neo4j_client import neo4j_client


async def backfill_posts(limit: int = 1000):
    """
    –ò–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ä—ã–µ –ø–æ—Å—Ç—ã –≤ Neo4j
    
    Args:
        limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
    """
    
    if not neo4j_client or not neo4j_client.enabled:
        print("‚ùå Neo4j –Ω–µ –≤–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
        print("   - NEO4J_URI")
        print("   - NEO4J_USER")
        print("   - NEO4J_PASSWORD")
        return
    
    db = SessionLocal()
    try:
        # –ü–æ—Å—Ç—ã —Å —Ç–µ–≥–∞–º–∏ (—Ç–æ–ª—å–∫–æ –æ–Ω–∏ –∏–º–µ—é—Ç —Å–º—ã—Å–ª –¥–ª—è –≥—Ä–∞—Ñ–∞)
        print(f"üîç –ü–æ–∏—Å–∫ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ (limit={limit})...")
        
        posts = db.query(Post).filter(
            Post.tags.isnot(None)
        ).limit(limit).all()
        
        if not posts:
            print("‚úÖ –ù–µ—Ç –ø–æ—Å—Ç–æ–≤ –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏")
            return
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(posts)} –ø–æ—Å—Ç–æ–≤ –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ –≤ Neo4j...")
        print(f"   (–ü–æ—Å—Ç—ã —Å —Ç–µ–≥–∞–º–∏)")
        print()
        
        success_count = 0
        error_count = 0
        
        for i, post in enumerate(posts):
            try:
                user = post.user
                channel = post.channel
                
                if not user or not channel:
                    print(f"   ‚ö†Ô∏è  Post {post.id}: –ø—Ä–æ–ø—É—â–µ–Ω (–Ω–µ—Ç user –∏–ª–∏ channel)")
                    continue
                
                # –°–æ–∑–¥–∞—Ç—å User node
                await neo4j_client.create_user_node(
                    telegram_id=user.telegram_id,
                    username=user.username
                )
                
                # –°–æ–∑–¥–∞—Ç—å Post node —Å–æ —Å–≤—è–∑—è–º–∏
                await neo4j_client.create_post_node(
                    post_id=post.id,
                    user_id=user.telegram_id,
                    channel_id=f"@{channel.channel_username}",
                    title=post.text[:100] if post.text else "No title",
                    content=post.text,
                    tags=post.tags,
                    created_at=post.posted_at.isoformat() if post.posted_at else None
                )
                
                success_count += 1
                
                # –ü—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 100 –ø–æ—Å—Ç–æ–≤
                if (i + 1) % 100 == 0:
                    print(f"   ‚úÖ {i+1}/{len(posts)} –ø–æ—Å—Ç–æ–≤ –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–æ")
                
            except Exception as e:
                error_count += 1
                print(f"   ‚ùå Post {post.id}: {str(e)[:100]}")
        
        print()
        print("=" * 60)
        print(f"‚úÖ Backfill –∑–∞–≤–µ—Ä—à–µ–Ω:")
        print(f"   –£—Å–ø–µ—à–Ω–æ: {success_count} –ø–æ—Å—Ç–æ–≤")
        print(f"   –û—à–∏–±–æ–∫: {error_count}")
        print(f"   –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {success_count + error_count}")
        print("=" * 60)
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ backfill: {e}")
        import traceback
        traceback.print_exc()
    finally:
        db.close()


async def verify_backfill():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã backfill"""
    
    if not neo4j_client or not neo4j_client.enabled:
        print("‚ùå Neo4j –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
        return
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º health check
        is_healthy = await neo4j_client.health_check()
        
        if is_healthy:
            print("‚úÖ Neo4j –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ")
        else:
            print("‚ùå Neo4j –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")


if __name__ == "__main__":
    print("=" * 60)
    print("Neo4j Backfill Script")
    print("=" * 60)
    print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    limit = 1000
    if len(sys.argv) > 1:
        try:
            limit = int(sys.argv[1])
            print(f"üìä –õ–∏–º–∏—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {limit} –ø–æ—Å—Ç–æ–≤")
        except ValueError:
            print(f"‚ö†Ô∏è  –ù–µ–≤–µ—Ä–Ω—ã–π –ª–∏–º–∏—Ç: {sys.argv[1]}, –∏—Å–ø–æ–ª—å–∑—É–µ–º {limit}")
    
    print()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º backfill
    asyncio.run(backfill_posts(limit=limit))
    
    print()
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Neo4j...")
    asyncio.run(verify_backfill())

