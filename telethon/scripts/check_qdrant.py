#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è Qdrant –∫–æ–ª–ª–µ–∫—Ü–∏–π –∏ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
"""
import sys
import os

sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from database import SessionLocal
from models import User, Post, IndexingStatus
from datetime import datetime, timedelta, timezone

def check_qdrant():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏"""
    db = SessionLocal()
    
    try:
        print("=" * 80)
        print("üîç –ü–†–û–í–ï–†–ö–ê –ò–ù–î–ï–ö–°–ê–¶–ò–ò –í QDRANT")
        print("=" * 80)
        print()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = db.query(User).all()
        
        for user in users:
            print(f"{'='*80}")
            print(f"üîπ USER ID: {user.id} | Telegram ID: {user.telegram_id}")
            print(f"{'='*80}")
            
            # –ü–æ—Å—Ç—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
            now = datetime.now(timezone.utc)
            date_from = now - timedelta(days=1)
            
            posts_count = db.query(Post).filter(
                Post.user_id == user.id,
                Post.posted_at >= date_from
            ).count()
            
            print(f"üì∞ –ü–æ—Å—Ç—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞: {posts_count}")
            
            # –ò–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã
            indexed_count = db.query(IndexingStatus).filter(
                IndexingStatus.user_id == user.id,
                IndexingStatus.status == "success"
            ).count()
            
            print(f"‚úÖ –ü—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–æ –≤ Qdrant: {indexed_count}")
            
            # –û—à–∏–±–∫–∏ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
            failed_count = db.query(IndexingStatus).filter(
                IndexingStatus.user_id == user.id,
                IndexingStatus.status == "failed"
            ).count()
            
            if failed_count > 0:
                print(f"‚ùå –û—à–∏–±–∫–∏ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏: {failed_count}")
                
                # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏
                failed = db.query(IndexingStatus).filter(
                    IndexingStatus.user_id == user.id,
                    IndexingStatus.status == "failed"
                ).order_by(IndexingStatus.indexed_at.desc()).limit(3).all()
                
                print(f"\n   –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏:")
                for idx in failed:
                    error_preview = idx.error[:100] if idx.error else "N/A"
                    print(f"      ‚Ä¢ Post {idx.post_id}: {error_preview}...")
            
            # –ü–æ—Å—Ç—ã –±–µ–∑ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
            posts_without_index = db.query(Post).filter(
                Post.user_id == user.id,
                ~Post.id.in_(
                    db.query(IndexingStatus.post_id).filter(
                        IndexingStatus.user_id == user.id
                    )
                )
            ).count()
            
            print(f"‚ö†Ô∏è  –ü–æ—Å—Ç—ã –±–µ–∑ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏: {posts_without_index}")
            
            if posts_without_index > 0:
                print(f"   ‚Üí –≠—Ç–∏ –ø–æ—Å—Ç—ã –Ω–µ –ø–æ–ø–∞–¥—É—Ç –≤ –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫!")
                print(f"   ‚Üí –ù—É–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é: POST /rag/index/user/{user.id}")
            
            # –ü–æ—Å–ª–µ–¥–Ω—è—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è
            last_indexed = db.query(IndexingStatus).filter(
                IndexingStatus.user_id == user.id,
                IndexingStatus.status == "success"
            ).order_by(IndexingStatus.indexed_at.desc()).first()
            
            if last_indexed:
                print(f"\nüìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è: {last_indexed.indexed_at}")
            else:
                print(f"\n‚ùå –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –ù–ò–ö–û–ì–î–ê –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª–∞—Å—å!")
            
            print()
        
        print("=" * 80)
        print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        print("=" * 80)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    finally:
        db.close()


if __name__ == "__main__":
    check_qdrant()

