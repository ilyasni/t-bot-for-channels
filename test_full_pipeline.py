#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞
"""

import asyncio
import logging
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append('/app')

from langchain_agents.orchestrator import DigestOrchestrator

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (—Ä–µ–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≥—Ä—É–ø–ø—ã)
TEST_MESSAGES = [
    type('Message', (), {
        'text': '–ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º! –ö–∞–∫ –¥–µ–ª–∞ —Å –ø—Ä–æ–µ–∫—Ç–æ–º?',
        'sender': type('Sender', (), {'username': 'ilyasni', 'first_name': 'Ilya'}),
        'date': type('Date', (), {'strftime': lambda fmt: '19:30'})
    })(),
    type('Message', (), {
        'text': '–ü—Ä–∏–≤–µ—Ç! –£ –Ω–∞—Å –ø—Ä–æ–±–ª–µ–º—ã —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π',
        'sender': type('Sender', (), {'username': 'matsony', 'first_name': 'Matsony'}),
        'date': type('Date', (), {'strftime': lambda fmt: '19:31'})
    })(),
    type('Message', (), {
        'text': '–ö–∞–∫–∏–µ –∏–º–µ–Ω–Ω–æ –ø—Ä–æ–±–ª–µ–º—ã?',
        'sender': type('Sender', (), {'username': 'ilyasni', 'first_name': 'Ilya'}),
        'date': type('Date', (), {'strftime': lambda fmt: '19:32'})
    })(),
    type('Message', (), {
        'text': '–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è',
        'sender': type('Sender', (), {'username': 'matsony', 'first_name': 'Matsony'}),
        'date': type('Date', (), {'strftime': lambda fmt: '19:33'})
    })(),
    type('Message', (), {
        'text': '–£ –º–µ–Ω—è —Ç–æ–∂–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –ª–æ–≥–∏–Ω–æ–º',
        'sender': type('Sender', (), {'username': 'nst_rght', 'first_name': 'NST'}),
        'date': type('Date', (), {'strftime': lambda fmt: '19:35'})
    })(),
    type('Message', (), {
        'text': '–ü–æ–Ω—è—Ç–Ω–æ, –Ω—É–∂–Ω–æ —Å—Ä–æ—á–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å',
        'sender': type('Sender', (), {'username': 'ilyasni', 'first_name': 'Ilya'}),
        'date': type('Date', (), {'strftime': lambda fmt: '19:36'})
    })(),
    type('Message', (), {
        'text': '–î–∞, —ç—Ç–æ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏',
        'sender': type('Sender', (), {'username': 'matsony', 'first_name': 'Matsony'}),
        'date': type('Date', (), {'strftime': lambda fmt: '19:37'})
    })(),
    type('Message', (), {
        'text': '–•–æ—Ä–æ—à–æ, –∑–∞–π–º—É—Å—å —ç—Ç–∏–º –∑–∞–≤—Ç—Ä–∞',
        'sender': type('Sender', (), {'username': 'ilyasni', 'first_name': 'Ilya'}),
        'date': type('Date', (), {'strftime': lambda fmt: '19:38'})
    })(),
]

async def test_full_pipeline():
    """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞"""
    logger.info("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞")
    logger.info(f"üìù –¢–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {len(TEST_MESSAGES)}")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è orchestrator
        orchestrator = DigestOrchestrator()
        logger.info("‚úÖ Orchestrator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞
        result = await orchestrator.generate_digest(
            messages=TEST_MESSAGES,
            hours=24,
            user_id=19,
            group_id=1
        )
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        logger.info("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:")
        logger.info(f"   Success: {result.get('success', False)}")
        logger.info(f"   Execution time: {result.get('execution_time', 0):.2f}s")
        
        if result.get('success'):
            digest = result.get('digest')
            if digest:
                logger.info("‚úÖ –î–∞–π–¥–∂–µ—Å—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–π–¥–∂–µ—Å—Ç–∞
                if isinstance(digest, dict):
                    logger.info("üìÑ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–π–¥–∂–µ—Å—Ç–∞:")
                    logger.info(f"   - html_digest: {len(digest.get('html_digest', ''))} —Å–∏–º–≤–æ–ª–æ–≤")
                    logger.info(f"   - metadata: {'–µ—Å—Ç—å' if 'metadata' in digest else '–Ω–µ—Ç'}")
                    logger.info(f"   - sections: {'–µ—Å—Ç—å' if 'sections' in digest else '–Ω–µ—Ç'}")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º HTML –¥–∞–π–¥–∂–µ—Å—Ç
                    html_digest = digest.get('html_digest', '')
                    if html_digest:
                        logger.info("üìÑ HTML –¥–∞–π–¥–∂–µ—Å—Ç:")
                        logger.info("=" * 50)
                        logger.info(html_digest)
                        logger.info("=" * 50)
                    else:
                        logger.warning("‚ö†Ô∏è HTML –¥–∞–π–¥–∂–µ—Å—Ç –ø—É—Å—Ç–æ–π")
                        
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                    metadata = digest.get('metadata', {})
                    if metadata:
                        logger.info("üìä –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ:")
                        logger.info(f"   - participants_count: {metadata.get('participants_count', 0)}")
                        logger.info(f"   - message_count: {metadata.get('message_count', 0)}")
                        logger.info(f"   - detail_level: {metadata.get('detail_level', 'unknown')}")
                        logger.info(f"   - dialogue_type: {metadata.get('dialogue_type', 'unknown')}")
                        
                        # –°—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–æ–≤
                        agents_status = metadata.get('agents_status', [])
                        logger.info(f"   - agents_status: {len(agents_status)} –∞–≥–µ–Ω—Ç–æ–≤")
                        
                        success_count = sum(1 for status in agents_status if status.get('status') == 'success')
                        error_count = sum(1 for status in agents_status if status.get('status') == 'error')
                        fallback_count = sum(1 for status in agents_status if status.get('status') == 'fallback')
                        
                        logger.info(f"     ‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}")
                        logger.info(f"     ‚ùå –û—à–∏–±–∫–∏: {error_count}")
                        logger.info(f"     üîÑ Fallback: {fallback_count}")
                else:
                    logger.info(f"üìÑ –î–∞–π–¥–∂–µ—Å—Ç (—Ç–∏–ø: {type(digest)}):")
                    logger.info(str(digest)[:500] + "..." if len(str(digest)) > 500 else str(digest))
            else:
                logger.error("‚ùå –î–∞–π–¥–∂–µ—Å—Ç –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
        else:
            error = result.get('error', 'Unknown error')
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {error}")
            
        return result
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
        return None

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üß™ –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞")
    
    result = await test_full_pipeline()
    
    if result and result.get('success'):
        logger.info("üéâ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù: –ü–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
    else:
        logger.error("üí• –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù: –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –≤ –ø–∞–π–ø–ª–∞–π–Ω–µ")

if __name__ == "__main__":
    asyncio.run(main())
